geom_hex(bins = 50)
foo <- foo %>%
add_residuals(mod_foo)
ggplot(foo, aes(x, classifier)) +
geom_line()
# foo2 %>%
# filter(abs(l_x) > 1) %>%
#  add_predictions(mod_foo) %>%
#  mutate(pred = pred) %>%
#  select(l_x, pred, l_y:all_of(foo), x:y) %>%
#  arrange(x)
ggplot(foo, aes(x, classifier)) +
geom_line()
# foo2 %>%
# filter(abs(l_x) > 1) %>%
#  add_predictions(mod_foo) %>%
#  mutate(pred = pred) %>%
#  select(l_x, pred, l_y:all_of(foo), x:y) %>%
#  arrange(x)
ggplot(foo, aes(x, sampling)) +
geom_line()
ggplot(foo, aes(x, y)) +
geom_line()
ggplot(foo, aes(classifier, x)) +
geom_boxplot()
ggplot(foo, aes(sampling, x)) +
geom_boxplot()
ggplot(foo, aes(classifier, y)) +
geom_boxplot()
ggplot(foo, aes(sampling, y)) +
geom_boxplot()
mod <- lm(x ~ classifier, data = foo)
grid <- foo %>%
data_grid(classifier) %>%
add_predictions(mod, "x")
ggplot(foo, aes(classifier, x)) +
geom_boxplot() +
geom_point(data = grid, colour = "red", size = 4)
mod <- lm(x ~ sampling, data = foo)
grid <- foo %>%
data_grid(sampling) %>%
add_predictions(mod, "x")
ggplot(foo, aes(sampling, x)) +
geom_boxplot() +
geom_point(data = grid, colour = "red", size = 4)
foo <- foo %>%
add_residuals(mod)
foo %>%
ggplot(aes(y, resid)) +
geom_ref_line(h = 0) +
geom_line()
ggplot(foo, aes(y, resid, colour = classifier)) +
geom_ref_line(h = 0) +
geom_line()
ggplot(foo, aes(y, resid, colour = sampling)) +
geom_ref_line(h = 0) +
geom_line()
foo %>%
ggplot(aes(y, resid)) +
geom_ref_line(h = 0) +
geom_line(colour = "grey50") +
geom_smooth(se = FALSE, span = 0.20)
foo %>%
filter(classifier == "XGBoost") %>%
ggplot(aes(x, y)) +
geom_point() +
geom_line()
foo %>%
filter(classifier == "DecisionTree") %>%
ggplot(aes(x, y)) +
geom_point() +
geom_line()
foo %>%
filter(classifier == "Logistic Reg") %>%
ggplot(aes(x, y)) +
geom_point() +
geom_line()
foo %>%
ggplot(aes(x, y, colour = classifier)) +
geom_boxplot()
foo %>%
ggplot(aes(x, y, colour = sampling)) +
geom_boxplot()
mod3 <- lm(x ~ classifier, data = foo)
mod4 <- lm(y ~ classifier, data = foo)
foo %>%
gather_residuals(precision = mod3, recall = mod4) %>%
ggplot(aes(x, resid, colour = model)) +
geom_line(alpha = 0.75)
grid <- foo %>%
data_grid(x, classifier) %>%
add_predictions(mod2, "x")
ggplot(foo, aes(classifier, x)) +
geom_boxplot() +
geom_point(data = grid, colour = "red") +
facet_wrap(~ classifier)
library(splines)
mod6 <- MASS::rlm(x ~ classifier, data = foo)
foo %>%
add_residuals(mod6, "resid") %>%
ggplot(aes(y, resid)) +
geom_hline(yintercept = 0, size = 2, colour = "white") +
geom_line()
foo %>%
data_grid(y, classifier) %>%
add_predictions(mod6) %>%
ggplot(aes(y, pred, colour = classifier)) +
geom_line() +
geom_point()
# foo = tibble(x=precision, y=recall, classifier=classifier, sampling=sampling, technique=technique, year=year)
foo %>%
ggplot(aes(year, precision, group = classifier)) +
geom_line(alpha = 1/3) +
ggtitle("Classifier - Precision")
foo %>%
ggplot(aes(year, recall, group = classifier)) +
geom_line(alpha = 1/3) +
ggtitle("Classifier - Recall")
foo %>%
ggplot(aes(year, precision, group = sampling)) +
geom_line(alpha = 1/3) +
ggtitle("Sampling - Precision")
foo %>%
ggplot(aes(year, recall, group = sampling)) +
geom_line(alpha = 1/3) +
ggtitle("Sampling - Recall")
foo %>%
ggplot(aes(year, precision, group = technique)) +
geom_line(alpha = 1/3) +
ggtitle("Technique - Precision")
foo %>%
ggplot(aes(year, recall, group = technique)) +
geom_line(alpha = 1/3) +
ggtitle("Technique - Recall")
# foo = tibble(x=precision, y=recall, classifier=classifier, sampling=sampling, technique=technique, year=year)
xg <- filter(foo, classifier == "XGBoost")
xg %>%
ggplot(aes(year, x)) +
geom_line() +
ggtitle("XGBoost Precision Full Data ")
# foo = tibble(x=precision, y=recall, classifier=classifier, sampling=sampling, technique=technique, year=year)
nb <- filter(foo, classifier == "Naive Bayes")
nb %>%
ggplot(aes(year, x)) +
geom_line() +
ggtitle("Naive Bayes Precision Full Data ")
# foo = tibble(x=precision, y=recall, classifier=classifier, sampling=sampling, technique=technique, year=year)
rf <- filter(foo, classifier == "Random Forest")
rf %>%
ggplot(aes(year, x)) +
geom_line() +
ggtitle("Random Forest Precision Full Data ")
# foo = tibble(x=precision, y=recall, classifier=classifier, sampling=sampling, technique=technique, year=year)
lr <- filter(foo, classifier == "Logistic Reg")
lr %>%
ggplot(aes(year, x)) +
geom_line() +
ggtitle("Logistic Regression Precision Full Data ")
# foo = tibble(x=precision, y=recall, classifier=classifier, sampling=sampling, technique=technique, year=year)
dt <- filter(foo, classifier == "DecisionTree")
dt %>%
ggplot(aes(year, x)) +
geom_line() +
ggtitle("Decision Tree Precision Full Data ")
# foo = tibble(x=precision, y=recall, classifier=classifier, sampling=sampling, technique=technique, year=year)
xg <- filter(foo, classifier == "XGBoost")
xg %>%
ggplot(aes(year, y)) +
geom_line() +
ggtitle("XGBoost Recall Full Data ")
# foo = tibble(x=precision, y=recall, classifier=classifier, sampling=sampling, technique=technique, year=year)
nb <- filter(foo, classifier == "Naive Bayes")
nb %>%
ggplot(aes(year, y)) +
geom_line() +
ggtitle("Naive Bayes Recall Full Data ")
# foo = tibble(x=precision, y=recall, classifier=classifier, sampling=sampling, technique=technique, year=year)
rf <- filter(foo, classifier == "Random Forest")
rf %>%
ggplot(aes(year, y)) +
geom_line() +
ggtitle("Random Forest Recall Full Data ")
# foo = tibble(x=precision, y=recall, classifier=classifier, sampling=sampling, technique=technique, year=year)
lr <- filter(foo, classifier == "Logistic Reg")
lr %>%
ggplot(aes(year, y)) +
geom_line() +
ggtitle("Logistic Regression Recall Full Data ")
# foo = tibble(x=precision, y=recall, classifier=classifier, sampling=sampling, technique=technique, year=year)
dt <- filter(foo, classifier == "DecisionTree")
dt %>%
ggplot(aes(year, y)) +
geom_line() +
ggtitle("Decision Tree Recall Full Data ")
xg_mod <- lm(x ~ y, classifier == "XGBoost", data = foo)
xg %>%
add_predictions(xg_mod) %>%
ggplot(aes(year, pred)) +
geom_line() +
ggtitle("XGBoost Linear trend + ")
lr_mod <- lm(x ~ y,  classifier == "Logistic Reg", data = foo)
lr %>%
add_predictions(lr_mod) %>%
ggplot(aes(year, pred)) +
geom_line() +
ggtitle("Logistic Regression Linear trend + ")
rf_mod <- lm(x ~ y, classifier == "Random Forest", data = foo)
rf %>%
add_predictions(rf_mod) %>%
ggplot(aes(year, pred)) +
geom_line() +
ggtitle("Random Forest Linear trend + ")
nb_mod <- lm(x ~ y,  classifier == "Naive Bayes", data = foo)
nb %>%
add_predictions(nb_mod) %>%
ggplot(aes(year, pred)) +
geom_line() +
ggtitle("Naive Bayes Linear trend + ")
dt_mod <- lm(x ~ y, classifier == "DecisionTree", data = foo)
dt %>%
add_predictions(dt_mod) %>%
ggplot(aes(year, pred)) +
geom_line() +
ggtitle("Decision Tree Linear trend + ")
xg %>%
add_residuals(xg_mod) %>%
ggplot(aes(year, resid)) +
geom_hline(yintercept = 0, colour = "white", size = 3) +
geom_line() +
ggtitle("XGBoost Remaining pattern")
lr %>%
add_residuals(lr_mod) %>%
ggplot(aes(year, resid)) +
geom_hline(yintercept = 0, colour = "white", size = 3) +
geom_line() +
ggtitle("Logistic Regression Remaining pattern")
rf %>%
add_residuals(rf_mod) %>%
ggplot(aes(year, resid)) +
geom_hline(yintercept = 0, colour = "white", size = 3) +
geom_line() +
ggtitle("Random Forest Remaining pattern")
nb %>%
add_residuals(nb_mod) %>%
ggplot(aes(year, resid)) +
geom_hline(yintercept = 0, colour = "white", size = 3) +
geom_line() +
ggtitle("Naive Bayes Remaining pattern")
dt %>%
add_residuals(dt_mod) %>%
ggplot(aes(year, resid)) +
geom_hline(yintercept = 0, colour = "white", size = 3) +
geom_line() +
ggtitle("Decision Tree Remaining pattern")
by_side <- foo %>%
group_by(classifier, sampling, technique) %>%
nest()
by_side
by_side$data[[1]]
foo_model <- function(df){
lm(x ~ y, data = df)
}
models <- map(by_side$data, foo_model)
by_side <- by_side %>%
mutate(model = map(data, foo_model))
# by_side %>%
#   filter(classifier == "XGBoost")
by_side %>%
arrange(classifier, sampling, technique)
by_side <- by_side %>%
mutate(
resids = map2(data, model, add_residuals)
)
by_side
resids <- unnest(by_side, resids)
resids
resids %>%
ggplot(aes(year, resid)) +
geom_line(aes(group = classifier), alpha = 1 / 3) +
geom_smooth(se = FALSE) +
ggtitle("Classifier Residuals")
#> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = "cs")'
resids %>%
ggplot(aes(year, resid)) +
geom_line(aes(group = classifier), alpha = 1 / 3) +
geom_smooth(se = FALSE) +
ggtitle("Classifier Residuals")
#> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = "cs")'
resids %>%
ggplot(aes(year, resid)) +
geom_line(aes(group = technique), alpha = 1 / 3) +
geom_smooth(se = FALSE) +
ggtitle("Technique Residuals")
#> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = "cs")'
resids %>%
ggplot(aes(year, resid, group = technique)) +
geom_line(alpha = 1 / 3) +
facet_wrap(~classifier)
resids %>%
ggplot(aes(year, resid, group = sampling)) +
geom_line(alpha = 1 / 3) +
facet_wrap(~technique)
resids %>%
ggplot(aes(year, resid, group = classifier)) +
geom_line(alpha = 1 / 3) +
facet_wrap(~sampling)
broom::glance(xg_mod)
broom::glance(nb_mod)
broom::glance(lr_mod)
broom::glance(dt_mod)
broom::glance(rf_mod)
by_side %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance)
glance <- by_side %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance, .drop = TRUE)
# glance
glance %>%
arrange(r.squared)
glance %>%
ggplot(aes(classifier, r.squared)) +
geom_jitter(width = 0.5) +
ggtitle("Classifier R.Squared")
# glance %>%
#   ggplot(aes(sampling, r.squared)) +
#     geom_jitter(width = 0.5) +
#   ggtitle("Sampling R.Squared")
# Creating error: Validate mapping
# glance %>%
#   ggplot(aes(year, r.squared)) +
#   geom_jitter(width = 0.5) +
#   geom_jitter("Year R.Squared")
glance %>%
ggplot(aes(sampling, r.squared)) +
geom_jitter(width = 0.5) +
ggtitle("Sampling R.Squared")
bad_fit <- filter(glance, r.squared < 0.25)
bad_fit
foo %>%
semi_join(bad_fit, by = "classifier") %>%
ggplot(aes(year, x, colour = classifier)) +
geom_line() +
ggplot("Classifier for Precision")
foo %>%
semi_join(bad_fit, by = "classifier") %>%
ggplot(aes(year, y, colour = classifier)) +
geom_line() +
ggplot("Classifier for Recall")
ggplot(data = table) +
geom_boxplot(mapping = aes(x=precision, y=test_size, alpha = classifier))
recall = table[, 9]
precision = table[, 8]
iteration = table[, 7]
train_size = table[, 6]
test_size = table[, 5]
classifier = table[, 4]
sampling = table[, 2]
technique = table[, 3]
year = table[, 1]
table <- read.csv("~/Document-Classification/classifier/Output/Iteration.csv")
head(table)
recall = table1[, 9]
precision = table1[, 8]
iteration = table1[, 7]
train_size = table1[, 6]
test_size = table1[, 5]
classifier = table1[, 4]
sampling = table1[, 2]
technique = table1[, 3]
year = table1[, 1]
library(tidyverse)
library(reshape)
library(ggplot2)
library(modelr)
library(tinytex)
options(na.action = na.warn)
setwd("~/Document-Classification/classifier/Output")
getwd()
table1 <- read.csv("~/Document-Classification/classifier/Output/Iteration.csv")
head(table1)
recall = table1[, 9]
precision = table1[, 8]
iteration = table1[, 7]
train_size = table1[, 6]
test_size = table1[, 5]
classifier = table1[, 4]
sampling = table1[, 2]
technique = table1[, 3]
year = table1[, 1]
ggplot(data = table1) +
geom_point(mapping = aes(x = precision, y = test_size))
ggplot(data = table) +
geom_boxplot(mapping = aes(x=precision, y=test_size, alpha = classifier))
ggplot(data = table, mapping = aes(x = precision, y = ..test_size..)) +
geom_freqpoly(mapping = aes(colour = classifier), binwidth = 500)
ggplot(data = table1, mapping = aes(x = precision, y = ..test_size..)) +
geom_freqpoly(mapping = aes(colour = classifier), binwidth = 500)
ggplot(data = table1) +
geom_boxplot(mapping = aes(x=precision, y=test_size, alpha = classifier))
ggplot(data = table1) +
geom_point(mapping = aes(x = precision, y = test_size))
table1 <- read.csv("~/Document-Classification/classifier/Output/Iteration.csv")
head(table1)
recall = table1[, 9]
precision = table1[, 8]
iteration = table1[, 7]
train_size = table1[, 6]
test_size = table1[, 5]
classifier = table1[, 4]
sampling = table1[, 2]
technique = table1[, 3]
year = table1[, 1]
ggplot(data = table1) +
geom_point(mapping = aes(x = precision, y = test_size))
ggplot(data = table1) +
geom_boxplot(mapping = aes(x=precision, y=test_size, alpha = classifier))
ggplot(data = table1, mapping = aes(x = precision, y = ..test_size..)) +
geom_freqpoly(mapping = aes(colour = classifier), binwidth = 500)
ggplot(data = table1, mapping = aes(x = precision, y = test_size)) +
geom_freqpoly(mapping = aes(colour = classifier), binwidth = 500)
library(tidyverse)
library(reshape)
library(ggplot2)
library(modelr)
library(tinytex)
options(na.action = na.warn)
setwd("~/Document-Classification/classifier/Output")
getwd()
table1 <- read.csv("~/Document-Classification/classifier/Output/Iteration.csv")
head(table1)
recall = table1[, 9]
precision = table1[, 8]
iteration = table1[, 7]
train_size = table1[, 6]
test_size = table1[, 5]
classifier = table1[, 4]
sampling = table1[, 2]
technique = table1[, 3]
year = table1[, 1]
ggplot(data = table) +
geom_point(mapping = aes(x = precision, y = test_size))
ggplot(data = table) +
geom_point(mapping = aes(x = precision, y = test_size))
ggplot(data = table) +
geom_point(mapping = aes(x = precision, y = test_size))
ggplot(data = table) +
geom_point(mapping = aes(x = precision, y = test_size, color = technique))
ggplot(data = table) +
geom_point(mapping = aes(x = precision, y = test_size, size = technique))
ggplot(data = table) +
geom_point(mapping = aes(x = precision, y = test_size, size = classifier))
ggplot(data = table1) +
geom_point(mapping = aes(x = precision, y = test_size))
setwd("~/Document-Classification/classifier/Output")
getwd()
table1 <- read.csv("~/Document-Classification/classifier/Output/Iteration.csv")
head(table1)
recall = table1[, 9]
precision = table1[, 8]
iteration = table1[, 7]
train_size = table1[, 6]
test_size = table1[, 5]
classifier = table1[, 4]
sampling = table1[, 2]
technique = table1[, 3]
year = table1[, 1]
ggplot(data = table1) +
geom_point(mapping = aes(x = precision, y = test_size))
ggplot(data = table1) +
geom_point(mapping = aes(x = precision, y = test_size))
ggplot(data = table1) +
geom_point(mapping = aes(x = precision, y = test_size))
ggplot(data = table1) +
geom_point(mapping = aes(x = precision, y = test_size, color = technique))
ggplot(data = table1) +
geom_point(mapping = aes(x = precision, y = test_size, color = classifier))
# Left
ggplot(data = table1) +
geom_point(mapping = aes(x = precision, y = test_size, alpha = classifier))
# Right
ggplot(data = table1) +
geom_point(mapping = aes(x = precision, y = test_size, shape = classifier))
ggplot(data = table1) +
geom_point(mapping = aes(x = precision, y = test_size), color = "blue")
ggplot(data = table1) +
geom_point(mapping = aes(x = precision, y = test_size)) + facet_wrap(~ classifier, nrow = 2)
ggplot(data = table1) +
geom_point(mapping = aes(x = precision, y = test_size)) +
facet_grid(Sampling ~ Technique)
ggplot(data = table1) +
geom_point(mapping = aes(x = precision, y = test_size)) +
facet_grid(Sampling ~ Classifier)
ggplot(table1, aes(precision, test_size)) + geom_boxplot()
ggplot(data = table1) +
geom_point(mapping = aes(x = precision, y = test_size)) +
geom_smooth(mapping = aes(x = precision, y = test_size))
ggplot(data = table1) +
stat_summary(
mapping = aes(x = precision, y = test_size),
fun.min = min,
fun.max = max,
fun = median
)
ggplot(data = table1) +
geom_boxplot(mapping = aes(x=precision, y=test_size, alpha = classifier))
ggplot(data = table1) +
geom_boxplot(mapping = aes(x=precision, y=test_size, alpha = sampling))
ggplot(data = table1) +
geom_boxplot(mapping = aes(x=precision, y=recall, alpha = technique))
ggplot(data = table1) +
geom_boxplot(mapping = aes(x=precision, y=test_size, alpha = technique))
