,sentence,label,data,regex
0,Session 1B: Retrieval Models and Ranking 1,1,Session,True
1,"SIGIR'17, August 7-11, 2017, Shinjuku, Tokyo, Japan",0,,False
2,Neural Ranking Models with Weak Supervision,0,,False
3,Mostafa Dehghani,0,,False
4,University of Amsterdam dehghani@uva.nl,0,,False
5,Hamed Zamani,0,,False
6,University of Massachuse s Amherst zamani@cs.umass.edu,0,,False
7,Aliaksei Severyn,0,,False
8,Google Research severyn@google.com,0,,False
9,Jaap Kamps,0,,False
10,University of Amsterdam kamps@uva.nl,0,,False
11,W. Bruce Cro,0,,False
12,University of Massachuse s Amherst cro @cs.umass.edu,0,,False
13,ABSTRACT,0,,False
14,"Despite the impressive improvements achieved by unsupervised deep neural networks in computer vision and NLP tasks, such improvements have not yet been observed in ranking for information retrieval. e reason may be the complexity of the ranking problem, as it is not obvious how to learn from queries and documents when no supervised signal is available. Hence, in this paper, we propose to train a neural ranking model using weak supervision, where labels are obtained automatically without human annotators or any external resources (e.g., click data). To this aim, we use the output of an unsupervised ranking model, such as BM25, as a weak supervision signal. We further train a set of simple yet e ective ranking models based on feed-forward neural networks. We study their e ectiveness under various learning scenarios (point-wise and pair-wise models) and using di erent input representations (i.e., from encoding querydocument pairs into dense/sparse vectors to using word embedding representation). We train our networks using tens of millions of training instances and evaluate it on two standard collections: a homogeneous news collection (Robust) and a heterogeneous large-scale web collection (ClueWeb). Our experiments indicate that employing proper objective functions and le ing the networks to learn the input representation based on weakly supervised data leads to impressive performance, with over 13% and 35% MAP improvements over the BM25 model on the Robust and the ClueWeb collections. Our ndings also suggest that supervised neural ranking models can greatly bene t from pre-training on large amounts of weakly labeled data that can be easily obtained from unsupervised IR models.",1,Robust,True
15,KEYWORDS Ranking model; weak supervision; deep neural network; deep learning; ad-hoc retrieval,1,ad-hoc,True
16,1 INTRODUCTION,1,DUC,True
17,"Learning state-of-the-art deep neural network models requires a large amounts of labeled data, which is not always readily available and can be expensive to obtain. To circumvent the lack of humanlabeled training examples, unsupervised learning methods aim to model the underlying data distribution, thus learning powerful feature representations of the input data, which can be helpful for",1,ad,True
18,Work done while interning at Google Research.,0,,False
19,This work is licensed under a Creative Commons Attribution International 4.0 License.,0,,False
20,building more accurate discriminative models especially when li le or even no supervised data is available.,0,,False
21,"A large group of unsupervised neural models seeks to exploit the implicit internal structure of the input data, which in turn requires customized formulation of the training objective (loss function), targeted network architectures and o en non-trivial training setups. For example in NLP, various methods for learning distributed word representations, e.g., word2vec [27], GloVe [31], and sentence representations, e.g., paragraph vectors [23] and skip-thought [22] have been shown very useful to pre-train word embeddings that are then used for other tasks such as sentence classi cation, sentiment analysis, etc. Other generative approaches such as language modeling in NLP, and, more recently, various avors of auto-encoders [2] and generative adversarial networks [13] in computer vision have shown a promise in building more accurate models.",1,ad,True
22,"Despite the advances in computer vision, speech recognition, and NLP tasks using unsupervised deep neural networks, such advances have not been observed in core information retrieval (IR) problems, such as ranking. A plausible explanation is the complexity of the ranking problem in IR, in the sense that it is not obvious how to learn a ranking model from queries and documents when no supervision in form of the relevance information is available. To overcome this issue, in this paper, we propose to leverage large amounts of unsupervised data to infer ""noisy"" or ""weak"" labels and use that signal for learning supervised models as if we had the ground truth labels. In particular, we use classic unsupervised IR models as a weak supervision signal for training deep neural ranking models. Weak supervision here refers to a learning approach that creates its own training data by heuristically retrieving documents for a large query set. is training data is created automatically, and thus it is possible to generate billions of training instances with almost no cost.1 As training deep neural networks is an exceptionally data hungry process, the idea of pre-training on massive amount of weakly supervised data and then ne-tuning the model using a small amount of supervised data could improve the performance [11].",1,ad,True
23,"e main aim of this paper is to study the impact of weak supervision on neural ranking models, which we break down into the following concrete research questions:",0,,False
24,RQ1 Can labels from an unsupervised IR model such as BM25 be,0,,False
25,used as weak supervision signal to train an e ective neural,0,,False
26,ranker?,0,,False
27,RQ2 What input representation and learning objective is most suit-,0,,False
28,able for learning in such a se ing?,0,,False
29,"SIGIR '17, August 07-11, 2017, Shinjuku, Tokyo, Japan",0,,False
30,© 2017 Copyright held by the owner/author(s). 978-1-4503-5022-8/17/08. DOI: 10.1145/3077136.3080832,0,,False
31,"1Although weak supervision may refer to using noisy data, in this paper, we assume that no external information, e.g., click-through data, is available.",0,,False
32,65,0,,False
33,Session 1B: Retrieval Models and Ranking 1,1,Session,True
34,"SIGIR'17, August 7-11, 2017, Shinjuku, Tokyo, Japan",0,,False
35,RQ3 Can a supervised learning model bene t from a weak super-,0,,False
36,"vision step, especially in cases when labeled data is limited?",0,,False
37,"We examine various neural ranking models with di erent ranking architectures and objectives, i.e., point-wise and pair-wise, as well as di erent input representations, from encoding query-document pairs into dense/sparse vectors to learning query/document embedding representations. e models are trained on billions of training examples that are annotated by BM25, as the weak supervision signal. Interestingly, we observe that using just training data that are annotated by BM25 as the weak annotator, we can outperform BM25 itself on the test data. Based on our analysis, the achieved performance is generally indebted to three main factors: First, de ning an objective function that aims to learn the ranking instead of calibrated scoring to relax the network from ing to the imperfections in the weakly supervised training data. Second, le ing the neural networks learn optimal query/document representations instead of feeding them with a representation based on prede ned features. is is a key requirement to maximize the bene ts from deep learning models with weak supervision as it enables them to generalize be er. ird and last, the weak supervision se ing makes it possible to train the network on a massive amount of training data.",1,ad,True
38,"We further thoroughly analyse the behavior of models to understand what they learn, what is the relationship among di erent models, and how much training data is needed to go beyond the weak supervision signal. We also study if employing deep neural networks may help in di erent situations. Finally, we examine the scenario of using the network trained on a weak supervision signal as a pre-training step. We demonstrate that, in the ranking problem, the performance of deep neural networks trained on a limited amount of supervised data signi cantly improves when they are initialized from a model pre-trained on weakly labeled data.",0,,False
39,"Our results have broad impact as the proposal to use unsupervised traditional methods as weak supervision signals is applicable to variety of IR tasks, such as ltering or classi cation, without the need for supervised data. More generally, our approach uni es the classic IR models with currently emerging data-driven approaches in an elegant way.",1,ad,True
40,2 RELATED WORK,0,,False
41,"Deep neural networks have shown impressive performance in many computer vision, natural language processing, and speech recognition tasks [24]. Recently, several a empts have been made to study deep neural networks in IR applications, which can be generally partitioned into two categories [29, 46]. e rst category includes approaches that use the results of trained (deep) neural networks in order to improve the performance in IR applications. Among these, distributed word representations or embeddings [27, 31] have a racted a lot of a ention. Word embedding vectors have been applied to term re-weighting in IR models [32, 47], query expansion [10, 33, 43], query classi cation [25, 44], etc. e main shortcoming of most of the approaches in this category is that the objective of the trained neural network di ers from the objective of these tasks. For instance, the word embedding vectors proposed in [27, 31] are trained based on term proximity in a large corpus, which is di erent from the objective in most IR tasks. To overcome this issue, some approaches try to learn representations in an end-to-end neural model for learning a speci c task like entity ranking for expert nding [39] or product search [38]. Zamani and Cro [45] recently proposed",1,ad,True
42,relevance-based word embedding models for learning word representations based on the objectives that ma er for IR applications.,0,,False
43,"e second category, which this paper belongs to, consists of the approaches that design and train a (deep) neural network for a speci c task, e.g., question answering [6, 41], click models [4], context-aware ranking [42], etc. A number of the approaches in this category have been proposed for ranking documents in response to a given query. ese approaches can be generally divided into two groups: late combination models and early combination models (or representation-focused and interaction-focused models according to [14]). e late combination models, following the idea of Siamese networks [5], independently learn a representation for each query and candidate document and then calculate the similarity between the two estimated representations via a similarity function. For example, Huang et al. [18] proposed DSSM, which is a feed forward neural network with a word hashing phase as the rst layer to predict the click probability given a query string and a document title. e DSSM model was further improved by incorporating convolutional neural networks [35].",1,corpora,True
44,"On the other hand, the early combination models are designed based on the interactions between the query and the candidate document as the input of network. For instance, DeepMatch [26] maps each text to a sequence of terms and trains a feed-forward network for computing the matching score. e deep relevance matching model for ad-hoc retrieval [14] is another example of an early combination model that feeds a neural network with the histogram-based features representing interactions between the query and document. Early combining enables the model to have an opportunity to capture various interactions between query and document(s), while with late combination approach, the model has only the chance of isolated observation of input elements. Recently, Mitra et al. [28] proposed to simultaneously learn local and distributional representations, which are early and late combination models respectively, to capture both exact term matching and semantic term matching.",1,ad-hoc,True
45,"Until now, all the proposed neural models for ranking are trained on either explicit relevance judgements or clickthrough logs. However, a massive amount of such training data is not always available.",0,,False
46,"In this paper, we propose to train neural ranking models using weak supervision, which is the most natural way to reuse the existing supervised learning models where the imperfect labels are treated as the ground truth. e basic assumption is that we can cheaply obtain labels (that are of lower quality than human-provided labels) by expressing the prior knowledge we have about the task at hand by specifying a set of heuristics, adapting existing ground truth data for a di erent but related task (this is o en referred to distant supervision2), extracting supervision signal from external knowledge-bases or ontologies, crowd-sourcing partial annotations that are cheaper to get, etc. Weak supervision is a natural way to bene t from unsupervised data and it has been applied in NLP for various tasks including relation extraction [3, 15], knowledge-base completion [17], sentiment analysis [34], etc. ere are also similar a empts in IR for automatically constructing test collections [1] and learning to rank using labeled features, i.e. features that an expert believes they are correlated with relevance [9]. In this paper, we make use of traditional IR models as the weak supervision signal to generate a large",1,ad,True
47,2We do not distinguish between weak and distant supervision as the di erence is subtle and both terms are o en used interchangeably in the literature.,0,,False
48,66,0,,False
49,Session 1B: Retrieval Models and Ranking 1,1,Session,True
50,"SIGIR'17, August 7-11, 2017, Shinjuku, Tokyo, Japan",0,,False
51,4.1 Ranking Architectures,0,,False
52,We de ne three di erent ranking models: one point-wise and two pair-wise models. We introduce the architecture of these models and explain how we train them using weak supervision signals.,0,,False
53,(a) Score model,0,,False
54,(b) Rank model,0,,False
55,(c) RankProb model,0,,False
56,Figure 1: Di erent Ranking Architectures,0,,False
57,amount of training data and train e ective neural ranking models that outperform the baseline methods by a signi cant margin.,0,,False
58,3 WEAK SUPERVISION FOR RANKING,0,,False
59,"Deep learning techniques have taken o in many elds, as they automate the onerous task of input representation and feature engineering. On the other hand, the more the neural networks become deep and complex, the more it is crucial for them to be trained on massive amounts of training data. In many applications, rich annotations are costly to obtain and task-speci c training data is now a critical bo leneck. Hence, unsupervised learning is considered as a long standing goal for several applications. However, in a number of information retrieval tasks, such as ranking, it is not obvious how to train a model with large numbers of queries and documents with no relevance signal. To address this problem in an unsupervised fashion, we use the idea of ""Pseudo-Labeling"" by taking advantage of existing unsupervised methods for creating a weakly annotated set of training data and we propose to train a neural retrieval model with weak supervision signals we have generated. In general, weak supervision refers to learning from training data in which the labels are imprecise. In this paper, we refer to weak supervision as a learning approach that automatically creates its own training data using an existing unsupervised approach, which di ers from imprecise data coming from external observations (e.g., click-through data) or noisy human-labeled data.",1,ad,True
60,"We focus on query-dependent ranking as a core IR task. To this aim, we take a well-performing existing unsupervised retrieval model, such as BM25. is model plays the role of ""pseudo-labeler"" in our learning scenario. In more detail, given a target collection and a large set of training queries (without relevance judgments), we make use of the pseudo-labeler to rank/score the documents for each query in the training query set. Note that we can generate as much as training data as we need with almost no cost. e goal is to train a ranking model given the scores/ranking generated by the pseudo-labeler as a weak supervision signal.",0,,False
61,"In the following section, we formally present a set of neural network-based ranking models that can leverage the given weak supervision signal in order to learn accurate representations and ranking for the ad-hoc retrieval task.",1,ad-hoc,True
62,4 NEURAL RANKING MODELS,0,,False
63,"In this section, we rst introduce our ranking models. en, we describe the architecture of the base neural network model shared by di erent ranking models. Finally, we discuss the three input layer architectures used in our neural rankers to encode (query, candidate document) pairs.",0,,False
64,"Score model : is architecture models a point-wise ranking model that learns to predict retrieval scores for query-document pairs. More formally, the goal in this architecture is to learn a scoring function S(q,d; ) that determines the retrieval score of document d for query q, given a set of model parameters  . In the training stage, we are given a training set comprising of training instances each a triple  ,"" (q,d,sq,d ), where q is a query from training query set Q, d represents a retrieved document for the query q, and sq,d is the relevance score (calculated by a weak supervisor), which is acquired using a retrieval scoring function in our setup. We consider the mean squared error as the loss function for a given batch of training instances:""",0,,False
65,L,0,,False
66,(b;,0,,False
67,),0,,False
68,",",0,,False
69,1 |b |,0,,False
70,"|b | i ,1",0,,False
71,(S,0,,False
72,"({q,d",0,,False
73,}i,0,,False
74,;,0,,False
75,),0,,False
76,-s,0,,False
77,"{q,d",0,,False
78,}i,0,,False
79,)2,0,,False
80,(1),0,,False
81,"where {q,d }i denotes the query and the corresponding retrieved document in the ith training instance, i.e. i in the batch b. e",0,,False
82,conceptual architecture of the model is illustrated in Figure 1a.,0,,False
83,"Rank model : In this model, similar to the previous one, the goal is to learn a scoring function S(q,d; ) for a given pair of query q and document d with the set of model parameters  . However, unlike the previous model, we do not aim to learn a calibrated scoring function. In this model, as it is depicted in Figure 1b, we use a pair-wise scenario during training in which we have two point-wise networks that share parameters and we update their parameters to minimize a pair-wise loss. In this model, each training instance has ve elements:  ,"" (q,d1,d2,sq,d1 ,sq,d2 ). During the inference, we treat the trained model as a point-wise scoring function to score query-document pairs.""",0,,False
84,"We have tried di erent pair-wise loss functions and empirically found that the model learned based on the hinge loss (max-margin loss function) performs be er than the others. Hinge loss is a linear loss that penalizes examples that violate the margin constraint. It is widely used in various learning to rank algorithms, such as Ranking SVM [16]. e hinge loss function for a batch of training instances is de ned as follows:",0,,False
85,L,0,,False
86,(b;,0,,False
87,),0,,False
88,",",0,,False
89,1 |b |,0,,False
90,|b |,0,,False
91,max,0,,False
92,"i ,1",0,,False
93,"0, -sign(s {q,d1 }i -s {q,d2 }i )",0,,False
94,(2),0,,False
95,"(S({q,d1}i ; ) -S({q,d2}i ; )) ,",0,,False
96,"where  is the parameter determining the margin of hinge loss. We found that as we compress the outputs to the range of [-1,1],  , 1 works well as the margin for the hinge loss function.",0,,False
97,RankProb model : e third architecture is based on a pair-wise,0,,False
98,scenario during both training and inference (Figure 1c). is model,0,,False
99,"learns a ranking function R (q,d1,d2; ) which predicts the probability of document d1 to be ranked higher than d2 given q. Similar to the rank model, each training instance has ve elements:",0,,False
100," ,"" (q,d1,d2,sq,d1 ,sq,d1 ). For a given batch of training instances, we""",0,,False
101,67,0,,False
102,Session 1B: Retrieval Models and Ranking 1,1,Session,True
103,"SIGIR'17, August 7-11, 2017, Shinjuku, Tokyo, Japan",0,,False
104,de ne our loss function based on cross-entropy as follows:,0,,False
105,L,0,,False
106,(b,0,,False
107,;,0,,False
108,),0,,False
109,",",0,,False
110,-,0,,False
111,1 |b |,0,,False
112,|b |,0,,False
113,P,0,,False
114,"i ,1",0,,False
115,"{q,d1,",0,,False
116,d2,0,,False
117,}i,0,,False
118,log(R,0,,False
119,(,0,,False
120,"{q,d",0,,False
121,"1,d2",0,,False
122,}i,0,,False
123,;,0,,False
124,),0,,False
125,),0,,False
126,(3),0,,False
127,"+ (1-P {q,d1,d2 }i )log(1-R ({q,d1,d2}i ; ))",0,,False
128,"where P {q,d1,d2 }i is the probability of document d1 being ranked",0,,False
129,"higher thand2, based on the scores obtained from training instancei :",0,,False
130,"P {q,d1,d2",0,,False
131,}i,0,,False
132,",",0,,False
133,"s {q,d1 }i s {q,d1 }i +s {q,d2",0,,False
134,}i,0,,False
135,(4),0,,False
136,"It is notable that at inference time, we need a scalar score for",0,,False
137,"each document. erefore, we need to turn the model's pair-wise",0,,False
138,"predictions into a score per document. To do so, for each document,",0,,False
139,"we calculate the average of predictions against all other candidate documents, which has O (n2) time complexity and is not practical",0,,False
140,in real-world applications. ere are some approximations could be,0,,False
141,applicable to decrease the time complexity at inference time [40].,0,,False
142,4.2 Neural Network Architecture,0,,False
143,"As shown in Figure 1, all the described ranking architectures share a",0,,False
144,neural network module. We opted for a simple feed-forward neural,0,,False
145,"network which is composed of: input layer z0, l -1 hidden layers, and the output layer zl . e input layer z0 provides a mapping  to encode the input query and document(s) into a xed-length",0,,False
146,vector. e exact speci cation of the input representation feature,0,,False
147,function  is given in the next subsection. Each hidden layer zi is a fully-connected layer that computes the following transformation:,0,,False
148,"zi ,"" (Wi .zi-1 +bi ); 1 <i <l -1,""",0,,False
149,(5),0,,False
150,"where Wi and bi respectively denote the weight matrix and the bias term corresponding to the ith hidden layer, and  (.) is the activation function. We use the recti er linear unit ReLU(x ) ,"" max(0,x ) as the activation function, which is a common choice in the deep learning literature [24]. e output layer zl is a fully-connected layer with a single continuous output. e activation function for the output layer depends on the ranking architecture that we use. For the score model architecture, we empirically found that a linear activation function works best, while tanh and the sigmoid functions are used for the rank model and rankprob model respectively.""",0,,False
151,"Furthermore, to prevent feature co-adaptation, we use dropout [36] as the regularization technique in all the models. Dropout sets a portion of hidden units to zero during the forward phase when computing the activations which prevents over ing.",1,ad,True
152,4.3 Input Representations,0,,False
153,"We explore three de nitions of the input layer representation z0 captured by a feature function  that maps the input into a xedsize vector which is further fed into the fully connected layers: (i) a conventional dense feature vector representation that contains various statistics describing the input query-document pair, (ii) a sparse vector containing bag-of-words representation, and (iii) bagof-embeddings averaged with learned weights. ese input representations de ne how much capacity is given to the network to extract discriminative signal from the training data and thus result in di erent generalization behavior of the networks. It is noteworthy that input representation of the networks in the score model and rank model is de ned for a pair of the query and the document, while",0,,False
154,"the network in the rankprob model needs to be fed by a triple of the query, the rst document, and the second document.",0,,False
155,"Dense vector representation (Dense) : In this se ing, we build a dense feature vector composed of features used by traditional IR methods, e.g., BM25. e goal here is to let the network t the function described by the BM25 formula when it receives exactly the same inputs. In more detail, our input vector is a concatenation (||) of the following inputs: total number of documents in the collection (i.e., N ), average length of documents in the collection (i.e., a (ld )D ), document length (i.e., ld ), frequency of each query term ti in the document (i.e., t f (ti ,d )), and document frequency of each query term (i.e., d f (ti )). erefore, for the point-wise se ing, we have the following input vector:",1,ad,True
156," (q,d ) ,"" [N ||a (ld )D ||ld ||{d f (ti )||t f (ti ,d )}1i k ], (6)""",0,,False
157,"where k is set to a xed value (5 in our experiments). We truncate longer queries and do zero padding for shorter queries. For the networks in the rankprob model, we consider a similar function with additional elements: the length of the second document and the frequency of query terms in the second document.",1,ad,True
158,"Sparse vector representation (Sparse) : Next, we move away",0,,False
159,from a fully featurized representation that contains only aggregated,0,,False
160,statistics and let the network performs feature extraction for us. In,0,,False
161,"particular, we build a bag-of-words representation by extracting",0,,False
162,"term frequency vectors of query (t f q ), document (t f d ), and the collection (t f c ) and feed the network with concatenation of these",0,,False
163,"three vectors. For the point-wise se ing, we have the following",0,,False
164,input vector:,0,,False
165," (q,d ) , [t f c ||t f q ||t f d ]",0,,False
166,(7),0,,False
167,"For the network in rankprob model, we have a similar input vector",0,,False
168,"with both t f d1 and t f d2 . Hence, the size of the input layer is 3 × ocab size in the point-wise se ing, and 4 × ocab size in the",0,,False
169,pair-wise se ing.,0,,False
170,"Embedding vector representation (Embed) : e major weakness of the previous input representation is that words are treated as discrete units, hence prohibiting the network from performing so matching between semantically similar words in queries and documents. In this input representation paradigm, we rely on word embeddings to obtain more powerful representation of queries and documents that could bridge the lexical chasm. e representation function  consists of three components: an embedding function E : V  Rm (where V denotes the vocabulary set and m is the embedding dimension), a weighting function W : V  R, and a compositionality function : (Rm,R)n  Rm . More formally, the function  for the point-wise se ing is de ned as:",1,ad,True
171," (q,d ) , [",0,,False
172,"|q | i ,1",0,,False
173,(E,0,,False
174,(tiq,0,,False
175,"),W",0,,False
176,(tiq,0,,False
177,),0,,False
178,),0,,False
179,|,0,,False
180,|,0,,False
181,"|d | i ,1",0,,False
182,(E,0,,False
183,(tid,0,,False
184,"),W",0,,False
185,(tid,0,,False
186,),0,,False
187,")],",0,,False
188,(8),0,,False
189,"where tiq and tid denote the ith term in query q and document d, respectively. For the network of the rankprob model, another similar",0,,False
190,term is concatenated with the above vector for the second docu-,0,,False
191,ment. e embedding function E transforms each term to a dense,0,,False
192,"m-dimensional oat vector as its representation, which is learned",0,,False
193,during the training phase. e weighting function W assigns a,0,,False
194,"weight to each term in the vocabulary set, which is supposed to learn",0,,False
195,term global importance for the retrieval task. e compositionality,0,,False
196,function projects a set of n embedding and weighting pairs to an,0,,False
197,68,0,,False
198,Session 1B: Retrieval Models and Ranking 1,1,Session,True
199,"SIGIR'17, August 7-11, 2017, Shinjuku, Tokyo, Japan",0,,False
200,"m-dimensional representation, independent from the value of n. e compositionality function is given by:",0,,False
201,n,0,,False
202,"n i ,1",0,,False
203,(E,0,,False
204,(ti,0,,False
205,"),W",0,,False
206,(ti,0,,False
207,),0,,False
208,),0,,False
209,",",0,,False
210,"W (ti ) ·E (ti ),",0,,False
211,(9),0,,False
212,"i ,1",0,,False
213,which is the weighted element-wise sum of the terms' embedding,0,,False
214,"vectors. W is the normalized weight that is learned for each term, given as follows:",0,,False
215,"W (ti ) ,",0,,False
216,"exp(W (ti )) nj,1exp(W (tj ))",0,,False
217,(10),0,,False
218,All combinations of di erent ranking architectures and di erent input representations presented in this section can be considered for developing ranking models.,0,,False
219,5 EXPERIMENTAL DESIGN,0,,False
220,"In this section, we describe the train and evaluation data, metrics we report, and detailed experimental setup. en we discuss the results.",0,,False
221,5.1 Data,0,,False
222,"Collections. In our experiments, we used two standard TREC collections: e rst collection (called Robust04) consists of over 500k news articles from di erent news agencies, that is available in TREC Disks 4 and 5 (excluding Congressional Records). is collection, which was used in TREC Robust Track 2004, is considered as a homogeneous collection, because of the nature and the quality of documents.",1,TREC,True
223,"e second collection (called ClueWeb) that we used is ClueWeb09 Category B, a large-scale web collection with over 50 million English documents, which is considered as a heterogeneous collection. is collection has been used in TREC Web Track, for several years. In our experiments with this collection, we ltered out the spam documents using the Waterloo spam scorer3 [7] with the default threshold 70%.",1,ClueWeb,True
224,e statistics of these collections are reported in Table 1.,0,,False
225,"Training query set. To train our neural ranking models, we used the unique queries (only the query string) appearing in the AOL query logs [30]. is query set contains web queries initiated by real users in the AOL search engine that were sampled from a threemonth period from March 1, 2006 to May 31, 2006. We ltered out a large volume of navigational queries containing URL substrings (""h p"", ""www."", "".com"", "".net"", "".org"", "".edu""). We also removed all non-alphanumeric characters from the queries. We made sure that no queries from the training set appear in our evaluation sets. For each dataset, we took queries that have at least ten hits in the target corpus using the pseudo-labeler method. Applying all these processes, we ended up with 6.15 million queries for the Robust04 dataset and 6.87 million queries for the ClueWeb dataset. In our experiments, we randomly selected 80% of the training queries as training set and the remaining 20% of the queries were chosen as validation set for hyper-parameter tuning. As the ""pseudo-labeler"" in our training data, we have used BM25 to score/rank documents in the collections given the queries in the training query set.",1,ad,True
226,Evaluation query sets. We use the following query sets for evaluation that contain human-labeled judgements: a set of 250 queries (TREC topics 301­450 and 601­700) for the Robust04 collection that were previously used in TREC Robust Track 2004. A set of 200 queries,1,TREC,True
227,3h p://plg.uwaterloo.ca/gvcormac/clueweb09spam/,0,,False
228,Table 1: Collections statistics.,0,,False
229,Collection,0,,False
230,Robust04 ClueWeb,1,Robust,True
231,Genre,0,,False
232,news webpages,0,,False
233,eries,0,,False
234,"301-450,601-700 1-200",0,,False
235,# docs,0,,False
236,528k 50m,0,,False
237,length,0,,False
238,"254 1,506",0,,False
239,(topics 1-200) were used for the experiments on the ClueWeb collection. ese queries were used in TREC Web Track 2009­2012. We only used the title of topics as queries.,1,ClueWeb,True
240,5.2 Evaluation Metrics.,0,,False
241,"To evaluate retrieval e ectiveness, we report three standard evaluation metrics: mean average precision (MAP) of the top-ranked 1000 documents, precision of the top 20 retrieved documents (P@20), and normalized discounted cumulative gain (nDCG) [19] calculated for the top 20 retrieved documents (nDCG@20). Statistically signi cant di erences of MAP, P@20, and nDCG@20 values are determined using the two-tailed paired t-test with p alue < 0.05, with Bonferroni correction.",1,MAP,True
242,5.3 Experimental Setup,0,,False
243,"All models described in Section 4 are implemented using TensorFlow [12, 37]. In all experiments, the parameters of the network are optimized employing the Adam optimizer [21] and using the computed gradient of the loss to perform the back-propagation algorithm. All model hyper-parameters were tuned on the respective validation set (see Section 5.1 for more detail) using batched GP bandits with an expected improvement acquisition function [8]. For each model, the size of hidden layers and the number of hidden layers were selected from [16,32,64,128,256,512,1024] and [1,2,3,4], respectively. e initial learning rate and the dropout parameter were selected from [1E -3,5E -4,1E -4,5E -5,1E -5] and [0.0,0.1,0.2,0.5], respectively. For models with embedding vector representation, we considered embedding sizes of [100,300,500,1000]. As the training data, we take the top 1000 retrieved documents for each query from training query set Q, to prepare the training data. In total, we have |Q |×1000 ( 6E10 examples in our data) point-wise example and  |Q |×10002 ( 6E13 examples in our data) pair-wise examples. e batch size in our experiments was selected from [128,256,512]. At inference time, for each query, we take the top 2000 retrieved documents using BM25 as candidate documents and re-rank them by the trained models. In our experiments, we use the Indri4 implementation of BM25 with the default parameters (i.e., k1 ,"" 1.2, b "","" 0.75, and k3 "", 1000).",1,ad,True
244,6 RESULTS AND DISCUSSION,0,,False
245,"In the following, we evaluate our neural rankers trained with di erent learning approaches (Section 4) and di erent input representations (Section 4.3). We a empt to break down our research questions to several subquestions, and provide empirical answers along with the intuition and analysis behind each question:",0,,False
246,"How do the neural models with di erent training objectives and input representations compare? Table 2 presents the performance of all model combinations. Interestingly, combinations of the rank model and the rankprob model with embedding vector representation outperform BM25 by signi cant margins in both collections. For instance, the rankprob model with embedding vector representation that shows the best performance among the other methods,",0,,False
247,4h ps://www.lemurproject.org/indri.php,0,,False
248,69,0,,False
249,Session 1B: Retrieval Models and Ranking 1,1,Session,True
250,"SIGIR'17, August 7-11, 2017, Shinjuku, Tokyo, Japan",0,,False
251,"Table 2: Performance of the di erent models on di erent datasets. or indicates that the improvements or degradations with respect to BM25 are statistically signi cant, at the 0.05 level using the paired two-tailed t-test.",1,ad,True
252,Method,0,,False
253,BM25,0,,False
254,Score + Dense Score + Sparse Score + Embed,0,,False
255,Rank + Dense Rank + Sparse Rank + Embed,0,,False
256,RankProb + Dense RankProb + Sparse RankProb + Embed,0,,False
257,MAP,1,MAP,True
258,0.2503,0,,False
259,0.1961 0.2141 0.2423,0,,False
260,0.1940 0.2213 0.2811,0,,False
261,0.2192 0.2246 0.2837,0,,False
262,Robust04,1,Robust,True
263,P@20 nDCG@20,0,,False
264,0.3569 0.4102,0,,False
265,0.2787 0.3180,0,,False
266,0.3501,0,,False
267,0.3260 0.3604,0,,False
268,0.3999,0,,False
269,0.2830 0.3216 0.3773,0,,False
270,0.3317 0.3628 0.4302,0,,False
271,0.2966 0.3250 0.3802,0,,False
272,0.3278 0.3763 0.4389,0,,False
273,MAP,1,MAP,True
274,0.1021,0,,False
275,0.0689 0.0701 0.1002,0,,False
276,0.0622 0.0776 0.1306,0,,False
277,0.0702 0.0894 0.1387,0,,False
278,ClueWeb,1,ClueWeb,True
279,P@20 nDCG@20,0,,False
280,0.2418 0.2070,0,,False
281,0.1518 0.1889,0,,False
282,0.2513,0,,False
283,0.1430 0.1495,0,,False
284,0.2130,0,,False
285,0.1516 0.1989 0.2839,0,,False
286,0.1383 0.1816 0.2216,0,,False
287,0.1711 0.2109 0.2967,0,,False
288,0.1506,0,,False
289,0.1916 0.2330,0,,False
290,"surprisingly, improves BM25 by over 13% and 35% in Robust04 and ClueWeb collections respectively, in terms of MAP. Similar improvements can be observed for the other evaluation metrics.",1,Robust,True
291,"Regarding the modeling architecture, in the rank model and the rankprob model, compared to the score model, we de ne objective functions that target to learn ranking instead of scoring. is is particularly important in weak supervision, as the scores are imperfect values--using the ranking objective alleviates this issue by forcing the model to learn a preference function rather than reproduce absolute scores. In other words, using the ranking objective instead of learning to predict calibrated scores allows the rank model and the rankprob model to learn to distinguish between examples whose scores are close. is way, some small amount of noise, which is a common problem in weak supervision, would not perturb the ranking as easily.",1,ad,True
292,"Regarding the input representations, embedding vector representation leads to be er performance compared to the other ones in all models. Using embedding vector representation not only provides the network with more information, but also lets the network to learn proper representation capturing the needed elements for the next layers with be er understanding of the interactions between query and documents. Providing the network with already engineered features would block it from going beyond the weak supervision signal and limit the ability of the models to learn latent features that are una ainable through feature engineering.",1,ad,True
293,"Note that although the rankprob model is more precise in terms of MAP, the rank model is much faster in the inference time (O (n) compared toO (n2)), which is a desirable property in real-life applications.",1,MAP,True
294,"Why do dense vector representation and sparse vector representation fail to replicate the performance of BM25? Although neural networks are capable of approximating arbitrarily complex non-linear functions, we observe that the models with dense vector representation fail to replicate the BM25 performance, while they are given the same feature inputs as the BM25 components (e.g., TF, IDF, average document length, etc). To ensure that the training converges and there is no over ing, we have looked into the training and validation loss values of di erent models during the training time. Figure 2 illustrates the loss curves for the training and validation sets (see Section 5.1) per training step for di erent models. As shown, in models with dense vector representation, the training",0,,False
295,"losses drop quickly to values close to zero while this is not the case for the validation losses, which is an indicator of over- ing on the training data. Although we have tried di erent regularization techniques, like l2-regularization and dropout with various parameters, there is less chance for generalization when the networks are fed with the fully featurized input. Note that over- ing would lead to poor performance, especially in weak supervision scenarios as the network learns to model imperfections from weak annotations. is phenomenon is also the case for models with the sparse vector representation, but with less impact. However, in the models with the embedding vector representation, the networks do not over t, which helps it to go beyond the weak supervision signals in the training data.",1,ad,True
296,"How are the models related? To be er understand the relationship of di erent neural models described above, we compare their performance across the query dimension following the approach in [28]. We assume that similar models should perform similarly for the same queries. Hence, we represent each model by a vector, called the performance vector, whose elements correspond to per query performance of the model, in terms of nDCG@20. e closer the performance vectors are, the more similar the models are in terms of query by query performance. For the sake of visualization, we reduce the vectors dimension by projecting them to a two-dimensional space, using t-Distributed Stochastic Neighbor Embedding (t-SNE)5.",0,,False
297,"Figure 3 illustrates the proximity of di erent models in the Robust04 collection. Based on this plot, models with similar input representations (same color) have quite close performance vectors, which means that they perform similarly for same queries. is is not necessarily the case for models with similar architecture (same shape). is suggests that the amount and the way that we provide information to the networks are the key factors in the ranking performance.",1,Robust,True
298,We also observe that the score model with dense vector representation is the closest to BM25 which is expected. It is also interesting that models with embedding vector representation are placed far away from other models which shows they perform di erently compared to the other input representations.,0,,False
299,"How meaningful are the compositionality weights learned in the embedding vector representation? In this experiment, we",0,,False
300,5h ps://lvdmaaten.github.io/tsne/,0,,False
301,70,0,,False
302,Session 1B: Retrieval Models and Ranking 1,1,Session,True
303,"SIGIR'17, August 7-11, 2017, Shinjuku, Tokyo, Japan",0,,False
304,(a) Score-Dense,0,,False
305,(b) Score-Sparse,0,,False
306,(c) Score-Embed,0,,False
307,(d) Rank-Dense,0,,False
308,(e) Rank-Sparse,0,,False
309,(f) Rank-Embed,0,,False
310,(g) RankProb-Dense,0,,False
311,(h) RankProb-Sparse,0,,False
312,(i) RankProb-Embed,0,,False
313,Figure 2: Training and validation loss curves for all combinations of di erent ranking architectures and feeding paradigms.,1,ad,True
314,Score + Dense BM25,0,,False
315,Rank + Dense RankProb + Dense Rank + Sparse,0,,False
316,RankProb + Sparse Score + Embed RankProb + Embed,0,,False
317,Score + Sparse,0,,False
318,Rank + Embed,0,,False
319,Figure 3: Proximity of di erent models in terms of query-,0,,False
320,by-query performance.,0,,False
321,"focus on the best performing combination, i.e., the rankprob model with embedding vector representation. To analyze what the network learns, we look into the weights W (see Section 4.3) learned by the network. Note that the weighting function W learns a global weight for each vocabulary term. We notice that in both collections there is a strong linear correlation between the learned weights and the inverse document frequency of terms. Figure 4 illustrates the sca er plots of the learned weight for each vocabulary term and its IDF, in both collections. is is an interesting observation as we do not provide any global corpus information to the network in training",0,,False
322,(a) Robust04,1,Robust,True
323,(b) ClueWeb,1,ClueWeb,True
324,(Pearson Correlation: 0.8243),0,,False
325,(Pearson Correlation: 0.7014),0,,False
326,Figure 4: Strong linear correlation between weight learned by the compositionality function in the embedding vector representation and inverse document frequency.,0,,False
327,and the network is able to infer such a global information by only observing individual training instances.,0,,False
328,"How well do other alternatives for the embedding and weighting functions in the embedding vector representation perform? Considering embedding vector representation as the input representation, we have examined di erent alternatives for the embedding",0,,False
329,71,0,,False
330,Session 1B: Retrieval Models and Ranking 1,1,Session,True
331,"SIGIR'17, August 7-11, 2017, Shinjuku, Tokyo, Japan",0,,False
332,"Table 3: Performance of the rankprob model with variants of the embedding vector representation on di erent datasets. indicates that the improvements over all other models are statistically signi cant, at the 0.05 level using the paired two-tailed",0,,False
333,"t-test, with Bonferroni correction.",0,,False
334,Embedding type,0,,False
335,Pretrained (external) + Uniform weighting Pretrained (external) + IDF weighting Pretrained (external) + Weight learning Pretrained (target) + Uniform weighting Pretrained (target) + IDF weighting Pretrained (target) + Weight learning Learned + Uniform weighting Learned + IDF weighting Learned + Weight learning,0,,False
336,MAP,1,MAP,True
337,0.1656 0.1711 0.1880 0.1217 0.1402 0.1477 0.2612 0.2676 0.2837,0,,False
338,Robust04,1,Robust,True
339,P@20 nDCG@20,0,,False
340,0.2543 0.2755 0.2890 0.2009 0.2230 0.2266 0.3602 0.3619 0.3802,0,,False
341,0.3017 0.3104 0.3413 0.2791 0.2876 0.2804 0.4180 0.4200 0.4389,0,,False
342,MAP,1,MAP,True
343,0.0612 0.0712 0.0756 0.0679 0.0779 0.0816 0.0912 0.1032 0.1387,0,,False
344,ClueWeb,1,ClueWeb,True
345,P@20 nDCG@20,0,,False
346,0.1300 0.1346 0.1344 0.1331 0.1674 0.1729 0.2216 0.2419 0.2967,0,,False
347,0.1401 0.1469 0.1583 0.1587 0.1540 0.1608 0.1841 0.1922 0.2330,0,,False
348,"function E: (1) employing pre-trained word embeddings learned from an external corpus (we used Google News), (2) employing pretrained word embeddings learned from the target corpus (using the skip-gram model [27]), and (3) learning embeddings during the network training as it is explained in Section 4.3. Furthermore, for the compositionality function , we tried di erent alternatives: (1) uniform weighting (simple averaging which is a common approach in compositionality function), (2) using IDF as xed weights instead of learning the weighting function W, and (3) learning weights during the training as described in Section 4.3.",1,ad,True
349,Table 3 presents the performance of all these combinations on both collections. We note that learning both embedding and weighting functions leads to the highest performance in both collections.,1,ad,True
350,"ese improvements are statistically signi cant. According to the results, regardless of the weighting approach, learning embeddings during training outperforms the models with xed pre-trained embeddings. is supports the hypothesis that with the embedding vector representation the neural networks learn an embedding that is based on the interactions of query and documents that tends to be tuned be er to the corresponding ranking task. Also, regardless of the embedding method, learning weights helps models to get be er performance compared to the xed weightings, with either IDF or uniform weights. Although weight learning can signi cantly a ect the performance, it has less impact than learning embeddings.",0,,False
351,"Note that in the models with pre-trained word embeddings, employing word embeddings trained on the target collection outperforms those trained on the external corpus in the ClueWeb collection; while this is not the case for the Robust04 collection. e reason could be related to the collection size, since the ClueWeb is approximately 100 times larger than the Robust04.",1,ClueWeb,True
352,"In addition to the aforementioned experiments, we have also tried initializing the embedding matrix with a pre-trained word embedding trained on the Google News corpus, instead of random initialization. Figure 5 presents the learning curve of the models. According to this gure, the model initialized by a pre-trained embedding performs be er than random initialization when a limited amount of training data is available. When enough training data is fed to the network, initializing with pre-trained embedding and random values converge to the same performance. An interesting observation here is that in both collections, these two initializations converge when the models exceed the performance of the weak",1,ad,True
353,(a) Robust04,1,Robust,True
354,(b) ClueWeb,1,ClueWeb,True
355,Figure 5: Performance of the rankprob model with learned,0,,False
356,"embedding, pre-trained embedding, and learned embedding",0,,False
357,"with pre-trained embedding as initialization, with respect to",0,,False
358,di erent amount of training data.,0,,False
359,"supervision source, which is BM25 in our experiments. is suggests that the convergence occurs when accurate representations are learned by the networks, regardless of the initialization.",0,,False
360,"Are deep neural networks a good choice for learning to rank with weak supervision? To see if there is a real bene t from using a non-linear neural network in di erent se ings, we examined RankSVM [20] as a strong-performing pair-wise learning to rank method with linear kernel that is fed with di erent inputs: dense vector representation, sparse vector representation, and embedding vector representation. Considering that o -the-shelf RankSVM is not able to learn embedding representations during training, for embedding vector representation, instead of learning embeddings we use a pre-trained embedding matrix trained on Google News and",1,ad,True
361,"xed IDF weights. e results are reported in Table 4. As BM25 is not a linear function,",0,,False
362,"RankSVM with linear kernel is not able to completely approximate it. However, surprisingly, for both dense vector representation and sparse vector representation, RankSVM works as well as neural networks (see Table 2). Also, compared to the corresponding experiment in Table 3, the performance of the neural network with an external pre-trained embedding and IDF weighting is not considerably be er than RankSVM. is shows that having non-linearity in neural networks does not help that much when we do not have representation learning as part of the model. Note that all of these results are still lower than BM25, which shows that they are not good at learning from weak supervision signals for ranking.",0,,False
363,72,0,,False
364,Session 1B: Retrieval Models and Ranking 1,1,Session,True
365,"SIGIR'17, August 7-11, 2017, Shinjuku, Tokyo, Japan",0,,False
366,Table 4: Performance of the linear RankSVM with di erent features.,0,,False
367,Method,0,,False
368,RankSVM + Dense RankSVM + Sparse RankSVM + (Pretrained (external) + IDF weighting) Score (one layer with no nonlinearity) + Embed,0,,False
369,MAP,1,MAP,True
370,0.1983 0.2307 0.1539,0,,False
371,0.2103,0,,False
372,Robust04,1,Robust,True
373,P@20 nDCG@20 MAP,1,MAP,True
374,0.2841 0.3260 0.2121,0,,False
375,0.3375 0.3794 0.1852,0,,False
376,0.0761 0.0862 0.0633,0,,False
377,0.3986 0.3160 0.0645,0,,False
378,ClueWeb,1,ClueWeb,True
379,P@20 nDCG@20,0,,False
380,0.1840 0.2170 0.1572,0,,False
381,0.1637 0.1939 0.1494,0,,False
382,0.1421 0.1322,0,,False
383,"Table 5: Performance of the rankprob model with embedding vector representation in fully supervised setting, weak supervised setting, and weak supervised plus supervision as ne tuning. indicates that the improvements over all other models are",0,,False
384,"statistically signi cant, at the 0.05 level using the paired two-tailed t-test, with Bonferroni correction.",0,,False
385,Method,0,,False
386,MAP,1,MAP,True
387,Robust04 P@20 nDCG@20,1,Robust,True
388,MAP,1,MAP,True
389,ClueWeb P@20 nDCG@20,1,ClueWeb,True
390,Weakly supervised,0,,False
391,0.2837 0.3802,0,,False
392,Fully supervised,0,,False
393,0.1790 0.2863,0,,False
394,Weakly supervised + Fully supervised 0.2912 0.4126,0,,False
395,0.4389,0,,False
396,0.3402 0.4509,0,,False
397,0.1387 0.2967,0,,False
398,0.0680 0.1425 0.1520 0.3077,0,,False
399,0.2330,0,,False
400,0.1652 0.2461,0,,False
401,"We have also examined the score model with a network with a single linear hidden layer, with the embedding vector representation, which is equivalent to a linear regression model with the ability of representation learning. Comparing the results of this experiment with Score-Embed in Table 2, we can see that with a single-linear network we are not able to achieve a performance that is as good as a deep neural network with non-linearity. is shows that the most important superiority of deep neural networks over other machine learning methods is their ability to learn an e ective representation and take all the interactions between query and document(s) into consideration for approximating an e ective ranking/scoring function. is can be achieved when we have a deep enough network with non-linear activations.",0,,False
402,"How useful is learning with weak supervision for supervised ranking? In this set of experiments, we investigate whether employing weak supervision as a pre-training step helps to improve the performance of supervised ranking, when a small amount of training data is available. Table 5 shows the performance of the rankprob model with the embedding vector representation in three situations: (1) when it is only trained on weakly supervised data (similar to the previous experiments), (2) when it is only trained on supervised data, i.e., relevance judgments, and (3) when the parameters of the network is pre-trained using the weakly supervised data and then ne tuned using relevance judgments. In all the supervised scenarios, we performed 5-fold cross-validation over the queries of each collection and in each step, we used the TREC relevance judgements of the training set as supervised signal. For each query with m relevant documents, we also randomly sampled m non-relevant documents as negative instances. Binary labels are used in the experiments: 1 for relevant documents and 0 for non-relevant ones.",1,TREC,True
403,"e results in Table 5 suggest that pre-training the network with a weak supervision signal, signi cantly improves the performance of supervised ranking. e reason for the poor performance of the supervised model compared to the conventional learning to rank models is that the number of parameters are much larger, hence it needs much more data for training.",0,,False
404,"In situations when li le supervised data is available, it is especially helpful to use unsupervised pre-training which acts as a network",0,,False
405,pre-conditioning that puts the parameter values in the appropriate range that renders the optimization process more e ective for further supervised training [11].,0,,False
406,"With this experiment, we indicate that the idea of learning from weak supervision signals for neural ranking models, which is presented in this paper, not only enables us to learn neural ranking models when no supervised signal is available, but also has substantial positive e ects on the supervised ranking models with limited amount of training data.",0,,False
407,7 CONCLUSIONS,0,,False
408,"In this paper, we proposed to use traditional IR models such as BM25 as a weak supervision signal in order to generate large amounts of training data to train e ective neural ranking models. We examine various neural ranking models with di erent ranking architectures and objectives, and di erent input representations.",1,ad,True
409,"We used over six million queries to train our models and evaluated them on Robust04 and ClueWeb 09-Category B collections, in an ad-hoc retrieval se ing. e experiments showed that our best performing model signi cantly outperforms the BM25 model (our weak supervision signal) by over 13% and 35% MAP improvements in the Robust04 and ClueWeb collections, respectively. We also demonstrated that in the case of having a small amount of training data, we can improve the performance of supervised learning by pre-training the network on weakly supervised data.",1,Robust,True
410,"Based on our results, there are three key ingredients in neural ranking models that lead to good performance with weak supervision: e rst is the proper input representation. Providing the network with raw data and le ing the network to learn the features that ma er, gives the network a chance of learning how to ignore imperfection in the training data. e second ingredient is to target the right goal and de ne a proper objective function. In the case of having weakly annotated training data, by targeting some explicit labels from the data, we may end up with a model that learned to express the data very well, but is incapable of going beyond it. is is especially the case with deep neural networks where there are many parameters and it is easy to learn a model that over ts the data. e third ingredient is providing the network with a considerable amount of training examples. As an example, during the experiments we noticed that",1,ad,True
411,73,0,,False
412,Session 1B: Retrieval Models and Ranking 1,1,Session,True
413,"SIGIR'17, August 7-11, 2017, Shinjuku, Tokyo, Japan",0,,False
414,"using the embedding vector representation, the network needs a lot of examples to learn embeddings that are more e ective for retrieval compared to pre-trained embeddings. anks to weak supervision, we can generate as much training data as we need with almost no cost.",0,,False
415,"Several future directions can be pursued. An immediate task would be to study the performance of more expressive neural network architectures e.g., CNNs and LSTMs, with weak supervision setup. Other experiment is to leverage multiple weak supervision signals from di erent sources. For example, we have other unsupervised ranking signals such as query likelihood and PageRank and taking them into consideration might bene t the learning process. Other future work would be to investigate the boosting mechanism for the method we have in this paper. In other words, it would be interesting to study if it is possible to use the trained model on weakly supervised data to annotate data with more quality from original source of annotation and leverage the new data to train a be er model. Finally, we can apply this idea to other information retrieval tasks, such as query/document classi cation and clustering.",0,,False
416,ACKNOWLEDGMENTS,0,,False
417,"is research was supported in part by Netherlands Organization for Scienti c Research through the Exploratory Political Search project (ExPoSe, NWO CI # 314.99.108), by the Digging into Data Challenge through the Digging Into Linked Parliamentary Data project (DiLiPaD, NWO Digging into Data # 600.006.014), and by the Center for Intelligent Information Retrieval. Any opinions, ndings and conclusions or recommendations expressed in this material are those of the authors and do not necessarily re ect those of the sponsors.",0,,False
418,REFERENCES,0,,False
419,"[1] Nima Asadi, Donald Metzler, Tamer Elsayed, and Jimmy Lin. 2011. Pseudo test collections for learning web search ranking functions. In Proceedings of the 34th international ACM SIGIR conference on Research and development in Information Retrieval. ACM, 1073­1082.",1,ad,True
420,"[2] Pierre Baldi. 2012. Autoencoders, unsupervised learning, and deep architectures. ICML unsupervised and transfer learning 27 (2012), 37­50.",0,,False
421,"[3] Lidong Bing, Sneha Chaudhari, Richard C Wang, and William W Cohen. 2015. Improving Distant Supervision for Information Extraction Using Label Propagation rough Lists. In EMNLP '15. 524­529.",0,,False
422,"[4] Alexey Borisov, Ilya Markov, Maarten de Rijke, and Pavel Serdyukov. 2016. A Neural Click Model for Web Search. In WWW '16. 531­541.",0,,False
423,"[5] Jane Bromley, Isabelle Guyon, Yann LeCun, Eduard Sa¨ckinger, and Roopak Shah. 1993. Signature Veri cation Using a ""Siamese"" Time Delay Neural Network. In NIPS '93. 737­744.",0,,False
424,[6] Daniel Cohen and W. Bruce Cro . 2016. End to End Long Short Term Memory Networks for Non-Factoid estion Answering. In ICTIR '16. 143­146.,0,,False
425,"[7] Gordon V. Cormack, Mark D. Smucker, and Charles L. Clarke. 2011. E cient and E ective Spam Filtering and Re-ranking for Large Web Datasets. Inf. Retr. 14, 5 (2011), 441­465.",0,,False
426,"[8] omas Desautels, Andreas Krause, and Joel W Burdick. 2014. Parallelizing exploration-exploitation tradeo s in Gaussian process bandit optimization. Journal of Machine Learning Research 15, 1 (2014), 3873­3923.",1,ad,True
427,"[9] Fernando Diaz. 2016. Learning to Rank with Labeled Features. In ICTIR '16. 41­44. [10] Fernando Diaz, Bhaskar Mitra, and Nick Craswell. 2016. ery Expansion with",0,,False
428,"Locally-Trained Word Embeddings. In ACL '16. [11] Dumitru Erhan, Yoshua Bengio, Aaron Courville, Pierre-Antoine Manzagol,",0,,False
429,"Pascal Vincent, and Samy Bengio. 2010. Why does unsupervised pre-training help deep learning? Journal of Machine Learning Research 11 (2010), 625­660. [12] Mart´in Abadi et al. 2015. TensorFlow: Large-Scale Machine Learning on Heterogeneous Systems. (2015). h p://tensor ow.org/ So ware available from tensor ow.org. [13] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, and Yoshua Bengio. 2014. Generative adversarial nets. In NIPS. 2672­2680. [14] Jiafeng Guo, Yixing Fan, Qingyao Ai, and W. Bruce Cro . 2016. A Deep Relevance Matching Model for Ad-hoc Retrieval. In CIKM '16. 55­64. [15] Xianpei Han and Le Sun. 2016. Global Distant Supervision for Relation Extraction. In AAAI'16. 2950­2956.",1,ad,True
430,"[16] Ralf Herbrich, ore Graepel, and Klaus Obermayer. 1999. Support Vector Learning for Ordinal Regression. In ICANN '99. 97­102.",0,,False
431,"[17] Raphael Ho mann, Congle Zhang, Xiao Ling, Luke Ze lemoyer, and Daniel S. Weld. 2011. Knowledge-based Weak Supervision for Information Extraction of Overlapping Relations. In ACL '11. 541­550.",0,,False
432,"[18] Po-Sen Huang, Xiaodong He, Jianfeng Gao, Li Deng, Alex Acero, and Larry Heck. 2013. Learning Deep Structured Semantic Models for Web Search Using Clickthrough Data. In CIKM '13. 2333­2338.",0,,False
433,"[19] Kalervo Ja¨rvelin and Jaana Keka¨la¨inen. 2002. Cumulated Gain-based Evaluation of IR Techniques. ACM Trans. Inf. Syst. 20, 4 (Oct. 2002), 422­446.",0,,False
434,[20] orsten Joachims. 2002. Optimizing Search Engines Using Clickthrough Data. In KDD '02. 133­142.,0,,False
435,[21] Diederik Kingma and Jimmy Ba. 2014. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980 (2014).,0,,False
436,"[22] Ryan Kiros, Yukun Zhu, Ruslan R Salakhutdinov, Richard Zemel, Raquel Urtasun, Antonio Torralba, and Sanja Fidler. 2015. Skip-thought vectors. In NIPS '15. 3294­3302.",0,,False
437,"[23] oc V Le and Tomas Mikolov. 2014. Distributed Representations of Sentences and Documents. In ICML '14, Vol. 14. 1188­1196.",0,,False
438,"[24] Yann LeCun, Yoshua Bengio, and Geo rey Hinton. 2015. Deep Learning. Nature 521, 7553 (2015), 436­444.",0,,False
439,"[25] Xiaodong Liu, Jianfeng Gao, Xiaodong He, Li Deng, Kevin Duh, and Ye-yi Wang. 2015. Representation Learning Using Multi-Task Deep Neural Networks for Semantic Classi cation and Information Retrieval. In NAACL '15. 912­921.",0,,False
440,[26] Zhengdong Lu and Hang Li. 2013. A Deep Architecture for Matching Short Texts. In NIPS '13. 1367­1375.,0,,False
441,"[27] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Je Dean. 2013. Distributed Representations of Words and Phrases and their Compositionality. In NIPS '13. 3111­3119.",1,ad,True
442,"[28] Bhaskar Mitra, Fernando Diaz, and Nick Craswell. 2017. Learning to Match Using Local and Distributed Representations of Text for Web Search. In WWW '17. 1291­1299.",0,,False
443,"[29] Kezban Dilek Onal, Ismail Sengor Altingovde, Pinar Karagoz, and Maarten de Rijke. 2016. Ge ing Started with Neural Models for Semantic Matching in Web Search. arXiv preprint arXiv:1611.03305 (2016).",0,,False
444,"[30] Greg Pass, Abdur Chowdhury, and Cayley Torgeson. 2006. A Picture of Search. In InfoScale '06.",0,,False
445,"[31] Je rey Pennington, Richard Socher, and Christopher Manning. 2014. GloVe: Global Vectors for Word Representation. In EMNLP '14. 1532­1543.",0,,False
446,"[32] Navid Rekabsaz, Mihai Lupu, Allan Hanbury, and Hamed Zamani. 2017. Word Embedding Causes Topic Shi ing; Exploit Global Context!. In SIGIR'17.",0,,False
447,"[33] Navid Rekabsaz, Mihai Lupu, Allan Hanbury, and Guido Zuccon. 2016. Generalizing translation models in the probabilistic relevance framework. In Proceedings",0,,False
448,"of the 25th ACM International on Conference on Information and Knowledge Management. ACM, 711­720. [34] Aliaksei Severyn and Alessandro Moschi i. 2015. Twi er Sentiment Analysis with Deep Convolutional Neural Networks. In SIGIR '15. 959­962. [35] Yelong Shen, Xiaodong He, Jianfeng Gao, Li Deng, and Gre´goire Mesnil. 2014. Learning Semantic Representations Using Convolutional Neural Networks for Web Search. In WWW '14. 373­374. [36] Nitish Srivastava, Geo rey Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov. 2014. Dropout: A Simple Way to Prevent Neural Networks from Over ing. J. Mach. Learn. Res. 15, 1 (2014), 1929­1958. [37] Yuan Tang. 2016. TF.Learn: TensorFlow's High-level Module for Distributed Machine Learning. arXiv preprint arXiv:1612.04251 (2016). [38] Christophe Van Gysel, Maarten de Rijke, and Evangelos Kanoulas. 2016. Learning latent vector spaces for product search. In CIKM'16. 165­174. [39] Christophe Van Gysel, Maarten de Rijke, and Marcel Worring. 2016. Unsupervised, e cient and semantic expertise retrieval. In WWW'16. 1069­1079. [40] Fabian L. Wauthier, Michael I. Jordan, and Nebojsa Jojic. 2013. E cient Ranking from Pairwise Comparisons. In ICML'13. 109­117. [41] Liu Yang, Qingyao Ai, Jiafeng Guo, and W. Bruce Cro . 2016. aNMM: Ranking Short Answer Texts with A ention-Based Neural Matching Model. In CIKM '16. 287­296. [42] Hamed Zamani, Michael Bendersky, Xuanhui Wang, and Mingyang Zhang. 2017. Situational Context for Ranking in Personal Search. In WWW '17. 1531­1540. [43] Hamed Zamani and W. Bruce Cro . 2016. Embedding-based ery Language Models. In ICTIR '16. 147­156. [44] Hamed Zamani and W. Bruce Cro . 2016. Estimating Embedding Vectors for",0,,False
449,eries. In ICTIR '16. 123­132. [45] Hamed Zamani and W. Bruce Cro . 2017. Relevance-based Word Embedding.,0,,False
450,"In SIGIR '17. [46] Ye Zhang, Md Musta zur Rahman, Alex Braylan, Brandon Dang, Heng-Lu Chang,",0,,False
451,"Henna Kim, inten McNamara, Aaron Angert, Edward Banner, Vivek Khetan, and others. 2016. Neural Information Retrieval: A Literature Review. arXiv preprint arXiv:1611.06792 (2016). [47] Guoqing Zheng and Jamie Callan. 2015. Learning to Reweight Terms with Distributed Representations. In SIGIR '15. 575­584.",0,,False
452,74,0,,False
453,,0,,False
