,sentence,label,data,regex
0,Short Research Papers I,0,,False
1,"SIGIR'18, July 8-12, 2018, Ann Arbor, MI, USA",0,,False
2,Index Compression for BitFunnel Query Processing,1,Query,True
3,"Xinyu Liu, Zhaohua Zhang, Boran Hou, Rebecca J. Stones, Gang Wang, Xiaoguang Liu",0,,False
4,"College of Computer and Control Engineering, Nankai University, China {liuxy,zhangzhaohua,houbr,becky,wgzwp,liuxg}@nbjl.nankai.edu.cn",0,,False
5,ABSTRACT,0,,False
6,"Large-scale search engines utilize inverted indexes which store ordered lists of document identifies (docIDs) relevant to query terms, which can be queried thousands of times per second. In order to reduce storage requirements, we propose a dictionarybased compression approach for the recently proposed bitwise data-structure BitFunnel, which makes use of a Bloom filter. Compression is achieved through storing frequently occurring blocks in a dictionary. Infrequently occurring blocks (those which are not represented in the dictionary) are instead referenced using similar blocks that are in the dictionary, introducing additional false positive errors. We further introduce a docID reordering strategy to improve compression.",1,ad,True
7,"Experimental results indicate an improvement in compression by 27% to 30%, at the expense of increasing the query processing time by 16% to 48% and increasing the false positive rate by around 7.6 to 10.7 percentage points.",0,,False
8,"introduced BitFunnel, a bitmap-like data structure based on a Bloom filter [7].",0,,False
9,"The underlying data structure is split into shards according to document length, and each shard comprises of a collection of mapping matrices. Each term maps to a row or a few rows in the mapping matrices in each shard (as determined by Bloom filter multiplexing). Ordinarily, for each i  {0, 1, . . . , 6}, there is a mapping matrix of rank i. A column of the rank-i mapping matrix corresponds to a set of 2i documents, and the columns of the rank-0 mapping matrix corresponds to individual documents. This is illustrated in a toy example in Figure 1.",0,,False
10,query,0,,False
11,term 1 term 2,0,,False
12,0000100000101000010000010000010000000001010000010110110000000011001001110010 1000001011011000100010100101000010010100010000000100100000011010100000100000 0001000000011001100000100000001100000000000111000100010010000101001100110000,0,,False
13,. . . 00001000001100000100011101011001001000 10000000000001000000000001001000000101 10010000000100010010000001000000000010 . . .,0,,False
14,rank 0,0,,False
15,rank 1 rank 2,0,,False
16,CCS CONCEPTS,0,,False
17,· Information systems  Information retrieval query processing; Search engine indexing; Search index compression;,0,,False
18,KEYWORDS,0,,False
19,BitFunnel; Bloom filter; compression; query processing,0,,False
20,"ACM Reference Format: Xinyu Liu, Zhaohua Zhang, Boran Hou, Rebecca J. Stones, Gang Wang, Xiaoguang Liu. 2018. Index Compression for BitFunnel Query Processing. In SIGIR '18: The 41st International ACM SIGIR Conference on Research and Development in Information Retrieval, July 8­12, 2018, Ann Arbor, MI, USA. ACM, New York, NY, USA, 4 pages. https://doi.org/10.1145/3209978.3210086",1,Query,True
21,1 INTRODUCTION,1,DUC,True
22,"The main index structure in many current search engines[1] is the inverted index. However, motivated by the high efficiency of bitwise operations, predecessors [3, 5] combined bitmaps and inverted indexes to speed up query processing. Recently, Goodwin et al. [2]",0,,False
23,"Supported by NSF China grant 61602266, the Science and Technology Development Plan of Tianjin grants 17JCYBJC15300 and 16JCYBJC41900 and the Thousand Youth Talents Plan in Tianjin.",0,,False
24,Corresponding authors: Gang Wang and Xiaoguang Liu.,0,,False
25,"Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. SIGIR '18, July 8­12, 2018, Ann Arbor, MI, USA © 2018 Association for Computing Machinery. ACM ISBN 978-1-4503-5657-2/18/07. . . $15.00 https://doi.org/10.1145/3209978.3210086",1,ad,True
26,0001110000000000100 0001110110010001100 0001000101010010100,0,,False
27,. . .,0,,False
28,...,0,,False
29,"Figure 1: A toy figure of the mapping matrices in a shard, and which rows need to be intersected to process a 2-term query.",0,,False
30,"In each shard, we independently compute the query intersection results. Roughly speaking, we intersect the relevant rows of equal rank, and we concatenate each rank's result with itself (thereby doubling its length), which is intersected with the next-lower rank intersection results. We do this until we reach rank 0, which determines the final intersection results.",0,,False
31,"To reduce the impact of false positives, we ensure all the mapping matrices are sparse; this is achieved by varying the number of rows (which affects the size of the mapping matrices, and thus the overall storage requirements).",0,,False
32,"There is some work on speeding up bitwise operations for BitFunnel [6], however BitFunnel's collection of mapping matrices is costly in terms of space, and is typically larger than the corresponding inverted index. Motivated by these observations, we propose a method for compressing BitFunnel mapping matrices. More specifically:",0,,False
33,"(1) We propose a dictionary-based compression method for BitFunnel mapping matrices, whereby frequently occurring blocks are replaced by indices to their corresponding blocks in a dictionary.",0,,False
34,"(2) We also design a document reordering strategy to increase the redundancy in the bitmap structure, reduce the additional false positives to facilitate compression.",1,ad,True
35,921,0,,False
36,Short Research Papers I,0,,False
37,"SIGIR'18, July 8-12, 2018, Ann Arbor, MI, USA",0,,False
38,2 MAPPING MATRIX COMPRESSION,1,MAP,True
39,"We propose a dictionary-based compression method, where each mapping matrix of each shard is compressed independently (with each mapping matrix having its own dictionary). We use b-bit indices to represent k-bit blocks as dictionary references. We illustrate this method using a toy example in Figure 2. Specifically:",0,,False
40,· We add a reference for the k-bit all-1 block and 2b - 1 most frequently occurring k-bit blocks to the dictionary. We say a k-bit block is represented if it has a dictionary reference; otherwise we say it is unrepresented.,1,ad,True
41,"· In the mapping matrix, every k-bit block is replaced by a dictionary index, where:",0,,False
42,"(1) represented blocks are replaced by their corresponding dictionary index, while",0,,False
43,(2) unrepresented blocks b are replaced by a dictionary index which references a sparsest k-bit block b which has a 1 wherever b has a 1.,0,,False
44,"For example, in Figure 2, the highlighted dictionary reference is",0,,False
45,"10  1100,",0,,False
46,"and we have b , 2 and k ,"" 4. The 4-bit block 1100 is represented, so in the mapping matrix, we replace it by its dictionary index (namely 10). However, the block 0010 is not represented, and in the mapping matrix it is replaced by the dictionary index for 1010 (namely 11).""",0,,False
47,documents A B C D E F G H I J K L MN O P 1 1110001011101110 2 0000110011001010 3 0101001101000011 4 1100101000011010,0,,False
48,block,0,,False
49,"(a) An uncompressed rank-0 mapping matrix, partitioned into k -bit blocks.",0,,False
50,pattern ID,0,,False
51,00 01 10 11,0,,False
52,definition,0,,False
53,1111 1110 1100 1010,0,,False
54,AD EH I LMP,1,LM,True
55,1 01110101 2 10101011 3 00001000 4 10110011,0,,False
56,index,0,,False
57,(b) The dictionary (left) and the compressed mapping matrix (right) partitioned into b-bit indices.,0,,False
58,"Figure 2: A toy example of the proposed compression method where k-bit blocks are compressed into b-bit indices (where k , 4 and b , 2). Unrepresented k-bit blocks have blue-colored b-bit indices.",0,,False
59,"When performing query processing, we have an additional decompression step whenever a compressed block is encountered. Aside from this, intersection proceeds as in BitFunnel.",1,ad,True
60,"In order to reduce false positives, we ensure the matrices are sparse. In a sparse matrix, dense blocks occur less frequently, so we",0,,False
61,"expect a non-uniform distribution of k-bit blocks, and we expect this imbalance assists the proposed compression method.",0,,False
62,2.1 Selective compression,0,,False
63,"After compressing all the matrices, we find that the false positive rate can exceed 60% while the storage cost is only halved (when k , 32 and b ,"" 16). Therefore, we study selectively compressing rows of the mapping matrices, which is further motivated by Figure 3. To generate Figure 3, we only use rank-0 matrices (Pri in Section 4); we inspect shard 3, which has 4,477 rows and 7,373,033 documents; we experiment with the MillionSet query set (described in Section 4), which has 60,000 queries; and we reorder the rows in descending order of access frequency. We give two plots in Figure 3:""",0,,False
64,"(1) The blue plot is the row access frequency f (n), i.e., how frequently the n-th row is accessed with MillionSet.",0,,False
65,"(2) For n  {0, 200, . . . , 4200}, we compute the intersection results for the MillionSet query set when the 200 rows {n, n + 1, . . . , n + 199} are compressed. We define the false positive rate as the proportion of incorrectly included documents in the intersection results, which we plot as the red line in Figure 3.",0,,False
66,"A false 1 may result from either BitFunnel's Bloom filter method or from compression. The original BitFunnel mapping matrix has an overall false positive rate of 8.21% on shard 3, which is a lower bound on the false positive rate for the proposed compression method.",0,,False
67,row access frequency f (n) false positive rate,0,,False
68,104 103 102,0,,False
69,0,0,,False
70,16%,0,,False
71,"row access frequency f (n) false positive rate; rows n, . . . , n + 199 are compressed",0,,False
72,14%,0,,False
73,12%,0,,False
74,10%,0,,False
75,8%,0,,False
76,6%,0,,False
77,4%,0,,False
78,2%,0,,False
79,"400 800 1,200 1,600 2,000 2,400 2,800 3,200 3,600 4,000 0% n-th row",0,,False
80,Figure 3: Access frequency (left axis; logarithmic) and the proposed method's false positive error rate (right axis; linear) for each row in the rank-0 mapping matrix for shard 3. The horizontal dashed line marks the lower bound: 8.21% false positive rate.,0,,False
81,"The main observation we make from Figure 3 is that a small number of rows of the mapping matrix are both accessed frequently and result in a greater proportion of errors--a double impact on the final false positive rate. Thus, we are motivated to store these rows uncompressed, in order to reduce the final false positive rate.",0,,False
82,"For a parameter   [0, 1], we leave uncompressed the first q rows, where q is the minimum value for which the first q rows are accessed at least  N times in total, where N is the total number of row accesses. The decision process is described in Section 4.1.",0,,False
83,"To implement this method, we randomly split the query set into two equal parts, with the first part used for determining access",0,,False
84,922,0,,False
85,Short Research Papers I,0,,False
86,"SIGIR'18, July 8-12, 2018, Ann Arbor, MI, USA",0,,False
87,"frequencies (and the other part as a sample of test queries). Thus, the choice of query set affects which rows are compressed, and the overall compression ratio.",0,,False
88,3 DOCUMENT REORDERING,0,,False
89,"We also explore improving the compression through reordering the documents, i.e., permuting the document identifiers. Each shard is reordered independently, and reordering the documents in one shard will affect all the mapping matrices in that shard. So we only use this reordering method for Pri, aimed at decreasing unrepresented blocks in the rank-0 mapping matrix.",0,,False
90,We illustrate the process in a toy example in Figure 4. When we compare Figure 2 (before reordering) to Figure 4 (after reordering) we see that the number of unrepresented blocks in the mapping matrix drops from 7 to 1.,0,,False
91,documents O B N K J I H L ME C P G A D F 1 1111110010101100 2 1000110011000001 3 1100101000011010 4 1100000111001100,0,,False
92,(a) The original mapping matrix.,0,,False
93,pattern ID,0,,False
94,00 01 10 11,0,,False
95,definition,0,,False
96,1111 1100 1010 0001,0,,False
97,OK J LMPG F,1,LM,True
98,1 00011001 2 01010111 3 01101110 4 01110101,0,,False
99,(b) The dictionary (left) and the compressed mapping matrix (right).,0,,False
100,"Figure 4: By reordering the documents in the example in Figure 2, we reduce the number of unrepresented blocks.",0,,False
101,"Given an d-column mapping matrix (where k divides d), we initially reorder the d documents in decreasing order of density, which, for the example in Figure 4, is given by",0,,False
102,"O, J , M, G, B, I , E, A, N , H , C, D, K, L, P, F ,",0,,False
103,"which we color d/k documents at a time to illustrate the next step. We then interleave them into d/k groups of k documents: the mostdense d/k columns are moved to the 1st position in each group, the next-most-dense d/k columns are moved to the 2nd position in",0,,False
104,"each group, and so on. In the example in Figure 4, this gives",0,,False
105,1st group,0,,False
106,(d/k )th group,0,,False
107,"O, B, N , K, J , I , H , L, M, E, C, P, G, A, D, F .",0,,False
108,"Motivated by heuristic ideas, we reorder the documents in order to increase block repetition and thereby decrease the number of unrepresented k-bit blocks for reducing false positives. We also try some other reordering strategies, for example, all documents in one mapping matrix or k documents in each block are ordered by density in descending order. However their performances are not as good as the reordering method proposed in this section.",0,,False
109,4 EXPERIMENTAL RESULTS,0,,False
110,"We perform all experiments on the GOV2 collection, consisting of 25,205,183 documents. The content text for each document, including the body and title section in HTML are extracted.",0,,False
111,"All experiments are carried out on a PC server with two Intel Xeon E5-2650 v4 CPUs and 512GB of memory. The number of physical cores on each CPU is 12 (with 24 threads), and clocked at 2.20GHz. The L1 instruction cache and data cache is 32KB, L2 cache is 256KB, and L3 cache is 30,720KB. The operating system is Linux CentOS 6.5, with kernel version 2.6.32. All programs are implemented in C++11 and are compiled with g++ version 5.4.0, with optimization flag -04.",1,ad,True
112,"We use two query sets: (a) MillionSet, consisting of queries from the 2007, 2008, and 2009 TREC Million Query Track, containing 60 thousand queries in total; and (b) TerabyteSet, consisting of 100 thousand queries from the 2006 TREC Terabyte Track.",1,TREC,True
113,"Using BitFunnel's original code, we generate mapping matrices using 9 shards and density approximately 0.1. BitFunnel provides the mapping matrices with extra information, but we recover the original mapping matrices through the mapping information (which terms map to which rows). We consider two versions of BitFunnel: (a) Pri, where there is only one rank, namely rank 0, and (b) Opt, where there are 7 ranks.",0,,False
114,"Among the various k and b values we test, the best compression rate, false positive rate, and intersection time is observed when k , 32 and b ,"" 16, so we consistently use these values in the experiments.""",0,,False
115,4.1 Threshold selection,0,,False
116,"Different shards have various initial false-positive rates (high  suits those with high initial false-positive rates) and document content, and thus there are different distributions of 1's in the mapping matrices, so we determine  (which determines how many rows are compressed) by some simple experiments. By varying the threshold  we choose how to trade off compression for false positive errors. Figure 5 plots the false positive rate vs. the compression rate as  varies, for shards 0, 3, and 7 (representing the short, middlesized and long documents). The false positive rate is defined as the proportion of false positive documents in the intersection results caused by compression (using TerabyteSet). The compression rate is defined as sizecomp/sizeorig. For short documents (shard 0), we observe the lowest false positive rate and highest compression ratio.",1,ad,True
117,"As a result of this experiment, throughout the paper, we use the  values in Table 1 to ensure the false positive rate caused by compression is around 10%.",0,,False
118,Table 1: The threshold  we choose for the experiments. We also list the number of documents (×106).,0,,False
119,shard 012345678,0,,False
120,Pri 0 0.5 0.6 0.7 0.8 0.8 0.8 0.8 0.8 Opt 0 0 0.6 0.8 0.9 0.8 0.8 0.8 0.8,0,,False
121,no. docs 2.65 2.61 5.52 7.37 4.50 1.87 0.50 0.16 0.02,0,,False
122,923,0,,False
123,Short Research Papers I,0,,False
124,"SIGIR'18, July 8-12, 2018, Ann Arbor, MI, USA",0,,False
125,false positive rate,0,,False
126,30% Pri shard 0,0,,False
127,25%,0,,False
128,Pri shard 3,0,,False
129,Pri shard 7,0,,False
130,Opt shard 0,0,,False
131,20%,0,,False
132,Opt shard 3,0,,False
133,Opt shard 7 15%,0,,False
134,10%,0,,False
135,5%,0,,False
136,0% 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 compression rate,0,,False
137,"Figure 5: For BitFunnel Pri (red) and Opt (blue), the observed false positive rate and compression rate using the proposed dictionary-based compression method. From left to right, shard 0 has   {0, 0.1, 0.2, 0.3, 0.4}, and shards 3 and 7 have   {0.5, 0.6, 0.7, 0.8, 0.9}. The x-axis starts at 0.5.",0,,False
138,4.2 Compression,0,,False
139,"We first compare the false positive results before and after the reordering process; we use the selective compression method described in Section 2.1. For Pri, after reordering, the false positive rates of MillionSet and TerabyteSet are reduced up to 6.90 and 6.35 percentage points depending on the shard, respectively. Table 2 tabulates the total size of the mapping matrices we encounter. We observe around a 27% and 30% reduction in size for Pri and Opt, respectively.",1,Terabyte,True
140,"Table 2: The total size of the mapping matrices, over all shards and ranks.",0,,False
141,size (GB) bits per posting,0,,False
142,"Pri Pri (comp.), MillionSet Pri (comp.), TerabyteSet",1,Terabyte,True
143,14.22 10.45 10.20,0,,False
144,19.64 14.44 14.09,0,,False
145,"Opt Opt (comp.), MillionSet Opt (comp.), TerabyteSet",1,Terabyte,True
146,15.22 10.77 10.72,0,,False
147,21.01 14.87 14.80,0,,False
148,"We also try testing a traditional Bitmap compression method EWAH [4] (run-length), and the mathematical encoding methods Pfor [9] and Vbyte [8]. We see a decrease in size of 4.35% (EWAH), -1.0% (Pfor) and 11.3% (VByte), which is unsurprisingly poor. Due to the uneven distribution of 1's, the 32-bit subsequences in BitFunnel tend to be larger than differences in inverted indices, and all-0 and all-1 subsequences tend to be short, leading to poor compression with these methods.",1,ad,True
149,4.3 Intersection,0,,False
150,"To give a meaningful comparison, we rewrite the query part of the BitFunnel code, keeping its algorithmic structure, while using the same optimization level and compile options for different methods.1.",0,,False
151,1Source code available from https://github.com/BitFunnelComp/dicComp.,0,,False
152,"In Table 3, we compare the per-query intersection time with and without the proposed dictionary-based compression. We see that the intersection time increases by around 16% to 48% when using dictionary-based compression. While the time for intersection increases due to compression, a 5ms per-query intersection time accounts for a small proportion of the entire query time (including top-k ranking, snippet generation, etc.), which will not have an significant impact on the end user.",0,,False
153,"In Table 3, we also see that the false positive rate increases by around 7.6 to 10.7 percentage points. Random false positives that arise are likely poorly related to the input query, in which case they would be excluded during, say, the top-k ranking process. As such, we feel this increase in false positives is not as major of a consideration as intersection time.",0,,False
154,Table 3: Intersection time per query and the false positive rate.,0,,False
155,MillionSet,0,,False
156,TerabyteSet,1,Terabyte,True
157,time (ms) false pos. rate time (ms) false pos. rate,0,,False
158,Pri,0,,False
159,5.34,0,,False
160,11.33%,0,,False
161,6.18,0,,False
162,7.56%,0,,False
163,Pri (comp.) 6.44,0,,False
164,19.09%,0,,False
165,7.15,0,,False
166,15.13%,0,,False
167,Opt,0,,False
168,3.41,0,,False
169,6.79%,0,,False
170,3.98,0,,False
171,4.41%,0,,False
172,Opt (comp.) 5.04,0,,False
173,17.53%,0,,False
174,5.47,0,,False
175,13.38%,0,,False
176,5 CONCLUSION,0,,False
177,"In this paper, we propose a dictionary-based method to compress BitFunnel's underlying index structure.",0,,False
178,"An avenue for future work is to adapt the compression method for use with a GPU-based or multi-threaded intersection method. When limited to a small memory size (e.g., the GPU memory), the proposed compression method would have a more beneficial trade-off. The proposed method could also be adapted to bitmap data structures, where each term corresponds to a unique row. Using bitmaps results in faster intersection, avoids the problem with false positives as a result of the Bloom filter, and may admit better compression, but the initial bitmap is much larger.",1,ad,True
179,REFERENCES,0,,False
180,"[1] Sergey Brin and Lawrence Page. 1998. The Anatomy of a Large-Scale Hypertextual Web Search Engine. Comput. Netw. 30, 1-7 (1998), 107­117.",0,,False
181,"[2] Bob Goodwin, Michael Hopcroft, Dan Luu, et al. 2017. BitFunnel: Revisiting Signatures for Search. In Proc. SIGIR. 605­614.",0,,False
182,[3] Andrew Kane and Frank Wm. Tompa. 2014. Skewed Partial Bitvectors for List Intersection. In Proc. SIGIR. 263­272.,0,,False
183,"[4] Daniel Lemire, Owen Kaser, and Kamel Aouiche. 2010. Sorting improves wordaligned bitmap indexes. Data Knowl. Eng. 69, 1 (2010), 3­28.",0,,False
184,[5] Giuseppe Ottaviano and Rossano Venturini. 2014. Partitioned Elias-Fano indexes. In Proc. SIGIR. 273­282.,0,,False
185,"[6] Vivek Seshadri, Donghyuk Lee, Thomas Mullins, et al. 2017. Ambit: In-memory Accelerator for Bulk Bitwise Operations using Commodity DRAM Technology. In Proc. MICRO. 273­287.",1,ad,True
186,"[7] Xiujun Wang, Yusheng Ji, Zhe Dang, Xiao Zheng, and Baohua Zhao. 2015. Improved Weighted Bloom Filter and Space Lower Bound Analysis of Algorithms for Approximated Membership Querying. In Proc. DASFAA. 346­362.",1,Query,True
187,"[8] Hugh E. Williams and Justin Zobel. 1999. Compressing Integers for Fast File Access. Comput. J. 42, 3 (1999), 193­201.",0,,False
188,"[9] Marcin Zukowski, Sándor Héman, Niels Nes, and Peter A. Boncz. 2006. SuperScalar RAM-CPU Cache Compression. In Proc. ICDE. 59.",0,,False
189,924,0,,False
190,,0,,False
