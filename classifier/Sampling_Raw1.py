# -*- coding: utf-8 -*-
"""Tomelinks_Classes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GTN2Q9XyFLIyex-nmuU7PB8k4tUmSW-q
"""
# -*- coding: utf-8 -*-
"""Imbalanced_Classes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GTN2Q9XyFLIyex-nmuU7PB8k4tUmSW-q
"""
import random
import sys
from pylab import *
import numpy as np # linear algebra
#np.set_printoptions(threshold=sys.maxsize)
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker
#import matplotlib.axis as axis
#from matplotlib.xaxis import set_major_formatter
from matplotlib.axes import Axes
import re
import csv
import time
from scipy import stats
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import RandomizedSearchCV
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score, f1_score
from sklearn.tree import DecisionTreeClassifier
from xgboost import XGBClassifier
from sklearn.svm import LinearSVC
from sklearn.metrics import recall_score
from sklearn.metrics import precision_score
from timeit import default_timer as timer

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.wrappers.scikit_learn import KerasClassifier

import os
# print(os.listdir("../input"))
plt.style.use('ggplot')

df = pd.DataFrame()

raw = open(r"C:\\Users\\z3696\\Documents\\Document-Classification\\classifier\\NIST_FULL\\2010-neg.txt", encoding="ISO-8859-1")
lines = raw.readlines()
raw.close()

# remove /n at the end of each line
for index, line in enumerate(lines):
    lines[index] = line.strip()
    print(lines[index])

neg_df = pd.DataFrame(columns=['sentence'])
i = 0
first_col = ""
for line in lines:
    first_col = re.sub(r' \(.*', "", line)
    neg_df.loc[i] = [first_col]
    i = i+1

neg_df.head()
neg_df['label'] = 0
print(neg_df.shape)

raw1 = open(r"C:\\Users\\z3696\\Documents\\Document-Classification\\classifier\\NIST_FULL\\2010-pos.txt", encoding="ISO-8859-1")
lines1 = raw1.readlines()
raw1.close()

# remove /n at the end of each line
for index, line in enumerate(lines1):
    lines1[index] = line.strip()
    print(lines1[index])

pos_df = pd.DataFrame(columns=['sentence'])
i = 0
first_col = ""
for line in lines1:
    first_col = re.sub(r' \(.*', "", line)
    pos_df.loc[i] = [first_col]
    i = i+1

pos_df.head()
pos_df['label'] = 1

df = df.append(pos_df)
df = df.append(neg_df)
print(df)
print(pos_df.shape)
print(neg_df.shape)

import pandas as pd
import numpy as np
import nltk
import re
import string
from sklearn.naive_bayes import MultinomialNB, BernoulliNB
import seaborn as sns
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.metrics import accuracy_score, confusion_matrix, precision_recall_fscore_support as score, f1_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, KFold, cross_val_score
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import GridSearchCV
from nltk.corpus import stopwords
from nltk.corpus import wordnet
from nltk.stem.wordnet import WordNetLemmatizer
import string
from nltk.corpus import stopwords
from nltk.corpus import wordnet
from nltk.stem.wordnet import WordNetLemmatizer
from nltk.tag import pos_tag
from nltk.tokenize import word_tokenize
nltk.download('wordnet')
nltk.download('stopwords')
stopwords.words('english')

#Removing punctuations from entire dataset
punc_set = string.punctuation
punc_set

#Function for removing punctions
def remove_punc(text):
    clean = "".join([x.lower() for x in text if x not in punc_set])
    return clean

#Applying the 'remove_punc' function to entire dataset
df['no_punc'] = df['sentence'].apply(lambda z:remove_punc(z))

#Function for Tokenizing entire data for representing every word as datapoint
def tokenize(text):
    tokens = re.split("\W+",text)
    return tokens

#Applying the 'tokenize' function to entire dataset
df['tokenized_Data'] = df['no_punc'].apply(lambda z:tokenize(z))

#Importing stopwords from NLTK Library to remove stopwords now that we have tokenized it
stopwords = nltk.corpus.stopwords.words('english')

#Function for removing stopwords from single row
def remove_stopwords(tokenized_words):
    Ligit_text=[word for word in tokenized_words if word not in stopwords]
    return Ligit_text

#Applying the function 'remove_stopwords' from the entire dataset
df["no_stop"] = df["tokenized_Data"].apply(lambda z:remove_stopwords(z))

#Importing 'WordNetLemmatizer' as lemmatizing function to find lemma's of words
wnl = nltk.wordnet.WordNetLemmatizer()

#Function for lemmatizing the tokenzied text
def lemmatizing(tokenized_text):
    lemma = [wnl.lemmatize(word) for word in tokenized_text]
    return lemma

#Applying the 'lemmatizing' function to entire dataset
df['lemmatized'] = df['no_stop'].apply(lambda z:lemmatizing(z))

# #Importing the 'SnowballStemmer' and declaring variable 'sno' to save the stemmer in.
# #This Stemmer gives slightly better results as compared to 'PorterStemmer'
# sno = nltk.SnowballStemmer('english')

# #Function for applying stemming to find stem roots of all words
# def stemming(tokenized_text):
#     text= [sno.stem(word) for word in tokenized_text]
#     return text

# #Applying the 'stemming' function to entire dataset
# data['ss_stemmed'] = data['lemmatized'].apply(lambda z:stemming(z))


# ps = nltk.PorterStemmer()

# def stemming(tokenized_text):
#     text= [ps.stem(word) for word in tokenized_text]
#     return text

# data['ps_stemmed'] = data['lemmatized'].apply(lambda z:stemming(z))

#This step is done here because, the 'lemmatized' column is a list of tokenized words and when we apply vectorization
#techniques such as count vectorizer or TFIDF, they require string input. Hence convert all tokenzied words to string
df['lemmatized'] = [" ".join(review) for review in df['lemmatized'].values]

df.head()

time.sleep(500)

pos_num = 29708

pos_95 = round(pos_num * 0.95)
pos_85 = round(pos_num * 0.85)
pos_75 = round(pos_num * 0.75)
pos_65 = round(pos_num * 0.65)
pos_55 = round(pos_num * 0.55)
pos_45 = round(pos_num * 0.45)
pos_35 = round(pos_num * 0.35)
pos_25 = round(pos_num * 0.25)
pos_15 = round(pos_num * 0.15)
pos_05 = round(pos_num * 0.05)

neg_num = 48521

neg_95 = round(neg_num * 0.95)
neg_85 = round(neg_num * 0.85)
neg_75 = round(neg_num * 0.75)
neg_65 = round(neg_num * 0.65)
neg_55 = round(neg_num * 0.55)
neg_45 = round(neg_num * 0.45)
neg_35 = round(neg_num * 0.35)
neg_25 = round(neg_num * 0.25)
neg_15 = round(neg_num * 0.15)
neg_05 = round(neg_num * 0.05)

# Splitting Datasets Manually
pos_pt1=df.iloc[0:pos_num-pos_95 :]
neg_pt1=df.iloc[neg_num:neg_num+neg_95, :]
pos_pt2=df.iloc[0:pos_num-pos_85, :]
neg_pt2=df.iloc[neg_num:neg_num+neg_85, :]
pos_pt3=df.iloc[0:pos_num-pos_75, :]
neg_pt3=df.iloc[neg_num:neg_num+neg_75, :]
pos_pt4=df.iloc[0:pos_num-pos_65, :]
neg_pt4=df.iloc[neg_num:neg_num+neg_65, :]
neg_pt5=df.iloc[0:pos_num-pos_55, :]
pos_pt5=df.iloc[neg_num:neg_num+neg_55, :]
pos_pt6=df.iloc[0:pos_num-pos_45, :]
neg_pt6=df.iloc[neg_num:neg_num+neg_45, :]
pos_pt7=df.iloc[0:pos_num-pos_35, :]
neg_pt7=df.iloc[neg_num:neg_num+neg_35, :]
pos_pt8=df.iloc[0:pos_num-pos_25, :]
neg_pt8=df.iloc[neg_num:neg_num+neg_25, :]
pos_pt9=df.iloc[0:pos_num-pos_15, :]
neg_pt9=df.iloc[neg_num:neg_num+neg_15, :]
neg_pt10=df.iloc[0:pos_num-pos_05, :]
pos_pt10=df.iloc[neg_num:neg_num+neg_05, :]
'''
# Splitting Datasets Manually
pos_pt1=df.iloc[0:pos_num-xy_num10, :]
neg_pt1=df.iloc[neg_num:neg_num+xy_num1, :]
pos_pt2=df.iloc[0:pos_num-xy_num9, :]
neg_pt2=df.iloc[neg_num:neg_num+xy_num2, :]
pos_pt3=df.iloc[0:pos_num-xy_num8, :]
neg_pt3=df.iloc[neg_num:neg_num+xy_num3, :]
pos_pt4=df.iloc[0:pos_num-xy_num7, :]
neg_pt4=df.iloc[neg_num:neg_num+xy_num4, :]
neg_pt5=df.iloc[0:pos_num-xy_num6, :]
pos_pt5=df.iloc[neg_num:neg_num+xy_num5, :]
pos_pt6=df.iloc[0:pos_num-xy_num5, :]
neg_pt6=df.iloc[neg_num:neg_num+xy_num6, :]
pos_pt7=df.iloc[0:pos_num-xy_num4, :]
neg_pt7=df.iloc[neg_num:neg_num+xy_num7, :]
pos_pt8=df.iloc[0:pos_num-xy_num3, :]
neg_pt8=df.iloc[neg_num:neg_num+xy_num8, :]
pos_pt9=df.iloc[0:pos_num-xy_num2, :]
neg_pt9=df.iloc[neg_num:neg_num+xy_num9, :]
neg_pt10=df.iloc[0:pos_num-xy_num1, :]
pos_pt10=df.iloc[neg_num:neg_num+xy_num10, :]
'''
df1 = pd.concat([pos_pt1, neg_pt1])
print("DF1:", round(df1.shape[0]))
df2 = pd.concat([pos_pt2, neg_pt2])
print("DF2:", round(df2.shape[0]))
df3 = pd.concat([pos_pt3, neg_pt3])
print("DF3:", round(df3.shape[0]))
df4 = pd.concat([pos_pt4, neg_pt4])
print("DF4:", round(df4.shape[0]))
df5 = pd.concat([pos_pt5, neg_pt5])
print("DF5:", round(df5.shape[0]))
df6 = pd.concat([pos_pt6, neg_pt6])
print("DF6:", round(df6.shape[0]))
df7 = pd.concat([pos_pt7, neg_pt7])
print("DF7:", round(df7.shape[0]))
df8 = pd.concat([pos_pt8, neg_pt8])
print("DF8:", round(df8.shape[0]))
df9 = pd.concat([pos_pt9, neg_pt9])
print("DF9:", round(df9.shape[0]))
df10 = pd.concat([pos_pt10, neg_pt10])
print("DF10:", round(df10.shape[0]))
#Splitting data into smaller dataframes for the purpose of Training and Testing

df1_l = "Split 1"
df2_l = "Split 2"
df3_l = "Split 3"
df4_l = "Split 4"
df5_l = "Split 5"
df6_1 = "Split 6"
df7_l = "Split 7"
df8_l = "Split 8"
df9_l = "Split 9"
df10_l = "Split 10"

ts01 = "TS 0.1"
ts02 = "TS 0.2"
ts03 = "TS 0.3"
ts04 = "TS 0.4"
ts05 = "TS 0.5"

df1_split = round(df1.shape[0] * .5)
print(df1_split)
df2_split = round(df2.shape[0] * .5)
print(df2_split)
df3_split = round(df3.shape[0] * .5)
print(df3_split)
df4_split = round(df4.shape[0] * .5)
print(df4_split)
df5_split = round(df5.shape[0] * .5)
print(df5_split)
df6_split = round(df6.shape[0] * .5)
print(df6_split)
df7_split = round(df7.shape[0] * .5)
print(df7_split)
df8_split = round(df8.shape[0] * .5)
print(df8_split)
df9_split = round(df9.shape[0] * .5)
print(df9_split)
df10_split = round(df10.shape[0] * .5)
print(df10_split)

'''
xy_ran1=random.randint(1, df.shape[0])
xy_ran2=random.randint(1, df.shape[0])
xy_ran3=random.randint(1, df.shape[0])
xy_ran4=random.randint(1, df.shape[0])
xy_ran5=random.randint(1, df.shape[0])
xy_ran6=random.randint(1, df.shape[0])
xy_ran7=random.randint(1, df.shape[0])
xy_ran8=random.randint(1, df.shape[0])
xy_ran9=random.randint(1, df.shape[0])
xy_ran10=random.randint(1, df.shape[0])
'''

df1_sen = round(df1.shape[0])
df2_sen = round(df2.shape[0])
df3_sen = round(df3.shape[0])
df4_sen = round(df4.shape[0])
df5_sen = round(df5.shape[0])
df6_sen = round(df6.shape[0])
df7_sen = round(df7.shape[0])
df8_sen = round(df8.shape[0])
df9_sen = round(df9.shape[0])
df10_sen = round(df10.shape[0])

x1 = df1.iloc[0:df1_split,5]
x2 = df1.iloc[df1_sen-df1_split:df1_sen,5]
x3 = df2.iloc[0:df2_split,5]
x4 = df2.iloc[df2_sen-df2_split:df2_sen,5]
x5 = df3.iloc[0:df3_split,5]
x6 = df3.iloc[df3_sen-df3_split:df3_sen,5]
x7 = df4.iloc[0:df4_split,5]
x8 = df4.iloc[df4_sen-df4_split:df4_sen,5]
x9 = df5.iloc[0:df5_split,5]
x10 = df5.iloc[df5_sen-df5_split:df5_sen,5]
x11 = df6.iloc[0:df6_split,5]
x12 = df6.iloc[df6_sen-df6_split:df6_sen,5]
x13 = df7.iloc[0:df7_split,5]
x14 = df7.iloc[df7_sen-df7_split:df7_sen,5]
x15 = df8.iloc[0:df8_split,5]
x16 = df8.iloc[df8_sen-df8_split:df8_sen,5]
x17 = df9.iloc[0:df9_split,5]
x18 = df9.iloc[df9_sen-df9_split:df9_sen,5]
x19 = df10.iloc[0:df10_split,5]
x20 = df10.iloc[df10_sen-df10_split:df10_sen,5]

y1 = df1.iloc[0:df1_split,1]
y2 = df1.iloc[df1_sen-df1_split:df1_sen,1]
y3 = df2.iloc[0:df2_split,1]
y4 = df2.iloc[df2_sen-df2_split:df2_sen,1]
y5 = df3.iloc[0:df3_split,1]
y6 = df3.iloc[df3_sen-df3_split:df3_sen,1]
y7 = df4.iloc[0:df4_split,1]
y8 = df4.iloc[df4_sen-df4_split:df4_sen,1]
y9 = df1.iloc[0:df1_split,1]
y10 = df1.iloc[df1_sen-df1_split:df1_sen,1]
y11 = df6.iloc[0:df6_split,1]
y12 = df6.iloc[df6_sen-df6_split:df6_sen,1]
y13 = df7.iloc[0:df7_split,1]
y14 = df7.iloc[df7_sen-df7_split:df7_sen,1]
y11 = df8.iloc[0:df8_split,1]
y16 = df8.iloc[df8_sen-df8_split:df8_sen,1]
y17 = df9.iloc[0:df9_split,1]
y18 = df9.iloc[df9_sen-df9_split:df9_sen,1]
y19 = df10.iloc[0:df10_split,1]
y20 = df10.iloc[df10_sen-df10_split:df10_sen,1]



#x_seg = df.iloc[0:5,5]
#y_seg = df.iloc[0:5,1]
print("X1:", x1.shape)
print("X2:", x2.shape)
print("X3:", x3.shape)
print("X4:", x4.shape)
print("X5:", x5.shape)
print("X6:", x6.shape)
print("X7:", x7.shape)
print("X8:", x8.shape)
print("X9:", x9.shape)
print("X10:", x10.shape)
print("Y1:", y1.shape)
print("Y2:", y2.shape)
print("Y3:", y3.shape)
print("Y4:", y4.shape)
print("Y5:", y5.shape)
print("Y6:", y6.shape)
print("Y7:", y7.shape)
print("Y8:", y8.shape)
print("Y9:", y9.shape)
print("Y10:", y10.shape)

'''
x = df['lemmatized'].values
y = df['label'].values
print(x.shape)
print(y.shape)
'''
'''
train_set = [x1,x3,x5,x7,x9]
test_set = [x2,x4,x6,x8,x10]

train_label = [y1,y3,y5,y7,y9]
test_set = [y2,y4,y6,y8,y10]
'''
#Declaring and applying TFIDF functions to train and test data

tfidf_vect = TfidfVectorizer(ngram_range=(1,2))
tfidf_train = tfidf_vect.fit_transform(x1.values)
tfidf_test=tfidf_vect.transform(x2.values)
print(tfidf_train.shape)
print(tfidf_test.shape)
#tfidf_train.toarray()

#from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
'''
# Values for testing set - PTest
Accuracy_LRN = []
Precision_LRN = []
Recall_LRN = []

Accuracy_DCT = []
Recall_DCT = []
Precision_DCT = []

Accuracy_NBB = []
Recall_NBB = []
Precision_NBB = []

Accuracy_XGB = []
Recall_XGB = []
Precision_XGB = []

# Values for testing set - Sampling
Accuracy_LRN_s = []
Precision_LRN_s = []
Recall_LRN_s = []

Accuracy_DCT_s = []
Recall_DCT_s = []
Precision_DCT_s = []

Accuracy_NBB_s = []
Recall_NBB_s = []
Precision_NBB_s = []

Accuracy_XGB_s = []
Recall_XGB_s = []
Precision_XGB_s = []
'''
'''
# Values for training set - PTest
Accuracy_LRN_tr = []
Precision_LRN_tr = []
Recall_LRN_tr = []

Accuracy_DCT_tr = []
Recall_DCT_tr = []
Precision_DCT_tr = []

Accuracy_NBB_tr = []
Recall_NBB_tr = []
precision_NBB_tr = []

Accuracy_RDD_tr = []
Recall_RDD_tr = []
precision_RDD_tr = []
'''
tfidf_vect = TfidfVectorizer()

#== DF1 ==
x_tfidf = tfidf_vect.fit_transform(df["lemmatized"])


df['label'].value_counts()

import seaborn as sns
g = sns.countplot(df['label'])
g.set_xticklabels(['Negative','Positive'])
plt.show()

# class count
label_count_neg, label_count_pos = df['label'].value_counts()

# Separate class
label_neg = df[df['label'] == 0]
label_pos = df[df['label'] == 1]# print the shape of the class
print('Label Negative:', label_neg.shape)
print('Label Positive:', label_pos.shape)

label_neg_under = label_neg.sample(label_count_pos)

test_under = pd.concat([label_neg_under, label_pos], axis=0)

print("total class of pos and neg :",test_under['label'].value_counts())# plot the count after under-sampling
test_under['label'].value_counts().plot(kind='bar', title='label (target)')

label_pos_over = label_pos.sample(label_count_neg, replace=True)

test_over = pd.concat([label_pos_over, label_neg], axis=0)

print("total class of pos and neg:",test_under['label'].value_counts())# plot the count after under-sampeling
test_over['label'].value_counts().plot(kind='bar', title='label (target)')

import imblearn

# import library
from collections import Counter
from imblearn.under_sampling import RandomUnderSampler
x = x_tfidf
y = df['label']
print(x.shape)
print(y.shape)


rus = RandomUnderSampler(random_state=42, replacement=True)# fit predictor and target variable
x_rus, y_rus = rus.fit_resample(x, y)

print('Original dataset shape:', Counter(y))
print('Resample dataset shape', Counter(y_rus))

# import library
from collections import Counter
from imblearn.over_sampling import RandomOverSampler
'''
x =x_tfidf
y = df1["label"]
'''
ros = RandomUnderSampler(random_state=42)
#ros = RandomOverSampler(random_state=42)
#Random over-sampling with imblearn
# fit predictor and target variable
x_rus, y_rus = rus.fit_resample(x, y)

print('Original dataset shape', Counter(y))
print('Resample dataset shape', Counter(y_rus))
#Random over-sampling with imblearn
ros = RandomOverSampler(random_state=42)

# fit predictor and target variable
x_ros, y_ros = ros.fit_resample(x, y)

print('Original dataset shape', Counter(y))
print('Resample dataset shape', Counter(y_ros))
# import library

# Under-sampling: Tomek links
from imblearn.under_sampling import TomekLinks
from collections import Counter


tl = RandomOverSampler(sampling_strategy='majority')

# fit predictor and target variable
x_tl, y_tl = ros.fit_resample(x, y)

print('Original dataset shape', Counter(y))
print('Resample dataset shape', Counter(y_ros))

# import library
from imblearn.over_sampling import SMOTE

smote = SMOTE()

# fit predictor and target variable
x_smote, y_smote = smote.fit_resample(x, y)

print('Original dataset shape', Counter(y))
print('Resample dataset shape', Counter(y_ros))


from imblearn.under_sampling import NearMiss

nm = NearMiss()

x_nm, y_nm = nm.fit_resample(x, y)

print('Original dataset shape:', Counter(y))
print('Resample dataset shape:', Counter(y_nm))

probs_lr_scol = []
f1_lr_scol = []
rocauc_lr_scol = []
recall_lr_scol = []
precision_lr_scol = []
accuracy_lr_scol = []

probs_dt_scol = []
f1_dt_scol = []
rocauc_dt_scol = []
recall_dt_scol = []
precision_dt_scol = []
accuracy_dt_scol = []

probs_nb_scol = []
f1_nb_scol = []
rocauc_nb_scol = []
recall_nb_scol = []
precision_nb_scol = []
accuracy_nb_scol = []

probs_xg_scol = []
f1_xg_scol = []
rocauc_xg_scol = []
recall_xg_scol = []
precision_xg_scol = []
accuracy_xg_scol = []

probs_rf_scol = []
f1_rf_scol = []
rocauc_rf_scol = []
recall_rf_scol = []
precision_rf_scol = []
accuracy_rf_scol = []

# 1st Test Size - 5%

train_values= np.array([0.10, 0.20, 0.30, 0.40, 0.50])
# Other train values: , 0.60, 0.70, 0.80, 0.85, 0.90
# , 0.146, 0.219, 0.229, 0.300, 0.335, 0.380, 0.415, 0.465
test_sizes = np.array([0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95])
#train_sizes = round(train_list, 3)
for i in train_values:
    # train_sizes = train_sizes + i
    #random_portion = round(np.random.uniform(0.2, 0.5), 3)
    #print(random_portion)
    x_train, x_test, y_train, y_test = train_test_split(x_nm, y_nm, train_size=i, test_size=test_sizes[0])

    start1 = time.time()
    log = LogisticRegression(penalty='l2',random_state=0, solver='lbfgs', multi_class='auto', max_iter=500)
    model_lr = log.fit(x_train,y_train)
    probs_lr = model_lr.predict_proba(x_test)[:, 1]
    probs_lr_scol.append(probs_lr)
    ly_prediction = log.predict(x_test)
    fly = f1_score(ly_prediction,y_test)
    f1_lr_scol.append(fly)
    rocauc_lr = roc_auc_score(y_test, ly_prediction)
    rocauc_lr_scol.append(rocauc_lr)
    recalls_lr = recall_score(y_test, ly_prediction)
    recall_lr_scol.append(recalls_lr)
    precisions_lr = precision_score(y_test, ly_prediction)
    precision_lr_scol.append(precisions_lr)
    accuracys_lr = accuracy_score(y_test, ly_prediction)
    accuracy_lr_scol.append(accuracys_lr)
    print("===Logistic Regression with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[0], i)
    lr_end = time.time()
    print('Logistic F1-score',fly*100)
    print('Logistic ROCAUC score:',rocauc_lr*100)
    print('Logistic Recall score:', recalls_lr*100)
    print('Logistic Precision Score:', precisions_lr*100)
    print('Logistic Confusion Matrix', confusion_matrix(y_test,ly_prediction), "\n")
    print('Logistic Classification', classification_report(y_test,ly_prediction), "\n")
    print('Logistic Accuracy Score', accuracys_lr*100)
    print("Execution Time for Logistic Regression NearMiss: ", lr_end - start1, "seconds")

    start2 = time.time()
    from sklearn.tree import DecisionTreeClassifier
    DCT = DecisionTreeClassifier()
    model_dt = DCT.fit(x_train, y_train)
    probs_dt = model_dt.predict_proba(x_test)[:, 1]
    probs_dt_scol.append(probs_dt)
    dct_pred = DCT.predict(x_test)
    fdct = f1_score(dct_pred,y_test)
    f1_dt_scol.append(fdct)
    rocauc_dt = roc_auc_score(y_test, dct_pred)
    rocauc_dt_scol.append(rocauc_dt)
    recalls_dt = recall_score(y_test, dct_pred)
    recall_dt_scol.append(recalls_dt)
    precisions_dt = precision_score(y_test, dct_pred)
    precision_dt_scol.append(precisions_dt)
    accuracys_dt = accuracy_score(y_test, dct_pred)
    accuracy_dt_scol.append(accuracys_dt)
    print("===DecisionTreeClassifier with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[0], i)
    dt_end = time.time()
    print('DCT F1-score',fdct*100)
    print('DCT ROCAUC score:',rocauc_dt*100)
    print('DCT Recall score:', recalls_dt*100)
    print('DCT Precision Score:', precisions_dt*100)
    print('DCT Confusion Matrix', confusion_matrix(y_test, dct_pred), "\n")
    print('DCT Classification', classification_report(y_test, dct_pred), "\n")
    print('DCT Accuracy Score', accuracys_dt*100)
    print("Execution Time for Decision Tree NearMiss: ", dt_end - start2, "seconds")


    from sklearn.naive_bayes import MultinomialNB
    start3 = time.time()
    Naive = MultinomialNB()
    model_nb = Naive.fit(x_train,y_train)
    probs_nb = model_nb.predict_proba(x_test)[:, 1]
    probs_nb_scol.append(probs_nb)
    # predict the labels on validation dataset
    ny_pred = Naive.predict(x_test)
    fnb = f1_score(ny_pred,y_test)
    f1_nb_scol.append(fnb)
    rocauc_nb = roc_auc_score(y_test, ny_pred)
    rocauc_nb_scol.append(rocauc_nb)
    recalls_nb = recall_score(y_test, ny_pred)
    recall_nb_scol.append(recalls_nb)
    precisions_nb = precision_score(y_test, ny_pred)
    precision_nb_scol.append(precisions_nb)
    accuracys_nb = accuracy_score(y_test, ny_pred)
    accuracy_nb_scol.append(accuracys_nb)
    nb_end = time.time()
    # Use accuracy_score function to get the accuracy
    print("===Naive Bayes with TfidfVectorizer Imabalanced - 2010", df1_l, test_sizes[0], i)
    print('Naive F1-score',fnb*100)
    print('Naive ROCAUC score:',rocauc_nb*100)
    print('Naive Recall score:', recalls_nb*100)
    print('Naive Precision Score:', precisions_nb*100)
    print('Naive Confusion Matrix', confusion_matrix(y_test, ny_pred), "\n")
    print('Naive Classification', classification_report(y_test, ny_pred), "\n")
    print('Naive Accuracy Score', accuracys_nb*100)
    print("Execution Time for Naive Bayes NearMiss: ", nb_end - start3, "seconds")

# XGBoost Classifier

    start4 = time.time()
    from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
    xgb_model = XGBClassifier().fit(x_train, y_train)
    probs_xg = xgb_model.predict_proba(x_test)[:, 1]
    probs_xg_scol.append(probs_xg)
    # predict
    xgb_y_predict = xgb_model.predict(x_test)
    fxg = f1_score(xgb_y_predict,y_test)
    f1_xg_scol.append(fxg)
    rocauc_xg = roc_auc_score(xgb_y_predict, y_test)
    rocauc_xg_scol.append(rocauc_xg)
    recall_xg = recall_score(xgb_y_predict, y_test)
    recall_xg_scol.append(recall_xg)
    precisions_xg = precision_score(xgb_y_predict, y_test)
    precision_xg_scol.append(precisions_xg)
    accuracys_xg = accuracy_score(xgb_y_predict, y_test)
    accuracy_xg_scol.append(accuracys_xg)
    xg_end = time.time()
    print("===XGB with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[0], i)
    print('XGB F1-Score', fxg*100)
    print('XGB ROCAUC Score:', rocauc_xg*100)
    print('XGB Recall score:', recall_xg*100)
    print('XGB Precision Score:', precisions_xg *100)
    print('XGB Confusion Matrix', confusion_matrix(xgb_y_predict, y_test), "\n")
    print('XGB Classification', classification_report(xgb_y_predict, y_test), "\n")
    print('XGB Accuracy Score', accuracys_nb*100)
    print("Execution Time for XGBoost Classifier NearMiss: ", xg_end - start4, "seconds")

# Random Forest Classifier
    from sklearn.ensemble import RandomForestClassifier
    start5 = time.time()
    rfc_model = RandomForestClassifier(n_estimators=1000, random_state=0).fit(x_train,y_train)
    probs_rf = rfc_model.predict_proba(x_test)[:, 1]
    probs_rf_scol.append(probs_rf)
    rfc_pred = rfc_model.predict(x_test)
    frfc = f1_score(rfc_pred,y_test)
    f1_rf_scol.append(frfc)
    rocauc_rf = roc_auc_score(y_test, rfc_pred)
    rocauc_rf_scol.append(rocauc_rf)
    recalls_rf = recall_score(rfc_pred, y_test)
    recall_rf_scol.append(recalls_rf)
    precisions_rf = precision_score(rfc_pred, y_test)
    precision_rf_scol.append(precisions_rf)
    accuracys_rf = accuracy_score(rfc_pred, y_test)
    accuracy_rf_scol.append(accuracys_rf)
    rf_end = time.time()
    print("====RandomForest with Tfidf NearMiss 2010", df1_l, test_sizes[0], i)
    print('RFC F1 score', frfc*100)
    print('RFC ROCAUC Score:', rocauc_rf*100)
    print('RFC Recall score:', recalls_rf*100)
    print('RFC Precision Score:', precisions_rf*100)
    print('RFC Confusion Matrix', confusion_matrix(y_test,rfc_pred), "\n")
    print('RFC Classification', classification_report(y_test,rfc_pred), "\n")
    print('RFC Accuracy Score', accuracys_rf*100)
    print("Execution Time for Random Forest Classifier NearMiss: ", rf_end - start5, "seconds")

    print("Array of Prob Scores LR-Sam Test-Size", test_sizes[0],":", probs_lr_scol)
    print("Array of F1 Scores LR-Sam Test-Size:", test_sizes[0],":", f1_lr_scol)
    print("Array of ROCAUC Scores LR-Sam:", test_sizes[0],":", rocauc_lr_scol)
    print("Array of Recall Scores LR-Sam:", test_sizes[0],":", recall_lr_scol)
    print("Array of Precision Scores LR-Sam:", test_sizes[0],":", precision_lr_scol)
    print("Array of Accuracy Scores LR-Sam:", test_sizes[0],":", accuracy_lr_scol)

    print("Array of Prob Scores DT-Sam:", test_sizes[0],":", probs_dt_scol)
    print("Array of F1 Scores DT-Sam:", test_sizes[0],":", f1_dt_scol)
    print("Array of ROCAUC Scores DT-Sam:", test_sizes[0],":", rocauc_dt_scol)
    print("Array of Recall Scores DT-Sam:", test_sizes[0],":", recall_dt_scol)
    print("Array of Precision Scores DT-Sam:", test_sizes[0],":", precision_dt_scol)
    print("Array of Accuracy Scores DT-Sam:", test_sizes[0],":", accuracy_dt_scol)

    print("Array of Prob Scores NB-Sam:", test_sizes[0],":", probs_nb_scol)
    print("Array of F1 Scores NB-Sam:", test_sizes[0],":", f1_nb_scol)
    print("Array of ROCAUC Scores NB-Sam:", test_sizes[0],":", rocauc_nb_scol)
    print("Array of Recall Scores NB-Sam:", test_sizes[0],":", recall_nb_scol)
    print("Array of Precision Scores NB-Sam:", test_sizes[0],":", precision_nb_scol)
    print("Array of Accuracy Scores NB-Sam:", test_sizes[0],":", accuracy_nb_scol)

    print("Array of Prob Scores XG-Sam:", test_sizes[0],":", probs_xg_scol)
    print("Array of F1 Scores XG-Sam:",  test_sizes[0],":", f1_xg_scol)
    print("Array of ROCAUC Scores XG-Sam:",  test_sizes[0],":",  rocauc_xg_scol)
    print("Array of Recall Scores XG-Sam:",  test_sizes[0],":",  recall_xg_scol)
    print("Array of Precision Scores XG-Sam:",  test_sizes[0],":", precision_xg_scol)
    print("Array of Accuracy Scores XG-Sam:",  test_sizes[0],":", accuracy_xg_scol)

    print("Array of Prob Scores RF-Sam:",  test_sizes[0],":", probs_rf_scol)
    print("Array of F1 Scores RF-Sam:", test_sizes[0],":",  f1_rf_scol)
    print("Array of ROCAUC Scores RF-Sam:",  test_sizes[0],":", rocauc_rf_scol)
    print("Array of Recall Scores RF-Sam:", test_sizes[0],":",  recall_rf_scol)
    print("Array of Precision Scores RF-Sam:", test_sizes[0],":",  precision_rf_scol)
    print("Array of Accuracy Scores RF-Sam:", test_sizes[0],":",  accuracy_rf_scol)

'''
# Precision - 1st Test Size
#precision_sam1b = list([precision_rf_scol[0], precision_xg_scol[0], precision_dt_scol[0], precision_lr_scol[0], precision_nb_scol[0]])
precision_sam1 = list([test_sizes[0], precision_rf_scol[0], precision_xg_scol[0], precision_dt_scol[0], precision_lr_scol[0], precision_nb_scol[0]])
precision_sam2 = list([test_sizes[0], precision_rf_scol[1], precision_xg_scol[1], precision_dt_scol[1], precision_lr_scol[1], precision_nb_scol[1]])
precision_sam3 = list([test_sizes[0], precision_rf_scol[2], precision_xg_scol[2], precision_dt_scol[2], precision_lr_scol[2], precision_nb_scol[2]])
precision_sam4 = list([test_sizes[0], precision_rf_scol[3], precision_xg_scol[3], precision_dt_scol[3], precision_lr_scol[3], precision_nb_scol[3]])
precision_sam5 = list([test_sizes[0], precision_rf_scol[4], precision_xg_scol[4], precision_dt_scol[4], precision_lr_scol[4], precision_nb_scol[4]])

# Recall - 1st Test Size 
#recall_sam1b = list([recall_rf_scol[0], recall_xg_scol[0], recall_dt_scol[0], recall_lr_scol[0], recall_nb_scol[0]])
recall_sam1 = list([test_sizes[0], recall_rf_scol[0], recall_xg_scol[0], recall_dt_scol[0], recall_lr_scol[0], recall_nb_scol[0]])
recall_sam2 = list([test_sizes[0], recall_rf_scol[1], recall_xg_scol[1], recall_dt_scol[1], recall_lr_scol[1], recall_nb_scol[1]])
recall_sam3 = list([test_sizes[0], recall_rf_scol[2], recall_xg_scol[2], recall_dt_scol[2], recall_lr_scol[2], recall_nb_scol[2]])
recall_sam4 = list([test_sizes[0], recall_rf_scol[3], recall_xg_scol[3], recall_dt_scol[3], recall_lr_scol[3], recall_nb_scol[3]])
recall_sam5 = list([test_sizes[0], recall_rf_scol[4], recall_xg_scol[4], recall_dt_scol[4], recall_lr_scol[4], recall_nb_scol[4]])
'''

'''
precision_lr_scol_avg = (precision_lr_scol[0] + precision_lr_scol[1] + precision_lr_scol[2] + precision_lr_scol[3] + precision_lr_scol[4] + precision_lr_scol[5] + precision_lr_scol[6] + precision_lr_scol[7] + precision_lr_scol[8] + precision_lr_scol[9]) / 10
precision_dt_scol_avg = (precision_dt_scol[0] + precision_dt_scol[1] + precision_dt_scol[2] + precision_dt_scol[3] + precision_dt_scol[4] + precision_dt_scol[5] + precision_dt_scol[6] + precision_dt_scol[7] + precision_dt_scol[8] + precision_dt_scol[9]) / 10
precision_rf_scol_avg = (precision_rf_scol[0] + precision_rf_scol[1] + precision_rf_scol[2] + precision_rf_scol[3] + precision_rf_scol[4] + precision_rf_scol[5] + precision_rf_scol[6] + precision_rf_scol[7] + precision_rf_scol[8] + precision_rf_scol[9]) / 10
precision_nb_scol_avg = (precision_nb_scol[0] + precision_nb_scol[1] + precision_nb_scol[2] + precision_nb_scol[3] + precision_nb_scol[4] + precision_nb_scol[5] + precision_nb_scol[6] + precision_nb_scol[7] + precision_nb_scol[8] + precision_nb_scol[9]) / 10
precision_xg_scol_avg = (precision_xg_scol[0] + precision_xg_scol[1] + precision_xg_scol[2] + precision_xg_scol[3] + precision_xg_scol[4] + precision_xg_scol[5] + precision_xg_scol[6] + precision_xg_scol[7] + precision_xg_scol[8] + precision_xg_scol[9]) / 10
'''
precision_lr_scol_avg = (precision_lr_scol[0] + precision_lr_scol[1] + precision_lr_scol[2] + precision_lr_scol[3] + precision_lr_scol[4] ) / 5
precision_dt_scol_avg = (precision_dt_scol[0] + precision_dt_scol[1] + precision_dt_scol[2] + precision_dt_scol[3] + precision_dt_scol[4] ) / 5
precision_rf_scol_avg = (precision_rf_scol[0] + precision_rf_scol[1] + precision_rf_scol[2] + precision_rf_scol[3] + precision_rf_scol[4] ) / 5
precision_nb_scol_avg = (precision_nb_scol[0] + precision_nb_scol[1] + precision_nb_scol[2] + precision_nb_scol[3] + precision_nb_scol[4] ) / 5
precision_xg_scol_avg = (precision_xg_scol[0] + precision_xg_scol[1] + precision_xg_scol[2] + precision_xg_scol[3] + precision_xg_scol[4] ) / 5
'''
recall_lr_scol_avg = (recall_lr_scol[0] + recall_lr_scol[1] + recall_lr_scol[2] + recall_lr_scol[3] + recall_lr_scol[4] + recall_lr_scol[5] + recall_lr_scol[6] + recall_lr_scol[7] + recall_lr_scol[8] + recall_lr_scol[9]) / 10
recall_dt_scol_avg = (recall_dt_scol[0] + recall_dt_scol[1] + recall_dt_scol[2] + recall_dt_scol[3] + recall_dt_scol[4] + recall_dt_scol[5] + recall_dt_scol[6] + recall_dt_scol[7] + recall_dt_scol[8] + recall_dt_scol[9]) / 10
recall_rf_scol_avg = (recall_rf_scol[0] + recall_rf_scol[1] + recall_rf_scol[2] + recall_rf_scol[3] + recall_rf_scol[4] + recall_rf_scol[5] + recall_rf_scol[6] + recall_rf_scol[7] + recall_rf_scol[8] + recall_rf_scol[9]) / 10
recall_nb_scol_avg = (recall_nb_scol[0] + recall_nb_scol[1] + recall_nb_scol[2] + recall_nb_scol[3] + recall_nb_scol[4] + recall_nb_scol[5] + recall_nb_scol[6] + recall_nb_scol[7] + recall_nb_scol[8] + recall_nb_scol[9]) / 10
recall_xg_scol_avg = (recall_xg_scol[0] + recall_xg_scol[1] + recall_xg_scol[2] + recall_xg_scol[3] + recall_xg_scol[4] + recall_xg_scol[5] + recall_xg_scol[6] + recall_xg_scol[7] + recall_xg_scol[8] + recall_xg_scol[9]) / 10
'''

recall_lr_scol_avg = (recall_lr_scol[0] + recall_lr_scol[1] + recall_lr_scol[2] + recall_lr_scol[3] + recall_lr_scol[4] ) / 5
recall_dt_scol_avg = (recall_dt_scol[0] + recall_dt_scol[1] + recall_dt_scol[2] + recall_dt_scol[3] + recall_dt_scol[4] ) / 5
recall_rf_scol_avg = (recall_rf_scol[0] + recall_rf_scol[1] + recall_rf_scol[2] + recall_rf_scol[3] + recall_rf_scol[4] ) / 5
recall_nb_scol_avg = (recall_nb_scol[0] + recall_nb_scol[1] + recall_nb_scol[2] + recall_nb_scol[3] + recall_nb_scol[4] ) / 5
recall_xg_scol_avg = (recall_xg_scol[0] + recall_xg_scol[1] + recall_xg_scol[2] + recall_xg_scol[3] + recall_xg_scol[4] ) / 5

avg_precision_sam = list([test_sizes[0], precision_lr_scol_avg, precision_dt_scol_avg, precision_rf_scol_avg, precision_nb_scol_avg, precision_xg_scol_avg])
avg_recall_sam = list([test_sizes[0], recall_lr_scol_avg, recall_dt_scol_avg, recall_rf_scol_avg, recall_nb_scol_avg, recall_xg_scol_avg])

# 2nd Test Size - 15%

probs_lr_scol1 = []
f1_lr_scol1 = []
rocauc_lr_scol1 = []
recall_lr_scol1 = []
precision_lr_scol1 = []
accuracy_lr_scol1 = []

probs_dt_scol1 = []
f1_dt_scol1 = []
rocauc_dt_scol1 = []
recall_dt_scol1 = []
precision_dt_scol1 = []
accuracy_dt_scol1 = []

probs_nb_scol1 = []
f1_nb_scol1 = []
rocauc_nb_scol1 = []
recall_nb_scol1 = []
precision_nb_scol1 = []
accuracy_nb_scol1 = []

probs_xg_scol1 = []
f1_xg_scol1 = []
rocauc_xg_scol1 = []
recall_xg_scol1 = []
precision_xg_scol1 = []
accuracy_xg_scol1 = []

probs_rf_scol1 = []
f1_rf_scol1 = []
rocauc_rf_scol1 = []
recall_rf_scol1 = []
precision_rf_scol1 = []
accuracy_rf_scol1 = []

train_values1 = np.array([0.05, 0.10, 0.233, 0.455, 0.565])
# Other training values: , 0.612, 0.777, 0.800, 0.820, 0.830
# 0.180, 0.221, 0.261, 0.300, 0.320, 0.340, 0.360, 0.385
test_sizes = np.array([0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95])
#train_sizes = round(train_list, 3)
for i1 in train_values1:
    # train_sizes = train_sizes + i
    #random_portion = round(np.random.uniform(0.2, 0.5), 3)
    #print(random_portion)
    x_train, x_test, y_train, y_test = train_test_split(x_nm, y_nm, train_size=i1, test_size=test_sizes[1])

    start1 = time.time()
    log = LogisticRegression(penalty='l2',random_state=0, solver='lbfgs', multi_class='auto', max_iter=500)
    model_lr = log.fit(x_train,y_train)
    probs_lr = model_lr.predict_proba(x_test)[:, 1]
    probs_lr_scol1.append(probs_lr)
    ly_prediction = log.predict(x_test)
    fly = f1_score(ly_prediction,y_test)
    f1_lr_scol1.append(fly)
    rocauc_lr = roc_auc_score(y_test, ly_prediction)
    rocauc_lr_scol1.append(rocauc_lr)
    recalls_lr = recall_score(y_test, ly_prediction)
    recall_lr_scol1.append(recalls_lr)
    precisions_lr = precision_score(y_test, ly_prediction)
    precision_lr_scol1.append(precisions_lr)
    accuracys_lr = accuracy_score(y_test, ly_prediction)
    accuracy_lr_scol1.append(accuracys_lr)
    print("===Logistic Regression with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[1], i1)
    lr_end = time.time()
    print('Logistic F1-score',fly*100)
    print('Logistic ROCAUC score:',rocauc_lr*100)
    print('Logistic Recall score:', recalls_lr*100)
    print('Logistic Precision Score:', precisions_lr*100)
    print('Logistic Confusion Matrix', confusion_matrix(y_test,ly_prediction), "\n")
    print('Logistic Classification', classification_report(y_test,ly_prediction), "\n")
    print('Logistic Accuracy Score', accuracys_lr*100)
    print("Execution Time for Logistic Regression NearMiss: ", lr_end - start1, "seconds")

    start2 = time.time()
    from sklearn.tree import DecisionTreeClassifier
    DCT = DecisionTreeClassifier()
    model_dt = DCT.fit(x_train, y_train)
    probs_dt = model_dt.predict_proba(x_test)[:, 1]
    probs_dt_scol1.append(probs_dt)
    dct_pred = DCT.predict(x_test)
    fdct = f1_score(dct_pred,y_test)
    f1_dt_scol1.append(fdct)
    rocauc_dt = roc_auc_score(y_test, dct_pred)
    rocauc_dt_scol1.append(rocauc_dt)
    recalls_dt = recall_score(y_test, dct_pred)
    recall_dt_scol1.append(recalls_dt)
    precisions_dt = precision_score(y_test, dct_pred)
    precision_dt_scol1.append(precisions_dt)
    accuracys_dt = accuracy_score(y_test, dct_pred)
    accuracy_dt_scol1.append(accuracys_dt)
    print("===DecisionTreeClassifier with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[1], i1)
    dt_end = time.time()
    print('DCT F1-score',fdct*100)
    print('DCT ROCAUC score:',rocauc_dt*100)
    print('DCT Recall score:', recalls_dt*100)
    print('DCT Precision Score:', precisions_dt*100)
    print('DCT Confusion Matrix', confusion_matrix(y_test, dct_pred), "\n")
    print('DCT Classification', classification_report(y_test, dct_pred), "\n")
    print('DCT Accuracy Score', accuracys_dt*100)
    print("Execution Time for Decision Tree NearMiss: ", dt_end - start2, "seconds")


    from sklearn.naive_bayes import MultinomialNB
    start3 = time.time()
    Naive = MultinomialNB()
    model_nb = Naive.fit(x_train,y_train)
    probs_nb = model_nb.predict_proba(x_test)[:, 1]
    probs_nb_scol1.append(probs_nb)
    # predict the labels on validation dataset
    ny_pred = Naive.predict(x_test)
    fnb = f1_score(ny_pred,y_test)
    f1_nb_scol1.append(fnb)
    rocauc_nb = roc_auc_score(y_test, ny_pred)
    rocauc_nb_scol1.append(rocauc_nb)
    recalls_nb = recall_score(y_test, ny_pred)
    recall_nb_scol1.append(recalls_nb)
    precisions_nb = precision_score(y_test, ny_pred)
    precision_nb_scol1.append(precisions_nb)
    accuracys_nb = accuracy_score(y_test, ny_pred)
    accuracy_nb_scol1.append(accuracys_nb)
    nb_end = time.time()
    # Use accuracy_score function to get the accuracy
    print("===Naive Bayes with TfidfVectorizer Imabalanced - 2010", df1_l, test_sizes[1], i1)
    print('Naive F1-score',fnb*100)
    print('Naive ROCAUC score:',rocauc_nb*100)
    print('Naive Recall score:', recalls_nb*100)
    print('Naive Precision Score:', precisions_nb*100)
    print('Naive Confusion Matrix', confusion_matrix(y_test, ny_pred), "\n")
    print('Naive Classification', classification_report(y_test, ny_pred), "\n")
    print('Naive Accuracy Score', accuracys_nb*100)
    print("Execution Time for Naive Bayes NearMiss: ", nb_end - start3, "seconds")

# XGBoost Classifier

    start4 = time.time()
    from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
    xgb_model = XGBClassifier().fit(x_train, y_train)
    probs_xg = xgb_model.predict_proba(x_test)[:, 1]
    probs_xg_scol1.append(probs_xg)
    # predict
    xgb_y_predict = xgb_model.predict(x_test)
    fxg = f1_score(xgb_y_predict,y_test)
    f1_xg_scol1.append(fxg)
    rocauc_xg = roc_auc_score(xgb_y_predict, y_test)
    rocauc_xg_scol1.append(rocauc_xg)
    recall_xg = recall_score(xgb_y_predict, y_test)
    recall_xg_scol1.append(recall_xg)
    precisions_xg = precision_score(xgb_y_predict, y_test)
    precision_xg_scol1.append(precisions_xg)
    accuracys_xg = accuracy_score(xgb_y_predict, y_test)
    accuracy_xg_scol1.append(accuracys_xg)
    xg_end = time.time()
    print("===XGB with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[1], i1)
    print('XGB F1-Score', fxg*100)
    print('XGB ROCAUC Score:', rocauc_xg*100)
    print('XGB Recall score:', recall_xg*100)
    print('XGB Precision Score:', precisions_xg *100)
    print('XGB Confusion Matrix', confusion_matrix(xgb_y_predict, y_test), "\n")
    print('XGB Classification', classification_report(xgb_y_predict, y_test), "\n")
    print('XGB Accuracy Score', accuracys_nb*100)
    print("Execution Time for XGBoost Classifier NearMiss: ", xg_end - start4, "seconds")

# Random Forest Classifier
    from sklearn.ensemble import RandomForestClassifier
    start5 = time.time()
    rfc_model = RandomForestClassifier(n_estimators=1000, random_state=0).fit(x_train,y_train)
    probs_rf = rfc_model.predict_proba(x_test)[:, 1]
    probs_rf_scol1.append(probs_rf)
    rfc_pred = rfc_model.predict(x_test)
    frfc = f1_score(rfc_pred,y_test)
    f1_rf_scol1.append(frfc)
    rocauc_rf = roc_auc_score(y_test, rfc_pred)
    rocauc_rf_scol1.append(rocauc_rf)
    recalls_rf = recall_score(rfc_pred, y_test)
    recall_rf_scol1.append(recalls_rf)
    precisions_rf = precision_score(rfc_pred, y_test)
    precision_rf_scol1.append(precisions_rf)
    accuracys_rf = accuracy_score(rfc_pred, y_test)
    accuracy_rf_scol1.append(accuracys_rf)
    rf_end = time.time()
    print("====RandomForest with Tfidf NearMiss 2010", df1_l, test_sizes[1], i1)
    print('RFC F1 score', frfc*100)
    print('RFC ROCAUC Score:', rocauc_rf*100)
    print('RFC Recall score:', recalls_rf*100)
    print('RFC Precision Score:', precisions_rf*100)
    print('RFC Confusion Matrix', confusion_matrix(y_test,rfc_pred), "\n")
    print('RFC Classification', classification_report(y_test,rfc_pred), "\n")
    print('RFC Accuracy Score', accuracys_rf*100)
    print("Execution Time for Random Forest Classifier NearMiss: ", rf_end - start5, "seconds")

    print("Array of Prob Scores LR-Sam:",  test_sizes[1],":",  probs_lr_scol1)
    print("Array of F1 Scores LR-Sam:",  test_sizes[1],":",  f1_lr_scol1)
    print("Array of ROCAUC Scores LR-Sam:",  test_sizes[1],":",  rocauc_lr_scol1)
    print("Array of Recall Scores LR-Sam:",  test_sizes[1],":",  recall_lr_scol1)
    print("Array of Precision Scores LR-Sam:",  test_sizes[1],":", precision_lr_scol1)
    print("Array of Accuracy Scores LR-Sam:", test_sizes[1],":", accuracy_lr_scol1)

    print("Array of Prob Scores DT-Sam:", test_sizes[1],":", probs_dt_scol1)
    print("Array of F1 Scores DT-Sam:", test_sizes[1],":", f1_dt_scol1)
    print("Array of ROCAUC Scores DT-Sam:", test_sizes[1],":", rocauc_dt_scol1)
    print("Array of Recall Scores DT-Sam:",test_sizes[1],":", recall_dt_scol1)
    print("Array of Precision Scores DT-Sam:", test_sizes[1],":", precision_dt_scol1)
    print("Array of Accuracy Scores DT-Sam:", test_sizes[1],":", accuracy_dt_scol1)

    print("Array of Prob Scores NB-Sam:", test_sizes[1],":", probs_nb_scol1)
    print("Array of F1 Scores NB-Sam:", test_sizes[1],":", f1_nb_scol1)
    print("Array of ROCAUC Scores NB-Sam:", test_sizes[1],":", rocauc_nb_scol1)
    print("Array of Recall Scores NB-Sam:", test_sizes[1],":", recall_nb_scol1)
    print("Array of Precision Scores NB-Sam:", test_sizes[1],":", precision_nb_scol1)
    print("Array of Accuracy Scores NB-Sam:", test_sizes[1],":", accuracy_nb_scol1)

    print("Array of Prob Scores XG-Sam:", test_sizes[1],":", probs_xg_scol1)
    print("Array of F1 Scores XG-Sam:", test_sizes[1],":", f1_xg_scol1)
    print("Array of ROCAUC Scores XG-Sam:", test_sizes[1],":", rocauc_xg_scol1)
    print("Array of Recall Scores XG-Sam:", test_sizes[1],":", recall_xg_scol1)
    print("Array of Precision Scores XG-Sam:", test_sizes[1],":", precision_xg_scol1)
    print("Array of Accuracy Scores XG-Sam:", test_sizes[1],":", accuracy_xg_scol1)

    print("Array of Prob Scores RF-Sam:", test_sizes[1],":", probs_rf_scol1)
    print("Array of F1 Scores RF-Sam:", test_sizes[1],":", f1_rf_scol1)
    print("Array of ROCAUC Scores RF-Sam:", test_sizes[1],":", rocauc_rf_scol1)
    print("Array of Recall Scores RF-Sam:", test_sizes[1],":", recall_rf_scol1)
    print("Array of Precision Scores RF-Sam:", test_sizes[1],":", precision_rf_scol1)
    print("Array of Accuracy Scores RF-Sam:", test_sizes[1],":", accuracy_rf_scol1)

# Precision - 2nd test size
'''
# Precision - 1st Test Size
#precision_sam1b = list([precision_rf_scol[0], precision_xg_scol[0], precision_dt_scol[0], precision_lr_scol[0], precision_nb_scol[0]])
precision_sam1 = list([test_sizes[0], precision_rf_scol[0], precision_xg_scol[0], precision_dt_scol[0], precision_lr_scol[0], precision_nb_scol[0]])
precision_sam2 = list([test_sizes[0], precision_rf_scol[1], precision_xg_scol[1], precision_dt_scol[1], precision_lr_scol[1], precision_nb_scol[1]])
precision_sam3 = list([test_sizes[0], precision_rf_scol[2], precision_xg_scol[2], precision_dt_scol[2], precision_lr_scol[2], precision_nb_scol[2]])
precision_sam4 = list([test_sizes[0], precision_rf_scol[3], precision_xg_scol[3], precision_dt_scol[3], precision_lr_scol[3], precision_nb_scol[3]])
precision_sam5 = list([test_sizes[0], precision_rf_scol[4], precision_xg_scol[4], precision_dt_scol[4], precision_lr_scol[4], precision_nb_scol[4]])

# Recall - 1st Test Size 
#recall_sam1b = list([recall_rf_scol[0], recall_xg_scol[0], recall_dt_scol[0], recall_lr_scol[0], recall_nb_scol[0]])
recall_sam1 = list([test_sizes[0], recall_rf_scol[0], recall_xg_scol[0], recall_dt_scol[0], recall_lr_scol[0], recall_nb_scol[0]])
recall_sam2 = list([test_sizes[0], recall_rf_scol[1], recall_xg_scol[1], recall_dt_scol[1], recall_lr_scol[1], recall_nb_scol[1]])
recall_sam3 = list([test_sizes[0], recall_rf_scol[2], recall_xg_scol[2], recall_dt_scol[2], recall_lr_scol[2], recall_nb_scol[2]])
recall_sam4 = list([test_sizes[0], recall_rf_scol[3], recall_xg_scol[3], recall_dt_scol[3], recall_lr_scol[3], recall_nb_scol[3]])
recall_sam5 = list([test_sizes[0], recall_rf_scol[4], recall_xg_scol[4], recall_dt_scol[4], recall_lr_scol[4], recall_nb_scol[4]])
'''
'''
recall_sam16 = list([test_sizes[1], recall_lr_scol1[5], recall_dt_scol1[5], recall_rf_scol1[5], recall_nb_scol1[5], recall_xg_scol1[5]])
recall_sam17 = list([test_sizes[1], recall_lr_scol1[6], recall_dt_scol1[6], recall_rf_scol1[6], recall_nb_scol1[6], recall_xg_scol1[6]])
recall_sam18 = list([test_sizes[1], recall_lr_scol1[7], recall_dt_scol1[7], recall_rf_scol1[7], recall_nb_scol1[7], recall_xg_scol1[7]])
recall_sam19 = list([test_sizes[1], recall_lr_scol1[8], recall_dt_scol1[8], recall_rf_scol1[8], recall_nb_scol1[8], recall_xg_scol1[8]])
recall_sam30 = list([test_sizes[1], recall_lr_scol1[9], recall_dt_scol1[9], recall_rf_scol1[9], recall_nb_scol1[9], recall_xg_scol1[9]])
'''
precision_lr_scol1_avg = (precision_lr_scol1[0] + precision_lr_scol1[1] + precision_lr_scol1[2] + precision_lr_scol1[3] + precision_lr_scol1[4]) / 5
precision_dt_scol1_avg = (precision_dt_scol1[0] + precision_dt_scol1[1] + precision_dt_scol1[2] + precision_dt_scol1[3] + precision_dt_scol1[4]) / 5
precision_rf_scol1_avg = (precision_rf_scol1[0] + precision_rf_scol1[1] + precision_rf_scol1[2] + precision_rf_scol1[3] + precision_rf_scol1[4]) / 5
precision_nb_scol1_avg = (precision_nb_scol1[0] + precision_nb_scol1[1] + precision_nb_scol1[2] + precision_nb_scol1[3] + precision_nb_scol1[4]) / 5
precision_xg_scol1_avg = (precision_xg_scol1[0] + precision_xg_scol1[1] + precision_xg_scol1[2] + precision_xg_scol1[3] + precision_xg_scol1[4]) / 5

recall_lr_scol1_avg = (recall_lr_scol1[0] + recall_lr_scol1[1] + recall_lr_scol1[2] + recall_lr_scol1[3] + recall_lr_scol1[4]) / 5
recall_dt_scol1_avg = (recall_dt_scol1[0] + recall_dt_scol1[1] + recall_dt_scol1[2] + recall_dt_scol1[3] + recall_dt_scol1[4]) / 5
recall_rf_scol1_avg = (recall_rf_scol1[0] + recall_rf_scol1[1] + recall_rf_scol1[2] + recall_rf_scol1[3] + recall_rf_scol1[4]) / 5
recall_nb_scol1_avg = (recall_nb_scol1[0] + recall_nb_scol1[1] + recall_nb_scol1[2] + recall_nb_scol1[3] + recall_nb_scol1[4]) / 5
recall_xg_scol1_avg = (recall_xg_scol1[0] + recall_xg_scol1[1] + recall_xg_scol1[2] + recall_xg_scol1[3] + recall_xg_scol1[4]) / 5
'''
precision_lr_scol1_avg = (precision_lr_scol1[0] + precision_lr_scol1[1] + precision_lr_scol1[2] + precision_lr_scol1[3] + precision_lr_scol1[4] + precision_lr_scol1[5] + precision_lr_scol1[6] + precision_lr_scol1[7] + precision_lr_scol1[8] + precision_lr_scol1[9]) / 10
precision_dt_scol1_avg = (precision_dt_scol1[0] + precision_dt_scol1[1] + precision_dt_scol1[2] + precision_dt_scol1[3] + precision_dt_scol1[4] + precision_dt_scol1[5] + precision_dt_scol1[6] + precision_dt_scol1[7] + precision_dt_scol1[8] + precision_dt_scol1[9]) / 10
precision_rf_scol1_avg = (precision_rf_scol1[0] + precision_rf_scol1[1] + precision_rf_scol1[2] + precision_rf_scol1[3] + precision_rf_scol1[4] + precision_rf_scol1[5] + precision_rf_scol1[6] + precision_rf_scol1[7] + precision_rf_scol1[8] + precision_rf_scol1[9]) / 10
precision_nb_scol1_avg = (precision_nb_scol1[0] + precision_nb_scol1[1] + precision_nb_scol1[2] + precision_nb_scol1[3] + precision_nb_scol1[4] + precision_nb_scol1[5] + precision_nb_scol1[6] + precision_nb_scol1[7] + precision_nb_scol1[8] + precision_nb_scol1[9]) / 10
precision_xg_scol1_avg = (precision_xg_scol1[0] + precision_xg_scol1[1] + precision_xg_scol1[2] + precision_xg_scol1[3] + precision_xg_scol1[4] + precision_xg_scol1[5] + precision_xg_scol1[6] + precision_xg_scol1[7] + precision_xg_scol1[8] + precision_xg_scol1[9]) / 10


recall_lr_scol1_avg = (recall_lr_scol1[0] + recall_lr_scol1[1] + recall_lr_scol1[2] + recall_lr_scol1[3] + recall_lr_scol1[4] + recall_lr_scol1[5] + recall_lr_scol1[6] + recall_lr_scol1[7] + recall_lr_scol1[8] + recall_lr_scol1[9]) / 10
recall_dt_scol1_avg = (recall_dt_scol1[0] + recall_dt_scol1[1] + recall_dt_scol1[2] + recall_dt_scol1[3] + recall_dt_scol1[4] + recall_dt_scol1[5] + recall_dt_scol1[6] + recall_dt_scol1[7] + recall_dt_scol1[8] + recall_dt_scol1[9]) / 10
recall_rf_scol1_avg = (recall_rf_scol1[0] + recall_rf_scol1[1] + recall_rf_scol1[2] + recall_rf_scol1[3] + recall_rf_scol1[4] + recall_rf_scol1[5] + recall_rf_scol1[6] + recall_rf_scol1[7] + recall_rf_scol1[8] + recall_rf_scol1[9]) / 10
recall_nb_scol1_avg = (recall_nb_scol1[0] + recall_nb_scol1[1] + recall_nb_scol1[2] + recall_nb_scol1[3] + recall_nb_scol1[4] + recall_nb_scol1[5] + recall_nb_scol1[6] + recall_nb_scol1[7] + recall_nb_scol1[8] + recall_nb_scol1[9]) / 10
recall_xg_scol1_avg = (recall_xg_scol1[0] + recall_xg_scol1[1] + recall_xg_scol1[2] + recall_xg_scol1[3] + recall_xg_scol1[4] + recall_xg_scol1[5] + recall_xg_scol1[6] + recall_xg_scol1[7] + recall_xg_scol1[8] + recall_xg_scol1[9]) / 10
'''

avg_precision_sam1 = list([test_sizes[1], precision_lr_scol1_avg, precision_dt_scol1_avg, precision_rf_scol1_avg, precision_nb_scol1_avg, precision_xg_scol1_avg])
avg_recall_sam1 = list([test_sizes[1], recall_lr_scol1_avg, recall_dt_scol1_avg, recall_rf_scol1_avg, recall_nb_scol1_avg, recall_xg_scol1_avg])


# 3rd Test Size - 25%
x_tfidf = tfidf_vect.fit_transform(df["lemmatized"])

probs_lr_scol2 = []
f1_lr_scol2 = []
rocauc_lr_scol2 = []
recall_lr_scol2 = []
precision_lr_scol2 = []
accuracy_lr_scol2 = []

probs_dt_scol2 = []
f1_dt_scol2 = []
rocauc_dt_scol2 = []
recall_dt_scol2 = []
precision_dt_scol2 = []
accuracy_dt_scol2 = []

probs_nb_scol2 = []
f1_nb_scol2 = []
rocauc_nb_scol2 = []
recall_nb_scol2 = []
precision_nb_scol2 = []
accuracy_nb_scol2 = []

probs_xg_scol2 = []
f1_xg_scol2 = []
rocauc_xg_scol2 = []
recall_xg_scol2 = []
precision_xg_scol2 = []
accuracy_xg_scol2 = []

probs_rf_scol2 = []
f1_rf_scol2 = []
rocauc_rf_scol2 = []
recall_rf_scol2 = []
precision_rf_scol2 = []
accuracy_rf_scol2 = []

train_values2= np.array([0.078, 0.158, 0.249, 0.333, 0.442])
# Other training values: , 0.500, 0.589, 0.630, 0.703, 0.720
# 0.100, 0.125, 0.169, 0.195, 0.215, 0.797, 0.800, 0.900
test_sizes = np.array([0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95])
#train_sizes = round(train_list, 3)
for i2 in train_values2:
    # train_sizes = train_sizes + i
    #random_portion = round(np.random.uniform(0.2, 0.5), 3)
    #print(random_portion)
    x_train, x_test, y_train, y_test = train_test_split(x_nm, y_nm, train_size=i2, test_size=test_sizes[2])

    start1 = time.time()
    log = LogisticRegression(penalty='l2',random_state=0, solver='lbfgs', multi_class='auto', max_iter=500)
    model_lr = log.fit(x_train,y_train)
    probs_lr = model_lr.predict_proba(x_test)[:, 1]
    probs_lr_scol2.append(probs_lr)
    ly_prediction = log.predict(x_test)
    fly = f1_score(ly_prediction,y_test)
    f1_lr_scol2.append(fly)
    rocauc_lr = roc_auc_score(y_test, ly_prediction)
    rocauc_lr_scol2.append(rocauc_lr)
    recalls_lr = recall_score(y_test, ly_prediction)
    recall_lr_scol2.append(recalls_lr)
    precisions_lr = precision_score(y_test, ly_prediction)
    precision_lr_scol2.append(precisions_lr)
    accuracys_lr = accuracy_score(y_test, ly_prediction)
    accuracy_lr_scol2.append(accuracys_lr)
    print("===Logistic Regression with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[2], i2)
    lr_end = time.time()
    print('Logistic F1-score',fly*100)
    print('Logistic ROCAUC score:',rocauc_lr*100)
    print('Logistic Recall score:', recalls_lr*100)
    print('Logistic Precision Score:', precisions_lr*100)
    print('Logistic Confusion Matrix', confusion_matrix(y_test,ly_prediction), "\n")
    print('Logistic Classification', classification_report(y_test,ly_prediction), "\n")
    print('Logistic Accuracy Score', accuracys_lr*100)
    print("Execution Time for Logistic Regression NearMiss: ", lr_end - start1, "seconds")

    start2 = time.time()
    from sklearn.tree import DecisionTreeClassifier
    DCT = DecisionTreeClassifier()
    model_dt = DCT.fit(x_train, y_train)
    probs_dt = model_dt.predict_proba(x_test)[:, 1]
    probs_dt_scol2.append(probs_dt)
    dct_pred = DCT.predict(x_test)
    fdct = f1_score(dct_pred,y_test)
    f1_dt_scol2.append(fdct)
    rocauc_dt = roc_auc_score(y_test, dct_pred)
    rocauc_dt_scol2.append(rocauc_dt)
    recalls_dt = recall_score(y_test, dct_pred)
    recall_dt_scol2.append(recalls_dt)
    precisions_dt = precision_score(y_test, dct_pred)
    precision_dt_scol2.append(precisions_dt)
    accuracys_dt = accuracy_score(y_test, dct_pred)
    accuracy_dt_scol2.append(accuracys_dt)
    print("===DecisionTreeClassifier with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[2], i2)
    dt_end = time.time()
    print('DCT F1-score',fdct*100)
    print('DCT ROCAUC score:',rocauc_dt*100)
    print('DCT Recall score:', recalls_dt*100)
    print('DCT Precision Score:', precisions_dt*100)
    print('DCT Confusion Matrix', confusion_matrix(y_test, dct_pred), "\n")
    print('DCT Classification', classification_report(y_test, dct_pred), "\n")
    print('DCT Accuracy Score', accuracys_dt*100)
    print("Execution Time for Decision Tree NearMiss: ", dt_end - start2, "seconds")


    from sklearn.naive_bayes import MultinomialNB
    start3 = time.time()
    Naive = MultinomialNB()
    model_nb = Naive.fit(x_train,y_train)
    probs_nb = model_nb.predict_proba(x_test)[:, 1]
    probs_nb_scol2.append(probs_nb)
    # predict the labels on validation dataset
    ny_pred = Naive.predict(x_test)
    fnb = f1_score(ny_pred,y_test)
    f1_nb_scol2.append(fnb)
    rocauc_nb = roc_auc_score(y_test, ny_pred)
    rocauc_nb_scol2.append(rocauc_nb)
    recalls_nb = recall_score(y_test, ny_pred)
    recall_nb_scol2.append(recalls_nb)
    precisions_nb = precision_score(y_test, ny_pred)
    precision_nb_scol2.append(precisions_nb)
    accuracys_nb = accuracy_score(y_test, ny_pred)
    accuracy_nb_scol2.append(accuracys_nb)
    nb_end = time.time()
    # Use accuracy_score function to get the accuracy
    print("===Naive Bayes with TfidfVectorizer Imabalanced - 2010", df1_l, test_sizes[2], i2)
    print('Naive F1-score',fnb*100)
    print('Naive ROCAUC score:',rocauc_nb*100)
    print('Naive Recall score:', recalls_nb*100)
    print('Naive Precision Score:', precisions_nb*100)
    print('Naive Confusion Matrix', confusion_matrix(y_test, ny_pred), "\n")
    print('Naive Classification', classification_report(y_test, ny_pred), "\n")
    print('Naive Accuracy Score', accuracys_nb*100)
    print("Execution Time for Naive Bayes NearMiss: ", nb_end - start3, "seconds")

# XGBoost Classifier

    start4 = time.time()
    from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
    xgb_model = XGBClassifier().fit(x_train, y_train)
    probs_xg = xgb_model.predict_proba(x_test)[:, 1]
    probs_xg_scol2.append(probs_xg)
    # predict
    xgb_y_predict = xgb_model.predict(x_test)
    fxg = f1_score(xgb_y_predict,y_test)
    f1_xg_scol2.append(fxg)
    rocauc_xg = roc_auc_score(xgb_y_predict, y_test)
    rocauc_xg_scol2.append(rocauc_xg)
    recall_xg = recall_score(xgb_y_predict, y_test)
    recall_xg_scol2.append(recall_xg)
    precisions_xg = precision_score(xgb_y_predict, y_test)
    precision_xg_scol2.append(precisions_xg)
    accuracys_xg = accuracy_score(xgb_y_predict, y_test)
    accuracy_xg_scol2.append(accuracys_xg)
    xg_end = time.time()
    print("===XGB with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[2], i2)
    print('XGB F1-Score', fxg*100)
    print('XGB ROCAUC Score:', rocauc_xg*100)
    print('XGB Recall score:', recall_xg*100)
    print('XGB Precision Score:', precisions_xg *100)
    print('XGB Confusion Matrix', confusion_matrix(xgb_y_predict, y_test), "\n")
    print('XGB Classification', classification_report(xgb_y_predict, y_test), "\n")
    print('XGB Accuracy Score', accuracys_nb*100)
    print("Execution Time for XGBoost Classifier NearMiss: ", xg_end - start4, "seconds")

# Random Forest Classifier
    from sklearn.ensemble import RandomForestClassifier
    start5 = time.time()
    rfc_model = RandomForestClassifier(n_estimators=1000, random_state=0).fit(x_train,y_train)
    probs_rf = rfc_model.predict_proba(x_test)[:, 1]
    probs_rf_scol2.append(probs_rf)
    rfc_pred = rfc_model.predict(x_test)
    frfc = f1_score(rfc_pred,y_test)
    f1_rf_scol2.append(frfc)
    rocauc_rf = roc_auc_score(y_test, rfc_pred)
    rocauc_rf_scol2.append(rocauc_rf)
    recalls_rf = recall_score(rfc_pred, y_test)
    recall_rf_scol2.append(recalls_rf)
    precisions_rf = precision_score(rfc_pred, y_test)
    precision_rf_scol2.append(precisions_rf)
    accuracys_rf = accuracy_score(rfc_pred, y_test)
    accuracy_rf_scol2.append(accuracys_rf)
    rf_end = time.time()
    print("====RandomForest with Tfidf NearMiss 2010", df1_l, test_sizes[2], i2)
    print('RFC F1 score', frfc*100)
    print('RFC ROCAUC Score:', rocauc_rf*100)
    print('RFC Recall score:', recalls_rf*100)
    print('RFC Precision Score:', precisions_rf*100)
    print('RFC Confusion Matrix', confusion_matrix(y_test,rfc_pred), "\n")
    print('RFC Classification', classification_report(y_test,rfc_pred), "\n")
    print('RFC Accuracy Score', accuracys_rf*100)
    print("Execution Time for Random Forest Classifier NearMiss: ", rf_end - start5, "seconds")

    print("Array of Prob Scores LR-Sam:",  test_sizes[2],":",  probs_lr_scol2)
    print("Array of F1 Scores LR-Sam:",  test_sizes[2],":",  f1_lr_scol2)
    print("Array of ROCAUC Scores LR-Sam:",  test_sizes[2],":",  rocauc_lr_scol2)
    print("Array of Recall Scores LR-Sam:",  test_sizes[2],":",  recall_lr_scol2)
    print("Array of Precision Scores LR-Sam:",  test_sizes[2],":", precision_lr_scol2)
    print("Array of Accuracy Scores LR-Sam:", test_sizes[2],":", accuracy_lr_scol2)

    print("Array of Prob Scores DT-Sam:", test_sizes[2],":", probs_dt_scol2)
    print("Array of F1 Scores DT-Sam:", test_sizes[2],":", f1_dt_scol2)
    print("Array of ROCAUC Scores DT-Sam:", test_sizes[2],":", rocauc_dt_scol2)
    print("Array of Recall Scores DT-Sam:",test_sizes[2],":", recall_dt_scol2)
    print("Array of Precision Scores DT-Sam:", test_sizes[2],":", precision_dt_scol2)
    print("Array of Accuracy Scores DT-Sam:", test_sizes[2],":", accuracy_dt_scol2)

    print("Array of Prob Scores NB-Sam:", test_sizes[2],":", probs_nb_scol2)
    print("Array of F1 Scores NB-Sam:", test_sizes[2],":", f1_nb_scol2)
    print("Array of ROCAUC Scores NB-Sam:", test_sizes[2],":", rocauc_nb_scol2)
    print("Array of Recall Scores NB-Sam:", test_sizes[2],":", recall_nb_scol2)
    print("Array of Precision Scores NB-Sam:", test_sizes[2],":", precision_nb_scol2)
    print("Array of Accuracy Scores NB-Sam:", test_sizes[2],":", accuracy_nb_scol2)

    print("Array of Prob Scores XG-Sam:", test_sizes[2],":", probs_xg_scol2)
    print("Array of F1 Scores XG-Sam:", test_sizes[2],":", f1_xg_scol2)
    print("Array of ROCAUC Scores XG-Sam:", test_sizes[2],":", rocauc_xg_scol2)
    print("Array of Recall Scores XG-Sam:", test_sizes[2],":", recall_xg_scol2)
    print("Array of Precision Scores XG-Sam:", test_sizes[2],":", precision_xg_scol2)
    print("Array of Accuracy Scores XG-Sam:", test_sizes[2],":", accuracy_xg_scol2)

    print("Array of Prob Scores RF-Sam:", test_sizes[2],":", probs_rf_scol2)
    print("Array of F1 Scores RF-Sam:", test_sizes[2],":", f1_rf_scol2)
    print("Array of ROCAUC Scores RF-Sam:", test_sizes[2],":", rocauc_rf_scol2)
    print("Array of Recall Scores RF-Sam:", test_sizes[2],":", recall_rf_scol2)
    print("Array of Precision Scores RF-Sam:", test_sizes[2],":", precision_rf_scol2)
    print("Array of Accuracy Scores RF-Sam:", test_sizes[2],":", accuracy_rf_scol2)
'''
# Precision - 3rd Test Size
#precision_sam31b = list([precision_lr_scol2[0], precision_dt_scol2[0], precision_rf_scol2[0], precision_nb_scol2[0], precision_xg_scol2[0]])
precision_sam31 = list([test_sizes[2], precision_xg_scol2[0], precision_rf_scol2[0], precision_dt_scol2[0], precision_lr_scol2[0], precision_nb_scol2[0]])
#precision_sam31 = list([(test_sizes[2]-test_sizes[2]), (0.0+precision_rf_scol2[0]), (1.0+precision_xg_scol2[0]), (2.0+precision_dt_scol2[0]), (3.0+precision_lr_scol2[0]), (4.0+precision_nb_scol2[0])])
print("Iteration 1 Array:", precision_sam31)
precision_sam32 = list([test_sizes[2], precision_lr_scol2[1], precision_dt_scol2[1], precision_rf_scol2[1], precision_nb_scol2[1], precision_xg_scol2[1]])
#precision_sam32 = list([test_sizes[2], precision_xg_scol2[1], precision_rf_scol2[1], precision_dt_scol2[1],  precision_lr_scol2[1], precision_nb_scol2[1]])
#precision_sam32 = list([(test_sizes[2]-test_sizes[2]), (0.0+precision_rf_scol2[1]), (1.0+precision_xg_scol2[1]), (2.0+precision_dt_scol2[1]), (3.0+precision_lr_scol2[1]), (4.0+precision_nb_scol2[1])])
#print("Iteration 2 Array:", precision_sam32)
precision_sam33 = list([test_sizes[2], precision_lr_scol2[2], precision_dt_scol2[2], precision_rf_scol2[2], precision_nb_scol2[2], precision_xg_scol2[2]])
precision_sam34 = list([test_sizes[2], precision_lr_scol2[3], precision_dt_scol2[3], precision_rf_scol2[3], precision_nb_scol2[3], precision_xg_scol2[3]])
precision_sam35 = list([test_sizes[2], precision_lr_scol2[4], precision_dt_scol2[4], precision_rf_scol2[4], precision_nb_scol2[4], precision_xg_scol2[4]])

precision_sam36 = list([test_sizes[2], precision_lr_scol2[5], precision_dt_scol2[5], precision_rf_scol2[5], precision_nb_scol2[5], precision_xg_scol2[5]])
precision_sam37 = list([test_sizes[2], precision_lr_scol2[6], precision_dt_scol2[6], precision_rf_scol2[6], precision_nb_scol2[6], precision_xg_scol2[6]])
precision_sam38 = list([test_sizes[2], precision_lr_scol2[7], precision_dt_scol2[7], precision_rf_scol2[7], precision_nb_scol2[7], precision_xg_scol2[7]])
precision_sam39 = list([test_sizes[2], precision_lr_scol2[8], precision_dt_scol2[8], precision_rf_scol2[8], precision_nb_scol2[8], precision_xg_scol2[8]])
precision_sam30 = list([test_sizes[2], precision_lr_scol2[9], precision_dt_scol2[9], precision_rf_scol2[9], precision_nb_scol2[9], precision_xg_scol2[9]])


# Recall - 3nd Test Size
#recall_sam31b = list([recall_lr_scol2[0], recall_dt_scol2[0], recall_rf_scol2[0], recall_nb_scol2[0], recall_xg_scol2[0]])
recall_sam31 = list([test_sizes[2], recall_xg_scol2[0], recall_rf_scol2[0], recall_dt_scol2[0], recall_lr_scol2[0], recall_nb_scol2[0]])
#recall_sam31 = list([(test_sizes[2]-test_sizes[2]), (0.0+recall_rf_scol2[0]), (1.0+recall_xg_scol2[0]), (2.0+recall_dt_scol2[0]), (3.0+recall_lr_scol2[0]), (4.0+recall_nb_scol2[0])])
print("Iteration 1 Array:", recall_sam31)
recall_sam32 = list([test_sizes[2], recall_lr_scol2[1], recall_dt_scol2[1], recall_rf_scol2[1], recall_nb_scol2[1], recall_xg_scol2[1]])
#recall_sam32 = list([test_sizes[2], recall_xg_scol2[1], recall_rf_scol2[1], recall_dt_scol2[1],  recall_lr_scol2[1], recall_nb_scol2[1]])
#recall_sam32 = list([(test_sizes[2]-test_sizes[2]), (0.0+recall_rf_scol2[1]), (1.0+recall_xg_scol2[1]), (2.0+recall_dt_scol2[1]), (3.0+recall_lr_scol2[1]), (4.0+recall_nb_scol2[1])])
#print("Iteration 2 Array:", recall_sam32)
recall_sam33 = list([test_sizes[2], recall_lr_scol2[2], recall_dt_scol2[2], recall_rf_scol2[2], recall_nb_scol2[2], recall_xg_scol2[2]])
recall_sam34 = list([test_sizes[2], recall_lr_scol2[3], recall_dt_scol2[3], recall_rf_scol2[3], recall_nb_scol2[3], recall_xg_scol2[3]])
recall_sam35 = list([test_sizes[2], recall_lr_scol2[4], recall_dt_scol2[4], recall_rf_scol2[4], recall_nb_scol2[4], recall_xg_scol2[4]])

recall_sam36 = list([test_sizes[2], recall_lr_scol2[5], recall_dt_scol2[5], recall_rf_scol2[5], recall_nb_scol2[5], recall_xg_scol2[5]])
recall_sam37 = list([test_sizes[2], recall_lr_scol2[6], recall_dt_scol2[6], recall_rf_scol2[6], recall_nb_scol2[6], recall_xg_scol2[6]])
recall_sam38 = list([test_sizes[2], recall_lr_scol2[7], recall_dt_scol2[7], recall_rf_scol2[7], recall_nb_scol2[7], recall_xg_scol2[7]])
recall_sam39 = list([test_sizes[2], recall_lr_scol2[8], recall_dt_scol2[8], recall_rf_scol2[8], recall_nb_scol2[8], recall_xg_scol2[8]])
recall_sam30 = list([test_sizes[2], recall_lr_scol2[9], recall_dt_scol2[9], recall_rf_scol2[9], recall_nb_scol2[9], recall_xg_scol2[9]])

'''

precision_lr_scol2_avg = (precision_lr_scol2[0] + precision_lr_scol2[1] + precision_lr_scol2[2] + precision_lr_scol2[3] + precision_lr_scol2[4]) / 5
precision_dt_scol2_avg = (precision_dt_scol2[0] + precision_dt_scol2[1] + precision_dt_scol2[2] + precision_dt_scol2[3] + precision_dt_scol2[4]) / 5
precision_rf_scol2_avg = (precision_rf_scol2[0] + precision_rf_scol2[1] + precision_rf_scol2[2] + precision_rf_scol2[3] + precision_rf_scol2[4]) / 5
precision_nb_scol2_avg = (precision_nb_scol2[0] + precision_nb_scol2[1] + precision_nb_scol2[2] + precision_nb_scol2[3] + precision_nb_scol2[4]) / 5
precision_xg_scol2_avg = (precision_xg_scol2[0] + precision_xg_scol2[1] + precision_xg_scol2[2] + precision_xg_scol2[3] + precision_xg_scol2[4]) / 5


recall_lr_scol2_avg = (recall_lr_scol2[0] + recall_lr_scol2[1] + recall_lr_scol2[2] + recall_lr_scol2[3] + recall_lr_scol2[4]) / 5
recall_dt_scol2_avg = (recall_dt_scol2[0] + recall_dt_scol2[1] + recall_dt_scol2[2] + recall_dt_scol2[3] + recall_dt_scol2[4]) / 5
recall_rf_scol2_avg = (recall_rf_scol2[0] + recall_rf_scol2[1] + recall_rf_scol2[2] + recall_rf_scol2[3] + recall_rf_scol2[4]) / 5
recall_nb_scol2_avg = (recall_nb_scol2[0] + recall_nb_scol2[1] + recall_nb_scol2[2] + recall_nb_scol2[3] + recall_nb_scol2[4]) / 5
recall_xg_scol2_avg = (recall_xg_scol2[0] + recall_xg_scol2[1] + recall_xg_scol2[2] + recall_xg_scol2[3] + recall_xg_scol2[4]) / 5


'''
precision_lr_scol2_avg = (precision_lr_scol2[0] + precision_lr_scol2[1] + precision_lr_scol2[2] + precision_lr_scol2[3] + precision_lr_scol2[4] + precision_lr_scol2[5] + precision_lr_scol2[6] + precision_lr_scol2[7] + precision_lr_scol2[8] + precision_lr_scol2[9]) / 10
precision_dt_scol2_avg = (precision_dt_scol2[0] + precision_dt_scol2[1] + precision_dt_scol2[2] + precision_dt_scol2[3] + precision_dt_scol2[4] + precision_dt_scol2[5] + precision_dt_scol2[6] + precision_dt_scol2[7] + precision_dt_scol2[8] + precision_dt_scol2[9]) / 10
precision_rf_scol2_avg = (precision_rf_scol2[0] + precision_rf_scol2[1] + precision_rf_scol2[2] + precision_rf_scol2[3] + precision_rf_scol2[4] + precision_rf_scol2[5] + precision_rf_scol2[6] + precision_rf_scol2[7] + precision_rf_scol2[8] + precision_rf_scol2[9]) / 10
precision_nb_scol2_avg = (precision_nb_scol2[0] + precision_nb_scol2[1] + precision_nb_scol2[2] + precision_nb_scol2[3] + precision_nb_scol2[4] + precision_nb_scol2[5] + precision_nb_scol2[6] + precision_nb_scol2[7] + precision_nb_scol2[8] + precision_nb_scol2[9]) / 10
precision_xg_scol2_avg = (precision_xg_scol2[0] + precision_xg_scol2[1] + precision_xg_scol2[2] + precision_xg_scol2[3] + precision_xg_scol2[4] + precision_xg_scol2[5] + precision_xg_scol2[6] + precision_xg_scol2[7] + precision_xg_scol2[8] + precision_xg_scol2[9]) / 10


recall_lr_scol2_avg = (recall_lr_scol2[0] + recall_lr_scol2[1] + recall_lr_scol2[2] + recall_lr_scol2[3] + recall_lr_scol2[4] + recall_lr_scol2[5] + recall_lr_scol2[6] + recall_lr_scol2[7] + recall_lr_scol2[8] + recall_lr_scol2[9]) / 10
recall_dt_scol2_avg = (recall_dt_scol2[0] + recall_dt_scol2[1] + recall_dt_scol2[2] + recall_dt_scol2[3] + recall_dt_scol2[4] + recall_dt_scol2[5] + recall_dt_scol2[6] + recall_dt_scol2[7] + recall_dt_scol2[8] + recall_dt_scol2[9]) / 10
recall_rf_scol2_avg = (recall_rf_scol2[0] + recall_rf_scol2[1] + recall_rf_scol2[2] + recall_rf_scol2[3] + recall_rf_scol2[4] + recall_rf_scol2[5] + recall_rf_scol2[6] + recall_rf_scol2[7] + recall_rf_scol2[8] + recall_rf_scol2[9]) / 10
recall_nb_scol2_avg = (recall_nb_scol2[0] + recall_nb_scol2[1] + recall_nb_scol2[2] + recall_nb_scol2[3] + recall_nb_scol2[4] + recall_nb_scol2[5] + recall_nb_scol2[6] + recall_nb_scol2[7] + recall_nb_scol2[8] + recall_nb_scol2[9]) / 10
recall_xg_scol2_avg = (recall_xg_scol2[0] + recall_xg_scol2[1] + recall_xg_scol2[2] + recall_xg_scol2[3] + recall_xg_scol2[4] + recall_xg_scol2[5] + recall_xg_scol2[6] + recall_xg_scol2[7] + recall_xg_scol2[8] + recall_xg_scol2[9]) / 10
'''


avg_precision_sam2 = list([test_sizes[2], precision_lr_scol2_avg, precision_dt_scol2_avg, precision_rf_scol2_avg, precision_nb_scol2_avg, precision_xg_scol2_avg])
avg_recall_sam2 = list([test_sizes[2], recall_lr_scol2_avg, recall_dt_scol2_avg, recall_rf_scol2_avg, recall_nb_scol2_avg, recall_xg_scol2_avg])

# 4th Test Size - 35% 
x_tfidf = tfidf_vect.fit_transform(df["lemmatized"])

probs_lr_scol3 = []
f1_lr_scol3 = []
rocauc_lr_scol3 = []
recall_lr_scol3 = []
precision_lr_scol3 = []
accuracy_lr_scol3 = []

probs_dt_scol3 = []
f1_dt_scol3 = []
rocauc_dt_scol3 = []
recall_dt_scol3 = []
precision_dt_scol3 = []
accuracy_dt_scol3 = []

probs_nb_scol3 = []
f1_nb_scol3 = []
rocauc_nb_scol3 = []
recall_nb_scol3 = []
precision_nb_scol3 = []
accuracy_nb_scol3 = []

probs_xg_scol3 = []
f1_xg_scol3 = []
rocauc_xg_scol3 = []
recall_xg_scol3 = []
precision_xg_scol3 = []
accuracy_xg_scol3 = []

probs_rf_scol3 = []
f1_rf_scol3 = []
rocauc_rf_scol3 = []
recall_rf_scol3 = []
precision_rf_scol3 = []
accuracy_rf_scol3 = []

train_values3 = np.array([0.10, 0.125, 0.215, 0.269, 0.330])
# Other remaining values: 0.389, 0.421, 0.467, 0.559, 0.620
# 0.100, 0.125, 0.169, 0.195, 0.215, 0.797, 0.800, 0.900
test_sizes = np.array([0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95])
# train_sizes = round(train_list, 3)
for i3 in train_values3:
    # train_sizes = train_sizes + i
    # random_portion = round(np.random.uniform(0.2, 0.5), 3)
    # print(random_portion)
    x_train, x_test, y_train, y_test = train_test_split(x_nm, y_nm, train_size=i3, test_size=test_sizes[3])

    start1 = time.time()
    log = LogisticRegression(penalty='l2', random_state=0, solver='lbfgs', multi_class='auto', max_iter=500)
    model_lr = log.fit(x_train, y_train)
    probs_lr = model_lr.predict_proba(x_test)[:, 1]
    probs_lr_scol3.append(probs_lr)
    ly_prediction = log.predict(x_test)
    fly = f1_score(ly_prediction, y_test)
    f1_lr_scol3.append(fly)
    rocauc_lr = roc_auc_score(y_test, ly_prediction)
    rocauc_lr_scol3.append(rocauc_lr)
    recalls_lr = recall_score(y_test, ly_prediction)
    recall_lr_scol3.append(recalls_lr)
    precisions_lr = precision_score(y_test, ly_prediction)
    precision_lr_scol3.append(precisions_lr)
    accuracys_lr = accuracy_score(y_test, ly_prediction)
    accuracy_lr_scol3.append(accuracys_lr)
    print("===Logistic Regression with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[3], i3)
    lr_end = time.time()
    print('Logistic F1-score', fly * 100)
    print('Logistic ROCAUC score:', rocauc_lr * 100)
    print('Logistic Recall score:', recalls_lr * 100)
    print('Logistic Precision Score:', precisions_lr * 100)
    print('Logistic Confusion Matrix', confusion_matrix(y_test, ly_prediction), "\n")
    print('Logistic Classification', classification_report(y_test, ly_prediction), "\n")
    print('Logistic Accuracy Score', accuracys_lr * 100)
    print("Execution Time for Logistic Regression NearMiss: ", lr_end - start1, "seconds")

    start2 = time.time()
    from sklearn.tree import DecisionTreeClassifier

    DCT = DecisionTreeClassifier()
    model_dt = DCT.fit(x_train, y_train)
    probs_dt = model_dt.predict_proba(x_test)[:, 1]
    probs_dt_scol3.append(probs_dt)
    dct_pred = DCT.predict(x_test)
    fdct = f1_score(dct_pred, y_test)
    f1_dt_scol3.append(fdct)
    rocauc_dt = roc_auc_score(y_test, dct_pred)
    rocauc_dt_scol3.append(rocauc_dt)
    recalls_dt = recall_score(y_test, dct_pred)
    recall_dt_scol3.append(recalls_dt)
    precisions_dt = precision_score(y_test, dct_pred)
    precision_dt_scol3.append(precisions_dt)
    accuracys_dt = accuracy_score(y_test, dct_pred)
    accuracy_dt_scol3.append(accuracys_dt)
    print("===DecisionTreeClassifier with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[3], i3)
    dt_end = time.time()
    print('DCT F1-score', fdct * 100)
    print('DCT ROCAUC score:', rocauc_dt * 100)
    print('DCT Recall score:', recalls_dt * 100)
    print('DCT Precision Score:', precisions_dt * 100)
    print('DCT Confusion Matrix', confusion_matrix(y_test, dct_pred), "\n")
    print('DCT Classification', classification_report(y_test, dct_pred), "\n")
    print('DCT Accuracy Score', accuracys_dt * 100)
    print("Execution Time for Decision Tree NearMiss: ", dt_end - start2, "seconds")

    from sklearn.naive_bayes import MultinomialNB

    start3 = time.time()
    Naive = MultinomialNB()
    model_nb = Naive.fit(x_train, y_train)
    probs_nb = model_nb.predict_proba(x_test)[:, 1]
    probs_nb_scol3.append(probs_nb)
    # predict the labels on validation dataset
    ny_pred = Naive.predict(x_test)
    fnb = f1_score(ny_pred, y_test)
    f1_nb_scol3.append(fnb)
    rocauc_nb = roc_auc_score(y_test, ny_pred)
    rocauc_nb_scol3.append(rocauc_nb)
    recalls_nb = recall_score(y_test, ny_pred)
    recall_nb_scol3.append(recalls_nb)
    precisions_nb = precision_score(y_test, ny_pred)
    precision_nb_scol3.append(precisions_nb)
    accuracys_nb = accuracy_score(y_test, ny_pred)
    accuracy_nb_scol3.append(accuracys_nb)
    nb_end = time.time()
    # Use accuracy_score function to get the accuracy
    print("===Naive Bayes with TfidfVectorizer Imabalanced - 2010", df1_l, test_sizes[3], i3)
    print('Naive F1-score', fnb * 100)
    print('Naive ROCAUC score:', rocauc_nb * 100)
    print('Naive Recall score:', recalls_nb * 100)
    print('Naive Precision Score:', precisions_nb * 100)
    print('Naive Confusion Matrix', confusion_matrix(y_test, ny_pred), "\n")
    print('Naive Classification', classification_report(y_test, ny_pred), "\n")
    print('Naive Accuracy Score', accuracys_nb * 100)
    print("Execution Time for Naive Bayes NearMiss: ", nb_end - start3, "seconds")

    # XGBoost Classifier

    start4 = time.time()
    from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

    xgb_model = XGBClassifier().fit(x_train, y_train)
    probs_xg = xgb_model.predict_proba(x_test)[:, 1]
    probs_xg_scol3.append(probs_xg)
    # predict
    xgb_y_predict = xgb_model.predict(x_test)
    fxg = f1_score(xgb_y_predict, y_test)
    f1_xg_scol3.append(fxg)
    rocauc_xg = roc_auc_score(xgb_y_predict, y_test)
    rocauc_xg_scol3.append(rocauc_xg)
    recall_xg = recall_score(xgb_y_predict, y_test)
    recall_xg_scol3.append(recall_xg)
    precisions_xg = precision_score(xgb_y_predict, y_test)
    precision_xg_scol3.append(precisions_xg)
    accuracys_xg = accuracy_score(xgb_y_predict, y_test)
    accuracy_xg_scol3.append(accuracys_xg)
    xg_end = time.time()
    print("===XGB with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[3], i3)
    print('XGB F1-Score', fxg * 100)
    print('XGB ROCAUC Score:', rocauc_xg * 100)
    print('XGB Recall score:', recall_xg * 100)
    print('XGB Precision Score:', precisions_xg * 100)
    print('XGB Confusion Matrix', confusion_matrix(xgb_y_predict, y_test), "\n")
    print('XGB Classification', classification_report(xgb_y_predict, y_test), "\n")
    print('XGB Accuracy Score', accuracys_nb * 100)
    print("Execution Time for XGBoost Classifier NearMiss: ", xg_end - start4, "seconds")

    # Random Forest Classifier
    from sklearn.ensemble import RandomForestClassifier

    start5 = time.time()
    rfc_model = RandomForestClassifier(n_estimators=1000, random_state=0).fit(x_train, y_train)
    probs_rf = rfc_model.predict_proba(x_test)[:, 1]
    probs_rf_scol3.append(probs_rf)
    rfc_pred = rfc_model.predict(x_test)
    frfc = f1_score(rfc_pred, y_test)
    f1_rf_scol3.append(frfc)
    rocauc_rf = roc_auc_score(y_test, rfc_pred)
    rocauc_rf_scol3.append(rocauc_rf)
    recalls_rf = recall_score(rfc_pred, y_test)
    recall_rf_scol3.append(recalls_rf)
    precisions_rf = precision_score(rfc_pred, y_test)
    precision_rf_scol3.append(precisions_rf)
    accuracys_rf = accuracy_score(rfc_pred, y_test)
    accuracy_rf_scol3.append(accuracys_rf)
    rf_end = time.time()
    print("====RandomForest with Tfidf NearMiss 2010", df1_l, test_sizes[3], i3)
    print('RFC F1 score', frfc * 100)
    print('RFC ROCAUC Score:', rocauc_rf * 100)
    print('RFC Recall score:', recalls_rf * 100)
    print('RFC Precision Score:', precisions_rf * 100)
    print('RFC Confusion Matrix', confusion_matrix(y_test, rfc_pred), "\n")
    print('RFC Classification', classification_report(y_test, rfc_pred), "\n")
    print('RFC Accuracy Score', accuracys_rf * 100)
    print("Execution Time for Random Forest Classifier NearMiss: ", rf_end - start5, "seconds")

    print("Array of Prob Scores LR-Sam:", test_sizes[3], ":", probs_lr_scol3)
    print("Array of F1 Scores LR-Sam:", test_sizes[3], ":", f1_lr_scol3)
    print("Array of ROCAUC Scores LR-Sam:", test_sizes[3], ":", rocauc_lr_scol3)
    print("Array of Recall Scores LR-Sam:", test_sizes[3], ":", recall_lr_scol3)
    print("Array of Precision Scores LR-Sam:", test_sizes[3], ":", precision_lr_scol3)
    print("Array of Accuracy Scores LR-Sam:", test_sizes[3], ":", accuracy_lr_scol3)

    print("Array of Prob Scores DT-Sam:", test_sizes[3], ":", probs_dt_scol3)
    print("Array of F1 Scores DT-Sam:", test_sizes[3], ":", f1_dt_scol3)
    print("Array of ROCAUC Scores DT-Sam:", test_sizes[3], ":", rocauc_dt_scol3)
    print("Array of Recall Scores DT-Sam:", test_sizes[3], ":", recall_dt_scol3)
    print("Array of Precision Scores DT-Sam:", test_sizes[3], ":", precision_dt_scol3)
    print("Array of Accuracy Scores DT-Sam:", test_sizes[3], ":", accuracy_dt_scol3)

    print("Array of Prob Scores NB-Sam:", test_sizes[3], ":", probs_nb_scol3)
    print("Array of F1 Scores NB-Sam:", test_sizes[3], ":", f1_nb_scol3)
    print("Array of ROCAUC Scores NB-Sam:", test_sizes[3], ":", rocauc_nb_scol3)
    print("Array of Recall Scores NB-Sam:", test_sizes[3], ":", recall_nb_scol3)
    print("Array of Precision Scores NB-Sam:", test_sizes[3], ":", precision_nb_scol3)
    print("Array of Accuracy Scores NB-Sam:", test_sizes[3], ":", accuracy_nb_scol3)

    print("Array of Prob Scores XG-Sam:", test_sizes[3], ":", probs_xg_scol3)
    print("Array of F1 Scores XG-Sam:", test_sizes[3], ":", f1_xg_scol3)
    print("Array of ROCAUC Scores XG-Sam:", test_sizes[3], ":", rocauc_xg_scol3)
    print("Array of Recall Scores XG-Sam:", test_sizes[3], ":", recall_xg_scol3)
    print("Array of Precision Scores XG-Sam:", test_sizes[3], ":", precision_xg_scol3)
    print("Array of Accuracy Scores XG-Sam:", test_sizes[3], ":", accuracy_xg_scol3)

    print("Array of Prob Scores RF-Sam:", test_sizes[3], ":", probs_rf_scol3)
    print("Array of F1 Scores RF-Sam:", test_sizes[3], ":", f1_rf_scol3)
    print("Array of ROCAUC Scores RF-Sam:", test_sizes[3], ":", rocauc_rf_scol3)
    print("Array of Recall Scores RF-Sam:", test_sizes[3], ":", recall_rf_scol3)
    print("Array of Precision Scores RF-Sam:", test_sizes[3], ":", precision_rf_scol3)
    print("Array of Accuracy Scores RF-Sam:", test_sizes[3], ":", accuracy_rf_scol3)
'''
# 4th Test Size - Precision
#precision_sam31b = list([precision_lr_scol3[0], precision_dt_scol3[0], precision_rf_scol3[0], precision_nb_scol3[0], precision_xg_scol3[0]])
precision_sam31 = list([test_sizes[3], precision_xg_scol3[0], precision_rf_scol3[0], precision_dt_scol3[0], precision_lr_scol3[0], precision_nb_scol3[0]])
#precision_sam31 = list([(test_sizes[3] - test_sizes[3]), (0.0 + precision_rf_scol3[0]), (1.0 + precision_xg_scol3[0]),(2.0 + precision_dt_scol3[0]), (3.0 + precision_lr_scol3[0]), (4.0 + precision_nb_scol3[0])])
print("Iteration 1 Array:", precision_sam31)
precision_sam32 = list([test_sizes[3], precision_nb_scol3[1], precision_dt_scol3[1], precision_dt_scol3[1], precision_lr_scol3[1], precision_nb_scol3[1]])
# precision_sam32 = list([test_sizes[3], precision_nb_scol3[1], precision_dt_scol3[1], precision_dt_scol3[1],  precision_nb_scol3[1], precision_lr_scol3[1]])
#precision_sam32 = list([(test_sizes[3] - test_sizes[3]), (0.0 + precision_dt_scol3[1]), (1.0 + precision_nb_scol3[1]),(2.0 + precision_dt_scol3[1]), (3.0 + precision_nb_scol3[1]), (4.0 + precision_lr_scol3[1])])
#print("Iteration 2 Array:", precision_sam32)
precision_sam33 = list([test_sizes[3], precision_nb_scol3[2], precision_dt_scol3[2], precision_dt_scol3[2], precision_lr_scol3[2], precision_nb_scol3[2]])
precision_sam34 = list([test_sizes[3], precision_nb_scol3[3], precision_dt_scol3[3], precision_dt_scol3[3], precision_lr_scol3[3], precision_nb_scol3[3]])
precision_sam35 = list([test_sizes[3], precision_nb_scol3[4], precision_dt_scol3[4], precision_dt_scol3[4], precision_lr_scol3[4], precision_nb_scol3[4]])

precision_sam36 = list([test_sizes[3], precision_nb_scol3[5], precision_dt_scol3[5], precision_dt_scol3[5], precision_lr_scol3[5], precision_nb_scol3[5]])
precision_sam37 = list([test_sizes[3], precision_nb_scol3[6], precision_dt_scol3[6], precision_dt_scol3[6], precision_lr_scol3[6], precision_nb_scol3[6]])
precision_sam38 = list([test_sizes[3], precision_nb_scol3[7], precision_dt_scol3[7], precision_dt_scol3[7], precision_lr_scol3[7], precision_nb_scol3[7]])
precision_sam39 = list([test_sizes[3], precision_nb_scol3[8], precision_dt_scol3[8], precision_dt_scol3[8], precision_lr_scol3[8], precision_nb_scol3[8]])
precision_sam40 = list([test_sizes[3], precision_nb_scol3[9], precision_dt_scol3[9], precision_dt_scol3[9], precision_lr_scol3[9], precision_nb_scol3[9]])


# 4th Test Size - Recall
#recall_sam31b = list([recall_lr_scol3[0], recall_dt_scol3[0], recall_rf_scol3[0], recall_nb_scol3[0], recall_xg_scol3[0]])
recall_sam31 = list([test_sizes[3], recall_xg_scol3[0], recall_rf_scol3[0], recall_dt_scol3[0], recall_lr_scol3[0], recall_nb_scol3[0]])
#recall_sam31 = list([(test_sizes[3] - test_sizes[3]), (0.0 + recall_rf_scol3[0]), (1.0 + recall_xg_scol3[0]), (2.0 + recall_dt_scol3[0]), (3.0 + recall_lr_scol3[0]), (4.0 + recall_nb_scol3[0])])
print("Iteration 1 Array:", recall_sam31)
precision_sam32 = list([test_sizes[3], precision_nb_scol3[1], precision_dt_scol3[1], precision_dt_scol3[1], precision_lr_scol3[1], precision_nb_scol3[1]])
# precision_sam32 = list([test_sizes[3], precision_nb_scol3[1], precision_dt_scol3[1], precision_dt_scol3[1],  precision_nb_scol3[1], precision_lr_scol3[1]])
#precision_sam32 = list([(test_sizes[3] - test_sizes[3]), (0.0 + precision_dt_scol3[1]), (1.0 + precision_nb_scol3[1]),(2.0 + precision_dt_scol3[1]), (3.0 + precision_nb_scol3[1]), (4.0 + precision_lr_scol3[1])])
#print("Iteration 2 Array:", precision_sam32)
precision_sam33 = list([test_sizes[3], precision_nb_scol3[2], precision_dt_scol3[2], precision_dt_scol3[2], precision_lr_scol3[2], precision_nb_scol3[2]])
precision_sam34 = list([test_sizes[3], precision_nb_scol3[3], precision_dt_scol3[3], precision_dt_scol3[3], precision_lr_scol3[3], precision_nb_scol3[3]])
precision_sam35 = list([test_sizes[3], precision_nb_scol3[4], precision_dt_scol3[4], precision_dt_scol3[4], precision_lr_scol3[4], precision_nb_scol3[4]])

precision_sam36 = list([test_sizes[3], precision_nb_scol3[5], precision_dt_scol3[5], precision_dt_scol3[5], precision_lr_scol3[5], precision_nb_scol3[5]])
precision_sam37 = list([test_sizes[3], precision_nb_scol3[6], precision_dt_scol3[6], precision_dt_scol3[6], precision_lr_scol3[6], precision_nb_scol3[6]])
precision_sam38 = list([test_sizes[3], precision_nb_scol3[7], precision_dt_scol3[7], precision_dt_scol3[7], precision_lr_scol3[7], precision_nb_scol3[7]])
precision_sam39 = list([test_sizes[3], precision_nb_scol3[8], precision_dt_scol3[8], precision_dt_scol3[8], precision_lr_scol3[8], precision_nb_scol3[8]])
precision_sam40 = list([test_sizes[3], precision_nb_scol3[9], precision_dt_scol3[9], precision_dt_scol3[9], precision_lr_scol3[9], precision_nb_scol3[9]])
'''

precision_lr_scol3_avg = (precision_lr_scol3[0] + precision_lr_scol3[1] + precision_lr_scol3[2] + precision_lr_scol3[3] + precision_lr_scol3[4]) / 5
precision_dt_scol3_avg = (precision_dt_scol3[0] + precision_dt_scol3[1] + precision_dt_scol3[2] + precision_dt_scol3[3] + precision_dt_scol3[4]) / 5
precision_rf_scol3_avg = (precision_rf_scol3[0] + precision_rf_scol3[1] + precision_rf_scol3[2] + precision_rf_scol3[3] + precision_rf_scol3[4]) / 5
precision_nb_scol3_avg = (precision_nb_scol3[0] + precision_nb_scol3[1] + precision_nb_scol3[2] + precision_nb_scol3[3] + precision_nb_scol3[4]) / 5
precision_xg_scol3_avg = (precision_xg_scol3[0] + precision_xg_scol3[1] + precision_xg_scol3[2] + precision_xg_scol3[3] + precision_xg_scol3[4]) / 5

recall_lr_scol3_avg = (recall_lr_scol3[0] + recall_lr_scol3[1] + recall_lr_scol3[2] + recall_lr_scol3[3] + recall_lr_scol3[4]) / 5
recall_dt_scol3_avg = (recall_dt_scol3[0] + recall_dt_scol3[1] + recall_dt_scol3[2] + recall_dt_scol3[3] + recall_dt_scol3[4]) / 5
recall_rf_scol3_avg = (recall_rf_scol3[0] + recall_rf_scol3[1] + recall_rf_scol3[2] + recall_rf_scol3[3] + recall_rf_scol3[4]) / 5
recall_nb_scol3_avg = (recall_nb_scol3[0] + recall_nb_scol3[1] + recall_nb_scol3[2] + recall_nb_scol3[3] + recall_nb_scol3[4]) / 5
recall_xg_scol3_avg = (recall_xg_scol3[0] + recall_xg_scol3[1] + recall_xg_scol3[2] + recall_xg_scol3[3] + recall_xg_scol3[4]) / 5

avg_precision_sam3 = list([test_sizes[3], precision_lr_scol3_avg, precision_dt_scol3_avg, precision_rf_scol3_avg, precision_nb_scol3_avg, precision_xg_scol3_avg])
avg_recall_sam3 = list([test_sizes[3], recall_lr_scol3_avg, recall_dt_scol3_avg, recall_rf_scol3_avg, recall_nb_scol3_avg, recall_xg_scol3_avg])

# Test Size #5 - 45%
x_tfidf = tfidf_vect.fit_transform(df["lemmatized"])

probs_lr_scol4 = []
f1_lr_scol4 = []
rocauc_lr_scol4 = []
recall_lr_scol4 = []
precision_lr_scol4 = []
accuracy_lr_scol4 = []

probs_dt_scol4 = []
f1_dt_scol4 = []
rocauc_dt_scol4 = []
recall_dt_scol4 = []
precision_dt_scol4 = []
accuracy_dt_scol4 = []

probs_nb_scol4 = []
f1_nb_scol4 = []
rocauc_nb_scol4 = []
recall_nb_scol4 = []
precision_nb_scol4 = []
accuracy_nb_scol4 = []

probs_xg_scol4 = []
f1_xg_scol4 = []
rocauc_xg_scol4 = []
recall_xg_scol4 = []
precision_xg_scol4 = []
accuracy_xg_scol4 = []

probs_rf_scol4 = []
f1_rf_scol4 = []
rocauc_rf_scol4 = []
recall_rf_scol4 = []
precision_rf_scol4 = []
accuracy_rf_scol4 = []

train_values4 = np.array([0.10, 0.195, 0.215, 0.285, 0.319])
# Other remaining values: 0.467, 0.530, 0.570, 0.629, 0.649
# 0.100, 0.125, 0.169, 0.195, 0.215, 0.797, 0.800, 0.900
test_sizes = np.array([0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95])
# train_sizes = round(train_list, 3)
for i4 in train_values4:
    # train_sizes = train_sizes + i
    # random_portion = round(np.random.uniform(0.2, 0.5), 3)
    # print(random_portion)
    x_train, x_test, y_train, y_test = train_test_split(x_nm, y_nm, train_size=i4, test_size=test_sizes[4])

    start1 = time.time()
    log = LogisticRegression(penalty='l2', random_state=0, solver='lbfgs', multi_class='auto', max_iter=500)
    model_lr = log.fit(x_train, y_train)
    probs_lr = model_lr.predict_proba(x_test)[:, 1]
    probs_lr_scol4.append(probs_lr)
    ly_prediction = log.predict(x_test)
    fly = f1_score(ly_prediction, y_test)
    f1_lr_scol4.append(fly)
    rocauc_lr = roc_auc_score(y_test, ly_prediction)
    rocauc_lr_scol4.append(rocauc_lr)
    recalls_lr = recall_score(y_test, ly_prediction)
    recall_lr_scol4.append(recalls_lr)
    precisions_lr = precision_score(y_test, ly_prediction)
    precision_lr_scol4.append(precisions_lr)
    accuracys_lr = accuracy_score(y_test, ly_prediction)
    accuracy_lr_scol4.append(accuracys_lr)
    print("===Logistic Regression with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[4], i4)
    lr_end = time.time()
    print('Logistic F1-score', fly * 100)
    print('Logistic ROCAUC score:', rocauc_lr * 100)
    print('Logistic Recall score:', recalls_lr * 100)
    print('Logistic Precision Score:', precisions_lr * 100)
    print('Logistic Confusion Matrix', confusion_matrix(y_test, ly_prediction), "\n")
    print('Logistic Classification', classification_report(y_test, ly_prediction), "\n")
    print('Logistic Accuracy Score', accuracys_lr * 100)
    print("Execution Time for Logistic Regression NearMiss: ", lr_end - start1, "seconds")

    start2 = time.time()
    from sklearn.tree import DecisionTreeClassifier

    DCT = DecisionTreeClassifier()
    model_dt = DCT.fit(x_train, y_train)
    probs_dt = model_dt.predict_proba(x_test)[:, 1]
    probs_dt_scol4.append(probs_dt)
    dct_pred = DCT.predict(x_test)
    fdct = f1_score(dct_pred, y_test)
    f1_dt_scol4.append(fdct)
    rocauc_dt = roc_auc_score(y_test, dct_pred)
    rocauc_dt_scol4.append(rocauc_dt)
    recalls_dt = recall_score(y_test, dct_pred)
    recall_dt_scol4.append(recalls_dt)
    precisions_dt = precision_score(y_test, dct_pred)
    precision_dt_scol4.append(precisions_dt)
    accuracys_dt = accuracy_score(y_test, dct_pred)
    accuracy_dt_scol4.append(accuracys_dt)
    print("===DecisionTreeClassifier with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[4], i4)
    dt_end = time.time()
    print('DCT F1-score', fdct * 100)
    print('DCT ROCAUC score:', rocauc_dt * 100)
    print('DCT Recall score:', recalls_dt * 100)
    print('DCT Precision Score:', precisions_dt * 100)
    print('DCT Confusion Matrix', confusion_matrix(y_test, dct_pred), "\n")
    print('DCT Classification', classification_report(y_test, dct_pred), "\n")
    print('DCT Accuracy Score', accuracys_dt * 100)
    print("Execution Time for Decision Tree NearMiss: ", dt_end - start2, "seconds")

    from sklearn.naive_bayes import MultinomialNB

    start3 = time.time()
    Naive = MultinomialNB()
    model_nb = Naive.fit(x_train, y_train)
    probs_nb = model_nb.predict_proba(x_test)[:, 1]
    probs_nb_scol4.append(probs_nb)
    # predict the labels on validation dataset
    ny_pred = Naive.predict(x_test)
    fnb = f1_score(ny_pred, y_test)
    f1_nb_scol4.append(fnb)
    rocauc_nb = roc_auc_score(y_test, ny_pred)
    rocauc_nb_scol4.append(rocauc_nb)
    recalls_nb = recall_score(y_test, ny_pred)
    recall_nb_scol4.append(recalls_nb)
    precisions_nb = precision_score(y_test, ny_pred)
    precision_nb_scol4.append(precisions_nb)
    accuracys_nb = accuracy_score(y_test, ny_pred)
    accuracy_nb_scol4.append(accuracys_nb)
    nb_end = time.time()
    # Use accuracy_score function to get the accuracy
    print("===Naive Bayes with TfidfVectorizer Imabalanced - 2010", df1_l, test_sizes[4], i4)
    print('Naive F1-score', fnb * 100)
    print('Naive ROCAUC score:', rocauc_nb * 100)
    print('Naive Recall score:', recalls_nb * 100)
    print('Naive Precision Score:', precisions_nb * 100)
    print('Naive Confusion Matrix', confusion_matrix(y_test, ny_pred), "\n")
    print('Naive Classification', classification_report(y_test, ny_pred), "\n")
    print('Naive Accuracy Score', accuracys_nb * 100)
    print("Execution Time for Naive Bayes NearMiss: ", nb_end - start3, "seconds")

    # XGBoost Classifier

    start4 = time.time()
    from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

    xgb_model = XGBClassifier().fit(x_train, y_train)
    probs_xg = xgb_model.predict_proba(x_test)[:, 1]
    probs_xg_scol4.append(probs_xg)
    # predict
    xgb_y_predict = xgb_model.predict(x_test)
    fxg = f1_score(xgb_y_predict, y_test)
    f1_xg_scol4.append(fxg)
    rocauc_xg = roc_auc_score(xgb_y_predict, y_test)
    rocauc_xg_scol4.append(rocauc_xg)
    recall_xg = recall_score(xgb_y_predict, y_test)
    recall_xg_scol4.append(recall_xg)
    precisions_xg = precision_score(xgb_y_predict, y_test)
    precision_xg_scol4.append(precisions_xg)
    accuracys_xg = accuracy_score(xgb_y_predict, y_test)
    accuracy_xg_scol4.append(accuracys_xg)
    xg_end = time.time()
    print("===XGB with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[4], i4)
    print('XGB F1-Score', fxg * 100)
    print('XGB ROCAUC Score:', rocauc_xg * 100)
    print('XGB Recall score:', recall_xg * 100)
    print('XGB Precision Score:', precisions_xg * 100)
    print('XGB Confusion Matrix', confusion_matrix(xgb_y_predict, y_test), "\n")
    print('XGB Classification', classification_report(xgb_y_predict, y_test), "\n")
    print('XGB Accuracy Score', accuracys_nb * 100)
    print("Execution Time for XGBoost Classifier NearMiss: ", xg_end - start4, "seconds")

    # Random Forest Classifier
    from sklearn.ensemble import RandomForestClassifier

    start5 = time.time()
    rfc_model = RandomForestClassifier(n_estimators=1000, random_state=0).fit(x_train, y_train)
    probs_rf = rfc_model.predict_proba(x_test)[:, 1]
    probs_rf_scol4.append(probs_rf)
    rfc_pred = rfc_model.predict(x_test)
    frfc = f1_score(rfc_pred, y_test)
    f1_rf_scol4.append(frfc)
    rocauc_rf = roc_auc_score(y_test, rfc_pred)
    rocauc_rf_scol4.append(rocauc_rf)
    recalls_rf = recall_score(rfc_pred, y_test)
    recall_rf_scol4.append(recalls_rf)
    precisions_rf = precision_score(rfc_pred, y_test)
    precision_rf_scol4.append(precisions_rf)
    accuracys_rf = accuracy_score(rfc_pred, y_test)
    accuracy_rf_scol4.append(accuracys_rf)
    rf_end = time.time()
    print("====RandomForest with Tfidf NearMiss 2010", df1_l, test_sizes[4], i4)
    print('RFC F1 score', frfc * 100)
    print('RFC ROCAUC Score:', rocauc_rf * 100)
    print('RFC Recall score:', recalls_rf * 100)
    print('RFC Precision Score:', precisions_rf * 100)
    print('RFC Confusion Matrix', confusion_matrix(y_test, rfc_pred), "\n")
    print('RFC Classification', classification_report(y_test, rfc_pred), "\n")
    print('RFC Accuracy Score', accuracys_rf * 100)
    print("Execution Time for Random Forest Classifier NearMiss: ", rf_end - start5, "seconds")

    print("Array of Prob Scores LR-Sam:", test_sizes[4], ":", probs_lr_scol4)
    print("Array of F1 Scores LR-Sam:", test_sizes[4], ":", f1_lr_scol4)
    print("Array of ROCAUC Scores LR-Sam:", test_sizes[4], ":", rocauc_lr_scol4)
    print("Array of Recall Scores LR-Sam:", test_sizes[4], ":", recall_lr_scol4)
    print("Array of Precision Scores LR-Sam:", test_sizes[4], ":", precision_lr_scol4)
    print("Array of Accuracy Scores LR-Sam:", test_sizes[4], ":", accuracy_lr_scol4)

    print("Array of Prob Scores DT-Sam:", test_sizes[4], ":", probs_dt_scol4)
    print("Array of F1 Scores DT-Sam:", test_sizes[4], ":", f1_dt_scol4)
    print("Array of ROCAUC Scores DT-Sam:", test_sizes[4], ":", rocauc_dt_scol4)
    print("Array of Recall Scores DT-Sam:", test_sizes[4], ":", recall_dt_scol4)
    print("Array of Precision Scores DT-Sam:", test_sizes[4], ":", precision_dt_scol4)
    print("Array of Accuracy Scores DT-Sam:", test_sizes[4], ":", accuracy_dt_scol4)

    print("Array of Prob Scores NB-Sam:", test_sizes[4], ":", probs_nb_scol4)
    print("Array of F1 Scores NB-Sam:", test_sizes[4], ":", f1_nb_scol4)
    print("Array of ROCAUC Scores NB-Sam:", test_sizes[4], ":", rocauc_nb_scol4)
    print("Array of Recall Scores NB-Sam:", test_sizes[4], ":", recall_nb_scol4)
    print("Array of Precision Scores NB-Sam:", test_sizes[4], ":", precision_nb_scol4)
    print("Array of Accuracy Scores NB-Sam:", test_sizes[4], ":", accuracy_nb_scol4)

    print("Array of Prob Scores XG-Sam:", test_sizes[4], ":", probs_xg_scol4)
    print("Array of F1 Scores XG-Sam:", test_sizes[4], ":", f1_xg_scol4)
    print("Array of ROCAUC Scores XG-Sam:", test_sizes[4], ":", rocauc_xg_scol4)
    print("Array of Recall Scores XG-Sam:", test_sizes[4], ":", recall_xg_scol4)
    print("Array of Precision Scores XG-Sam:", test_sizes[4], ":", precision_xg_scol4)
    print("Array of Accuracy Scores XG-Sam:", test_sizes[4], ":", accuracy_xg_scol4)

    print("Array of Prob Scores RF-Sam:", test_sizes[4], ":", probs_rf_scol4)
    print("Array of F1 Scores RF-Sam:", test_sizes[4], ":", f1_rf_scol4)
    print("Array of ROCAUC Scores RF-Sam:", test_sizes[4], ":", rocauc_rf_scol4)
    print("Array of Recall Scores RF-Sam:", test_sizes[4], ":", recall_rf_scol4)
    print("Array of Precision Scores RF-Sam:", test_sizes[4], ":", precision_rf_scol4)
    print("Array of Accuracy Scores RF-Sam:", test_sizes[4], ":", accuracy_rf_scol4)

'''
# 5th Test Size - Precision
#precision_sam41b = list([precision_lr_scol4[0], precision_dt_scol4[0], precision_rf_scol4[0], precision_nb_scol4[0], precision_xg_scol4[0]])
precision_sam41 = list([test_sizes[4], precision_xg_scol4[0], precision_rf_scol4[0], precision_dt_scol4[0], precision_lr_scol4[0], precision_nb_scol4[0]])
#precision_sam41 = list([(test_sizes[4] - test_sizes[4]), (0.0 + precision_rf_scol4[0]), (1.0 + precision_xg_scol4[0]), (2.0 + precision_dt_scol4[0]), (3.0 + precision_lr_scol4[0]), (4.0 + precision_nb_scol4[0])])
#print("Iteration 1 Array:", precision_sam41)
# precision_sam42 = list([precision_lr_scol4[1], precision_dt_scol4[1], precision_rf_scol4[1], precision_nb_scol4[1], precision_xg_scol4[1]])
precision_sam42 = list([test_sizes[4], precision_xg_scol4[1], precision_rf_scol4[1], precision_dt_scol4[1],  precision_lr_scol4[1], precision_nb_scol4[1]])
#precision_sam42 = list([(test_sizes[4] - test_sizes[4]), (0.0 + precision_rf_scol4[1]), (1.0 + precision_xg_scol4[1]), (2.0 + precision_dt_scol4[1]), (3.0 + precision_lr_scol4[1]), (4.0 + precision_nb_scol4[1])])
#print("Iteration 2 Array:", precision_sam42)

precision_sam43 = list([test_sizes[4], precision_lr_scol4[2], precision_dt_scol4[2], precision_rf_scol4[2], precision_nb_scol4[2], precision_xg_scol4[2]])
precision_sam44 = list([test_sizes[4], precision_lr_scol4[3], precision_dt_scol4[3], precision_rf_scol4[3], precision_nb_scol4[3], precision_xg_scol4[3]])
precision_sam45 = list([test_sizes[4], precision_lr_scol4[4], precision_dt_scol4[4], precision_rf_scol4[4], precision_nb_scol4[4], precision_xg_scol4[4]])

precision_sam46 = list([test_sizes[4], precision_lr_scol4[5], precision_dt_scol4[5], precision_rf_scol4[5], precision_nb_scol4[5], precision_xg_scol4[5]])
precision_sam47 = list([test_sizes[4], precision_lr_scol4[6], precision_dt_scol4[6], precision_rf_scol4[6], precision_nb_scol4[6], precision_xg_scol4[6]])
precision_sam48 = list([test_sizes[4], precision_lr_scol4[7], precision_dt_scol4[7], precision_rf_scol4[7], precision_nb_scol4[7], precision_xg_scol4[7]])
precision_sam49 = list([test_sizes[4], precision_lr_scol4[8], precision_dt_scol4[8], precision_rf_scol4[8], precision_nb_scol4[8], precision_xg_scol4[8]])
precision_sam50 = list([test_sizes[4], precision_lr_scol4[9], precision_dt_scol4[9], precision_rf_scol4[9], precision_nb_scol4[9], precision_xg_scol4[9]])


# 5th Test Size - Recall
#recall_sam41b = list([recall_lr_scol4[0], recall_dt_scol4[0], recall_rf_scol4[0], recall_nb_scol4[0], recall_xg_scol4[0]])
recall_sam41 = list([test_sizes[4], recall_xg_scol4[0], recall_rf_scol4[0], recall_dt_scol4[0], recall_lr_scol4[0], recall_nb_scol4[0]])
#recall_sam41 = list([(test_sizes[4] - test_sizes[4]), (0.0 + recall_rf_scol4[0]), (1.0 + recall_xg_scol4[0]), (2.0 + recall_dt_scol4[0]), (3.0 + recall_lr_scol4[0]), (4.0 + recall_nb_scol4[0])])
print("Iteration 1 Array:", recall_sam41)
# recall_sam42 = list([recall_lr_scol4[1], recall_dt_scol4[1], recall_rf_scol4[1], recall_nb_scol4[1], recall_xg_scol4[1]])
recall_sam42 = list([test_sizes[4], recall_xg_scol4[1], recall_rf_scol4[1], recall_dt_scol4[1],  recall_lr_scol4[1], recall_nb_scol4[1]])
#recall_sam42 = list([(test_sizes[4] - test_sizes[4]), (0.0 + recall_rf_scol4[1]), (1.0 + recall_xg_scol4[1]),(2.0 + recall_dt_scol4[1]), (3.0 + recall_lr_scol4[1]), (4.0 + recall_nb_scol4[1])])
#print("Iteration 2 Array:", recall_sam42)

recall_sam43 = list([test_sizes[4], recall_lr_scol4[2], recall_dt_scol4[2], recall_rf_scol4[2], recall_nb_scol4[2], recall_xg_scol4[2]])
recall_sam44 = list([test_sizes[4], recall_lr_scol4[3], recall_dt_scol4[3], recall_rf_scol4[3], recall_nb_scol4[3], recall_xg_scol4[3]])
recall_sam45 = list([test_sizes[4], recall_lr_scol4[4], recall_dt_scol4[4], recall_rf_scol4[4], recall_nb_scol4[4], recall_xg_scol4[4]])

recall_sam46 = list([test_sizes[4], recall_lr_scol4[5], recall_dt_scol4[5], recall_rf_scol4[5], recall_nb_scol4[5], recall_xg_scol4[5]])
recall_sam47 = list([test_sizes[4], recall_lr_scol4[6], recall_dt_scol4[6], recall_rf_scol4[6], recall_nb_scol4[6], recall_xg_scol4[6]])
recall_sam48 = list([test_sizes[4], recall_lr_scol4[7], recall_dt_scol4[7], recall_rf_scol4[7], recall_nb_scol4[7], recall_xg_scol4[7]])
recall_sam49 = list([test_sizes[4], recall_lr_scol4[8], recall_dt_scol4[8], recall_rf_scol4[8], recall_nb_scol4[8], recall_xg_scol4[8]])
recall_sam50 = list([test_sizes[4], recall_lr_scol4[9], recall_dt_scol4[9], recall_rf_scol4[9], recall_nb_scol4[9], recall_xg_scol4[9]])
'''
'''
precision_lr_scol4_avg = (precision_lr_scol4[0] + precision_lr_scol4[1] + precision_lr_scol4[2] + precision_lr_scol4[3] + precision_lr_scol4[4] + precision_lr_scol4[5] + precision_lr_scol4[6] + precision_lr_scol4[7] + precision_lr_scol4[8] + precision_lr_scol4[9]) / 10
precision_dt_scol4_avg = (precision_dt_scol4[0] + precision_dt_scol4[1] + precision_dt_scol4[2] + precision_dt_scol4[3] + precision_dt_scol4[4] + precision_dt_scol4[5] + precision_dt_scol4[6] + precision_dt_scol4[7] + precision_dt_scol4[8] + precision_dt_scol4[9]) / 10
precision_rf_scol4_avg = (precision_rf_scol4[0] + precision_rf_scol4[1] + precision_rf_scol4[2] + precision_rf_scol4[3] + precision_rf_scol4[4] + precision_rf_scol4[5] + precision_rf_scol4[6] + precision_rf_scol4[7] + precision_rf_scol4[8] + precision_rf_scol4[9]) / 10
precision_nb_scol4_avg = (precision_nb_scol4[0] + precision_nb_scol4[1] + precision_nb_scol4[2] + precision_nb_scol4[3] + precision_nb_scol4[4] + precision_nb_scol4[5] + precision_nb_scol4[6] + precision_nb_scol4[7] + precision_nb_scol4[8] + precision_nb_scol4[9]) / 10
precision_xg_scol4_avg = (precision_xg_scol4[0] + precision_xg_scol4[1] + precision_xg_scol4[2] + precision_xg_scol4[3] + precision_xg_scol4[4] + precision_xg_scol4[5] + precision_xg_scol4[6] + precision_xg_scol4[7] + precision_xg_scol4[8] + precision_xg_scol4[9]) / 10


recall_lr_scol4_avg = (recall_lr_scol4[0] + recall_lr_scol4[1] + recall_lr_scol4[2] + recall_lr_scol4[3] + recall_lr_scol4[4] + recall_lr_scol4[5] + recall_lr_scol4[6] + recall_lr_scol4[7] + recall_lr_scol4[8] + recall_lr_scol4[9]) / 10
recall_dt_scol4_avg = (recall_dt_scol4[0] + recall_dt_scol4[1] + recall_dt_scol4[2] + recall_dt_scol4[3] + recall_dt_scol4[4] + recall_dt_scol4[5] + recall_dt_scol4[6] + recall_dt_scol4[7] + recall_dt_scol4[8] + recall_dt_scol4[9]) / 10
recall_rf_scol4_avg = (recall_rf_scol4[0] + recall_rf_scol4[1] + recall_rf_scol4[2] + recall_rf_scol4[3] + recall_rf_scol4[4] + recall_rf_scol4[5] + recall_rf_scol4[6] + recall_rf_scol4[7] + recall_rf_scol4[8] + recall_rf_scol4[9]) / 10
recall_nb_scol4_avg = (recall_nb_scol4[0] + recall_nb_scol4[1] + recall_nb_scol4[2] + recall_nb_scol4[3] + recall_nb_scol4[4] + recall_nb_scol4[5] + recall_nb_scol4[6] + recall_nb_scol4[7] + recall_nb_scol4[8] + recall_nb_scol4[9]) / 10
recall_xg_scol4_avg = (recall_xg_scol4[0] + recall_xg_scol4[1] + recall_xg_scol4[2] + recall_xg_scol4[3] + recall_xg_scol4[4] + recall_xg_scol4[5] + recall_xg_scol4[6] + recall_xg_scol4[7] + recall_xg_scol4[8] + recall_xg_scol4[9]) / 10
'''

precision_lr_scol4_avg = (precision_lr_scol4[0] + precision_lr_scol4[1] + precision_lr_scol4[2] + precision_lr_scol4[3] + precision_lr_scol4[4]) / 5
precision_dt_scol4_avg = (precision_dt_scol4[0] + precision_dt_scol4[1] + precision_dt_scol4[2] + precision_dt_scol4[3] + precision_dt_scol4[4]) / 5
precision_rf_scol4_avg = (precision_rf_scol4[0] + precision_rf_scol4[1] + precision_rf_scol4[2] + precision_rf_scol4[3] + precision_rf_scol4[4]) / 5
precision_nb_scol4_avg = (precision_nb_scol4[0] + precision_nb_scol4[1] + precision_nb_scol4[2] + precision_nb_scol4[3] + precision_nb_scol4[4]) / 5
precision_xg_scol4_avg = (precision_xg_scol4[0] + precision_xg_scol4[1] + precision_xg_scol4[2] + precision_xg_scol4[3] + precision_xg_scol4[4]) / 5


recall_lr_scol4_avg = (recall_lr_scol4[0] + recall_lr_scol4[1] + recall_lr_scol4[2] + recall_lr_scol4[3] + recall_lr_scol4[4]) / 5
recall_dt_scol4_avg = (recall_dt_scol4[0] + recall_dt_scol4[1] + recall_dt_scol4[2] + recall_dt_scol4[3] + recall_dt_scol4[4]) / 5
recall_rf_scol4_avg = (recall_rf_scol4[0] + recall_rf_scol4[1] + recall_rf_scol4[2] + recall_rf_scol4[3] + recall_rf_scol4[4]) / 5
recall_nb_scol4_avg = (recall_nb_scol4[0] + recall_nb_scol4[1] + recall_nb_scol4[2] + recall_nb_scol4[3] + recall_nb_scol4[4]) / 5
recall_xg_scol4_avg = (recall_xg_scol4[0] + recall_xg_scol4[1] + recall_xg_scol4[2] + recall_xg_scol4[3] + recall_xg_scol4[4]) / 5

avg_precision_sam4 = list([test_sizes[4], precision_lr_scol4_avg, precision_dt_scol4_avg, precision_rf_scol4_avg, precision_nb_scol4_avg, precision_xg_scol4_avg])
avg_recall_sam4 = list([test_sizes[4], recall_lr_scol4_avg, recall_dt_scol4_avg, recall_rf_scol4_avg, recall_nb_scol4_avg, recall_xg_scol4_avg])

# Test Size #6 - 55%
x_tfidf = tfidf_vect.fit_transform(df["lemmatized"])

probs_lr_scol5 = []
f1_lr_scol5 = []
rocauc_lr_scol5 = []
recall_lr_scol5 = []
precision_lr_scol5 = []
accuracy_lr_scol5 = []

probs_dt_scol5 = []
f1_dt_scol5 = []
rocauc_dt_scol5 = []
recall_dt_scol5 = []
precision_dt_scol5 = []
accuracy_dt_scol5 = []

probs_nb_scol5 = []
f1_nb_scol5 = []
rocauc_nb_scol5 = []
recall_nb_scol5 = []
precision_nb_scol5 = []
accuracy_nb_scol5 = []

probs_xg_scol5 = []
f1_xg_scol5 = []
rocauc_xg_scol5 = []
recall_xg_scol5 = []
precision_xg_scol5 = []
accuracy_xg_scol5 = []

probs_rf_scol5 = []
f1_rf_scol5 = []
rocauc_rf_scol5 = []
recall_rf_scol5 = []
precision_rf_scol5 = []
accuracy_rf_scol5 = []

train_values5 = np.array([0.033, 0.125, 0.189, 0.225, 0.286])
# Other remaining values: 0.286, 0.331, 0.399, 0.410, 0.444
# 0. 20, 0.100, 0.125, 0.169, 0.195, 0.25, 0.797, 0.800, 0.900
test_sizes = np.array([0.05, 0.5, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95])
# train_sizes = round(train_list, 3)
for i5 in train_values5:
    # train_sizes = train_sizes + i
    # random_portion = round(np.random.uniform(0.2, 0.5), 3)
    # print(random_portion)
    x_train, x_test, y_train, y_test = train_test_split(x_nm, y_nm, train_size=i5, test_size=test_sizes[5])

    start1 = time.time()
    log = LogisticRegression(penalty='l2', random_state=0, solver='lbfgs', multi_class='auto', max_iter=500)
    model_lr = log.fit(x_train, y_train)
    probs_lr = model_lr.predict_proba(x_test)[:, 1]
    probs_lr_scol5.append(probs_lr)
    ly_prediction = log.predict(x_test)
    fly = f1_score(ly_prediction, y_test)
    f1_lr_scol5.append(fly)
    rocauc_lr = roc_auc_score(y_test, ly_prediction)
    rocauc_lr_scol5.append(rocauc_lr)
    recalls_lr = recall_score(y_test, ly_prediction)
    recall_lr_scol5.append(recalls_lr)
    precisions_lr = precision_score(y_test, ly_prediction)
    precision_lr_scol5.append(precisions_lr)
    accuracys_lr = accuracy_score(y_test, ly_prediction)
    accuracy_lr_scol5.append(accuracys_lr)
    print("===Logistic Regression with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[5], i5)
    lr_end = time.time()
    print('Logistic F1-score', fly * 100)
    print('Logistic ROCAUC score:', rocauc_lr * 100)
    print('Logistic Recall score:', recalls_lr * 100)
    print('Logistic Precision Score:', precisions_lr * 100)
    print('Logistic Confusion Matrix', confusion_matrix(y_test, ly_prediction), "\n")
    print('Logistic Classification', classification_report(y_test, ly_prediction), "\n")
    print('Logistic Accuracy Score', accuracys_lr * 100)
    print("Execution Time for Logistic Regression NearMiss: ", lr_end - start1, "seconds")

    start2 = time.time()
    from sklearn.tree import DecisionTreeClassifier

    DCT = DecisionTreeClassifier()
    model_dt = DCT.fit(x_train, y_train)
    probs_dt = model_dt.predict_proba(x_test)[:, 1]
    probs_dt_scol5.append(probs_dt)
    dct_pred = DCT.predict(x_test)
    fdct = f1_score(dct_pred, y_test)
    f1_dt_scol5.append(fdct)
    rocauc_dt = roc_auc_score(y_test, dct_pred)
    rocauc_dt_scol5.append(rocauc_dt)
    recalls_dt = recall_score(y_test, dct_pred)
    recall_dt_scol5.append(recalls_dt)
    precisions_dt = precision_score(y_test, dct_pred)
    precision_dt_scol5.append(precisions_dt)
    accuracys_dt = accuracy_score(y_test, dct_pred)
    accuracy_dt_scol5.append(accuracys_dt)
    print("===DecisionTreeClassifier with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[5], i5)
    dt_end = time.time()
    print('DCT F1-score', fdct * 100)
    print('DCT ROCAUC score:', rocauc_dt * 100)
    print('DCT Recall score:', recalls_dt * 100)
    print('DCT Precision Score:', precisions_dt * 100)
    print('DCT Confusion Matrix', confusion_matrix(y_test, dct_pred), "\n")
    print('DCT Classification', classification_report(y_test, dct_pred), "\n")
    print('DCT Accuracy Score', accuracys_dt * 100)
    print("Execution Time for Decision Tree NearMiss: ", dt_end - start2, "seconds")

    from sklearn.naive_bayes import MultinomialNB

    start3 = time.time()
    Naive = MultinomialNB()
    model_nb = Naive.fit(x_train, y_train)
    probs_nb = model_nb.predict_proba(x_test)[:, 1]
    probs_nb_scol5.append(probs_nb)
    # predict the labels on validation dataset
    ny_pred = Naive.predict(x_test)
    fnb = f1_score(ny_pred, y_test)
    f1_nb_scol5.append(fnb)
    rocauc_nb = roc_auc_score(y_test, ny_pred)
    rocauc_nb_scol5.append(rocauc_nb)
    recalls_nb = recall_score(y_test, ny_pred)
    recall_nb_scol5.append(recalls_nb)
    precisions_nb = precision_score(y_test, ny_pred)
    precision_nb_scol5.append(precisions_nb)
    accuracys_nb = accuracy_score(y_test, ny_pred)
    accuracy_nb_scol5.append(accuracys_nb)
    nb_end = time.time()
    # Use accuracy_score function to get the accuracy
    print("===Naive Bayes with TfidfVectorizer Imabalanced - 2010", df1_l, test_sizes[5], i5)
    print('Naive F1-score', fnb * 100)
    print('Naive ROCAUC score:', rocauc_nb * 100)
    print('Naive Recall score:', recalls_nb * 100)
    print('Naive Precision Score:', precisions_nb * 100)
    print('Naive Confusion Matrix', confusion_matrix(y_test, ny_pred), "\n")
    print('Naive Classification', classification_report(y_test, ny_pred), "\n")
    print('Naive Accuracy Score', accuracys_nb * 100)
    print("Execution Time for Naive Bayes NearMiss: ", nb_end - start3, "seconds")

    # XGBoost Classifier

    start4 = time.time()
    from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

    xgb_model = XGBClassifier().fit(x_train, y_train)
    probs_xg = xgb_model.predict_proba(x_test)[:, 1]
    probs_xg_scol5.append(probs_xg)
    # predict
    xgb_y_predict = xgb_model.predict(x_test)
    fxg = f1_score(xgb_y_predict, y_test)
    f1_xg_scol5.append(fxg)
    rocauc_xg = roc_auc_score(xgb_y_predict, y_test)
    rocauc_xg_scol5.append(rocauc_xg)
    recall_xg = recall_score(xgb_y_predict, y_test)
    recall_xg_scol5.append(recall_xg)
    precisions_xg = precision_score(xgb_y_predict, y_test)
    precision_xg_scol5.append(precisions_xg)
    accuracys_xg = accuracy_score(xgb_y_predict, y_test)
    accuracy_xg_scol5.append(accuracys_xg)
    xg_end = time.time()
    print("===XGB with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[5], i5)
    print('XGB F1-Score', fxg * 100)
    print('XGB ROCAUC Score:', rocauc_xg * 100)
    print('XGB Recall score:', recall_xg * 100)
    print('XGB Precision Score:', precisions_xg * 100)
    print('XGB Confusion Matrix', confusion_matrix(xgb_y_predict, y_test), "\n")
    print('XGB Classification', classification_report(xgb_y_predict, y_test), "\n")
    print('XGB Accuracy Score', accuracys_nb * 100)
    print("Execution Time for XGBoost Classifier NearMiss: ", xg_end - start4, "seconds")

    # Random Forest Classifier
    from sklearn.ensemble import RandomForestClassifier

    start5 = time.time()
    rfc_model = RandomForestClassifier(n_estimators=1000, random_state=0).fit(x_train, y_train)
    probs_rf = rfc_model.predict_proba(x_test)[:, 1]
    probs_rf_scol5.append(probs_rf)
    rfc_pred = rfc_model.predict(x_test)
    frfc = f1_score(rfc_pred, y_test)
    f1_rf_scol5.append(frfc)
    rocauc_rf = roc_auc_score(y_test, rfc_pred)
    rocauc_rf_scol5.append(rocauc_rf)
    recalls_rf = recall_score(rfc_pred, y_test)
    recall_rf_scol5.append(recalls_rf)
    precisions_rf = precision_score(rfc_pred, y_test)
    precision_rf_scol5.append(precisions_rf)
    accuracys_rf = accuracy_score(rfc_pred, y_test)
    accuracy_rf_scol5.append(accuracys_rf)
    rf_end = time.time()
    print("====RandomForest with Tfidf NearMiss 2010", df1_l, test_sizes[5], i5)
    print('RFC F1 score', frfc * 100)
    print('RFC ROCAUC Score:', rocauc_rf * 100)
    print('RFC Recall score:', recalls_rf * 100)
    print('RFC Precision Score:', precisions_rf * 100)
    print('RFC Confusion Matrix', confusion_matrix(y_test, rfc_pred), "\n")
    print('RFC Classification', classification_report(y_test, rfc_pred), "\n")
    print('RFC Accuracy Score', accuracys_rf * 100)
    print("Execution Time for Random Forest Classifier NearMiss: ", rf_end - start5, "seconds")

    print("Array of Prob Scores LR-Sam:", test_sizes[5], ":", probs_lr_scol5)
    print("Array of F1 Scores LR-Sam:", test_sizes[5], ":", f1_lr_scol5)
    print("Array of ROCAUC Scores LR-Sam:", test_sizes[5], ":", rocauc_lr_scol5)
    print("Array of Recall Scores LR-Sam:", test_sizes[5], ":", recall_lr_scol5)
    print("Array of Precision Scores LR-Sam:", test_sizes[5], ":", precision_lr_scol5)
    print("Array of Accuracy Scores LR-Sam:", test_sizes[5], ":", accuracy_lr_scol5)

    print("Array of Prob Scores DT-Sam:", test_sizes[5], ":", probs_dt_scol5)
    print("Array of F1 Scores DT-Sam:", test_sizes[5], ":", f1_dt_scol5)
    print("Array of ROCAUC Scores DT-Sam:", test_sizes[5], ":", rocauc_dt_scol5)
    print("Array of Recall Scores DT-Sam:", test_sizes[5], ":", recall_dt_scol5)
    print("Array of Precision Scores DT-Sam:", test_sizes[5], ":", precision_dt_scol5)
    print("Array of Accuracy Scores DT-Sam:", test_sizes[5], ":", accuracy_dt_scol5)

    print("Array of Prob Scores NB-Sam:", test_sizes[5], ":", probs_nb_scol5)
    print("Array of F1 Scores NB-Sam:", test_sizes[5], ":", f1_nb_scol5)
    print("Array of ROCAUC Scores NB-Sam:", test_sizes[5], ":", rocauc_nb_scol5)
    print("Array of Recall Scores NB-Sam:", test_sizes[5], ":", recall_nb_scol5)
    print("Array of Precision Scores NB-Sam:", test_sizes[5], ":", precision_nb_scol5)
    print("Array of Accuracy Scores NB-Sam:", test_sizes[5], ":", accuracy_nb_scol5)

    print("Array of Prob Scores XG-Sam:", test_sizes[5], ":", probs_xg_scol5)
    print("Array of F1 Scores XG-Sam:", test_sizes[5], ":", f1_xg_scol5)
    print("Array of ROCAUC Scores XG-Sam:", test_sizes[5], ":", rocauc_xg_scol5)
    print("Array of Recall Scores XG-Sam:", test_sizes[5], ":", recall_xg_scol5)
    print("Array of Precision Scores XG-Sam:", test_sizes[5], ":", precision_xg_scol5)
    print("Array of Accuracy Scores XG-Sam:", test_sizes[5], ":", accuracy_xg_scol5)

    print("Array of Prob Scores RF-Sam:", test_sizes[5], ":", probs_rf_scol5)
    print("Array of F1 Scores RF-Sam:", test_sizes[5], ":", f1_rf_scol5)
    print("Array of ROCAUC Scores RF-Sam:", test_sizes[5], ":", rocauc_rf_scol5)
    print("Array of Recall Scores RF-Sam:", test_sizes[5], ":", recall_rf_scol5)
    print("Array of Precision Scores RF-Sam:", test_sizes[5], ":", precision_rf_scol5)
    print("Array of Accuracy Scores RF-Sam:", test_sizes[5], ":", accuracy_rf_scol5)

'''
# Precision - 6th test size
#precision_sam51b = list([precision_lr_scol5[0], precision_dt_scol5[0], precision_rf_scol5[0], precision_nb_scol5[0], precision_xg_scol5[0]])
precision_sam51 = list([test_sizes[5], precision_xg_scol5[0], precision_rf_scol5[0], precision_dt_scol5[0], precision_lr_scol5[0], precision_nb_scol5[0]])
#precision_sam51 = list([(test_sizes[5] - test_sizes[5]), (0.0 + precision_rf_scol5[0]), (1.0 + precision_xg_scol5[0]), (2.0 + precision_dt_scol5[0]), (3.0 + precision_lr_scol5[0]), (4.0 + precision_nb_scol5[0])])
print("Iteration 1 Array:", precision_sam51)
# precision_sam51 = list([precision_lr_scol5[1], precision_dt_scol5[1], precision_rf_scol5[1], precision_nb_scol5[1], precision_xg_scol5[1]])
precision_sam52 = list([test_sizes[5], precision_xg_scol5[1], precision_rf_scol5[1], precision_dt_scol5[1],  precision_lr_scol5[1], precision_nb_scol5[1]])
#precision_sam52 = list([(test_sizes[5] - test_sizes[5]), (0.0 + precision_rf_scol5[1]), (1.0 + precision_xg_scol5[1]),(2.0 + precision_dt_scol5[1]), (3.0 + precision_lr_scol5[1]), (4.0 + precision_nb_scol5[1])])
#print("Iteration 2 Array:", precision_sam52)
precision_sam53 = list([test_sizes[5], precision_lr_scol5[2], precision_dt_scol5[2], precision_rf_scol5[2], precision_nb_scol5[2], precision_xg_scol5[2]])
precision_sam54 = list([test_sizes[5], precision_lr_scol5[3], precision_dt_scol5[3], precision_rf_scol5[3], precision_nb_scol5[3], precision_xg_scol5[3]])
precision_sam55 = list([test_sizes[5], precision_lr_scol5[4], precision_dt_scol5[4], precision_rf_scol5[4], precision_nb_scol5[4], precision_xg_scol5[4]])


precision_sam56 = list([test_sizes[5], precision_lr_scol5[5], precision_dt_scol5[5], precision_rf_scol5[5], precision_nb_scol5[5], precision_xg_scol5[5]])
precision_sam57 = list([test_sizes[5], precision_lr_scol5[6], precision_dt_scol5[6], precision_rf_scol5[6], precision_nb_scol5[6], precision_xg_scol5[6]])
precision_sam58 = list([test_sizes[5], precision_lr_scol5[7], precision_dt_scol5[7], precision_rf_scol5[7], precision_nb_scol5[7], precision_xg_scol5[7]])
precision_sam59 = list([test_sizes[5], precision_lr_scol5[8], precision_dt_scol5[8], precision_rf_scol5[8], precision_nb_scol5[8], precision_xg_scol5[8]])
precision_sam60 = list([test_sizes[5], precision_lr_scol5[9], precision_dt_scol5[9], precision_rf_scol5[9], precision_nb_scol5[9], precision_xg_scol5[9]])


# Recall - 6th test size
#recall_sam51b = list([recall_lr_scol5[0], recall_dt_scol5[0], recall_rf_scol5[0], recall_nb_scol5[0], recall_xg_scol5[0]])
recall_sam51 = list([test_sizes[5], recall_xg_scol5[0], recall_rf_scol5[0], recall_dt_scol5[0], recall_lr_scol5[0], recall_nb_scol5[0]])
#recall_sam51 = list([(test_sizes[5] - test_sizes[5]), (0.0 + recall_rf_scol5[0]), (1.0 + recall_xg_scol5[0]),
#                        (2.0 + recall_dt_scol5[0]), (3.0 + recall_lr_scol5[0]), (4.0 + recall_nb_scol5[0])])
print("Iteration 1 Array:", recall_sam51)
# recall_sam51 = list([recall_lr_scol5[1], recall_dt_scol5[1], recall_rf_scol5[1], recall_nb_scol5[1], recall_xg_scol5[1]])
recall_sam52 = list([test_sizes[5], recall_xg_scol5[1], recall_rf_scol5[1], recall_dt_scol5[1],  recall_lr_scol5[1], recall_nb_scol5[1]])
#recall_sam52 = list([(test_sizes[5] - test_sizes[5]), (0.0 + recall_rf_scol5[1]), (1.0 + recall_xg_scol5[1]),
#                        (2.0 + recall_dt_scol5[1]), (3.0 + recall_lr_scol5[1]), (4.0 + recall_nb_scol5[1])])
print("Iteration 2 Array:", recall_sam52)

recall_sam53 = list([test_sizes[5], recall_lr_scol5[2], recall_dt_scol5[2], recall_rf_scol5[2], recall_nb_scol5[2], recall_xg_scol5[2]] )
recall_sam54 = list([test_sizes[5], recall_lr_scol5[3], recall_dt_scol5[3], recall_rf_scol5[3], recall_nb_scol5[3], recall_xg_scol5[3]] )
recall_sam55 = list([test_sizes[5], recall_lr_scol5[4], recall_dt_scol5[4], recall_rf_scol5[4], recall_nb_scol5[4], recall_xg_scol5[4]] )
recall_sam56 = list([test_sizes[5], recall_lr_scol5[5], recall_dt_scol5[5], recall_rf_scol5[5], recall_nb_scol5[5], recall_xg_scol5[5]] )
recall_sam57 = list([test_sizes[5], recall_lr_scol5[6], recall_dt_scol5[6], recall_rf_scol5[6], recall_nb_scol5[6], recall_xg_scol5[6]] )
recall_sam58 = list([test_sizes[5], recall_lr_scol5[7], recall_dt_scol5[7], recall_rf_scol5[7], recall_nb_scol5[7], recall_xg_scol5[7]] )
recall_sam59 = list([test_sizes[5], recall_lr_scol5[8], recall_dt_scol5[8], recall_rf_scol5[8], recall_nb_scol5[8], recall_xg_scol5[8]] )
recall_sam60 = list([test_sizes[5], recall_lr_scol5[9], recall_dt_scol5[9], recall_rf_scol5[9], recall_nb_scol5[9], recall_xg_scol5[9]] )
'''
'''
precision_lr_scol5_avg = (precision_lr_scol5[0] + precision_lr_scol5[1] + precision_lr_scol5[2] + precision_lr_scol5[3] + precision_lr_scol5[4] + precision_lr_scol5[5] + precision_lr_scol5[6] + precision_lr_scol5[7] + precision_lr_scol5[8] + precision_lr_scol5[9]) / 10
precision_dt_scol5_avg = (precision_dt_scol5[0] + precision_dt_scol5[1] + precision_dt_scol5[2] + precision_dt_scol5[3] + precision_dt_scol5[4] + precision_dt_scol5[5] + precision_dt_scol5[6] + precision_dt_scol5[7] + precision_dt_scol5[8] + precision_dt_scol5[9]) / 10
precision_rf_scol5_avg = (precision_rf_scol5[0] + precision_rf_scol5[1] + precision_rf_scol5[2] + precision_rf_scol5[3] + precision_rf_scol5[4] + precision_rf_scol5[5] + precision_rf_scol5[6] + precision_rf_scol5[7] + precision_rf_scol5[8] + precision_rf_scol5[9]) / 10
precision_nb_scol5_avg = (precision_nb_scol5[0] + precision_nb_scol5[1] + precision_nb_scol5[2] + precision_nb_scol5[3] + precision_nb_scol5[4] + precision_nb_scol5[5] + precision_nb_scol5[6] + precision_nb_scol5[7] + precision_nb_scol5[8] + precision_nb_scol5[9]) / 10
precision_xg_scol5_avg = (precision_xg_scol5[0] + precision_xg_scol5[1] + precision_xg_scol5[2] + precision_xg_scol5[3] + precision_xg_scol5[4] + precision_xg_scol5[5] + precision_xg_scol5[6] + precision_xg_scol5[7] + precision_xg_scol5[8] + precision_xg_scol5[9]) / 10

recall_lr_scol5_avg = (recall_lr_scol5[0] + recall_lr_scol5[1] + recall_lr_scol5[2] + recall_lr_scol5[3] + recall_lr_scol5[4] + recall_lr_scol5[5] + recall_lr_scol5[6] + recall_lr_scol5[7] + recall_lr_scol5[8] + recall_lr_scol5[9]) / 10
recall_dt_scol5_avg = (recall_dt_scol5[0] + recall_dt_scol5[1] + recall_dt_scol5[2] + recall_dt_scol5[3] + recall_dt_scol5[4] + recall_dt_scol5[5] + recall_dt_scol5[6] + recall_dt_scol5[7] + recall_dt_scol5[8] + recall_dt_scol5[9]) / 10
recall_rf_scol5_avg = (recall_rf_scol5[0] + recall_rf_scol5[1] + recall_rf_scol5[2] + recall_rf_scol5[3] + recall_rf_scol5[4] + recall_rf_scol5[5] + recall_rf_scol5[6] + recall_rf_scol5[7] + recall_rf_scol5[8] + recall_rf_scol5[9]) / 10
recall_nb_scol5_avg = (recall_nb_scol5[0] + recall_nb_scol5[1] + recall_nb_scol5[2] + recall_nb_scol5[3] + recall_nb_scol5[4] + recall_nb_scol5[5] + recall_nb_scol5[6] + recall_nb_scol5[7] + recall_nb_scol5[8] + recall_nb_scol5[9]) / 10
recall_xg_scol5_avg = (recall_xg_scol5[0] + recall_xg_scol5[1] + recall_xg_scol5[2] + recall_xg_scol5[3] + recall_xg_scol5[4] + recall_xg_scol5[5] + recall_xg_scol5[6] + recall_xg_scol5[7] + recall_xg_scol5[8] + recall_xg_scol5[9]) / 10
'''

precision_lr_scol5_avg = (precision_lr_scol5[0] + precision_lr_scol5[1] + precision_lr_scol5[2] + precision_lr_scol5[3] + precision_lr_scol5[4]) / 5
precision_dt_scol5_avg = (precision_dt_scol5[0] + precision_dt_scol5[1] + precision_dt_scol5[2] + precision_dt_scol5[3] + precision_dt_scol5[4]) / 5
precision_rf_scol5_avg = (precision_rf_scol5[0] + precision_rf_scol5[1] + precision_rf_scol5[2] + precision_rf_scol5[3] + precision_rf_scol5[4]) / 5
precision_nb_scol5_avg = (precision_nb_scol5[0] + precision_nb_scol5[1] + precision_nb_scol5[2] + precision_nb_scol5[3] + precision_nb_scol5[4]) / 5
precision_xg_scol5_avg = (precision_xg_scol5[0] + precision_xg_scol5[1] + precision_xg_scol5[2] + precision_xg_scol5[3] + precision_xg_scol5[4]) / 5

recall_lr_scol5_avg = (recall_lr_scol5[0] + recall_lr_scol5[1] + recall_lr_scol5[2] + recall_lr_scol5[3] + recall_lr_scol5[4]) / 5
recall_dt_scol5_avg = (recall_dt_scol5[0] + recall_dt_scol5[1] + recall_dt_scol5[2] + recall_dt_scol5[3] + recall_dt_scol5[4]) / 5
recall_rf_scol5_avg = (recall_rf_scol5[0] + recall_rf_scol5[1] + recall_rf_scol5[2] + recall_rf_scol5[3] + recall_rf_scol5[4]) / 5
recall_nb_scol5_avg = (recall_nb_scol5[0] + recall_nb_scol5[1] + recall_nb_scol5[2] + recall_nb_scol5[3] + recall_nb_scol5[4]) / 5
recall_xg_scol5_avg = (recall_xg_scol5[0] + recall_xg_scol5[1] + recall_xg_scol5[2] + recall_xg_scol5[3] + recall_xg_scol5[4]) / 5

avg_precision_sam5 = list([test_sizes[5], precision_lr_scol5_avg, precision_dt_scol5_avg, precision_rf_scol5_avg, precision_nb_scol5_avg, precision_xg_scol5_avg])
avg_recall_sam5 = list([test_sizes[5], recall_lr_scol5_avg, recall_dt_scol5_avg, recall_rf_scol5_avg, recall_nb_scol5_avg, recall_xg_scol5_avg])

# Test Size #7 - 65%
x_tfidf = tfidf_vect.fit_transform(df["lemmatized"])

probs_lr_scol6 = []
f1_lr_scol6 = []
rocauc_lr_scol6 = []
recall_lr_scol6 = []
precision_lr_scol6 = []
accuracy_lr_scol6 = []

probs_dt_scol6 = []
f1_dt_scol6 = []
rocauc_dt_scol6 = []
recall_dt_scol6 = []
precision_dt_scol6 = []
accuracy_dt_scol6 = []

probs_nb_scol6 = []
f1_nb_scol6 = []
rocauc_nb_scol6 = []
recall_nb_scol6 = []
precision_nb_scol6 = []
accuracy_nb_scol6 = []

probs_xg_scol6 = []
f1_xg_scol6 = []
rocauc_xg_scol6 = []
recall_xg_scol6 = []
precision_xg_scol6 = []
accuracy_xg_scol6 = []

probs_rf_scol6 = []
f1_rf_scol6 = []
rocauc_rf_scol6 = []
recall_rf_scol6 = []
precision_rf_scol6 = []
accuracy_rf_scol6 = []

train_values6 = np.array([0.030, 0.065, 0.099, 0.132, 0.150])
# Other remaining values: 0.175, 0.200, 0.250, 0.330
# 0.100, 0.125, 0.69, 0.195, 0.215, 0.797, 0.800, 0.900
test_sizes = np.array([0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95])
# train_sizes = round(train_list, 3)
for i6 in train_values6:
    # train_sizes = train_sizes + i
    # random_portion = round(np.random.uniform(0.2, 0.5), 3)
    # print(random_portion)
    x_train, x_test, y_train, y_test = train_test_split(x_nm, y_nm, train_size=i6, test_size=test_sizes[6])

    start1 = time.time()
    log = LogisticRegression(penalty='l2', random_state=0, solver='lbfgs', multi_class='auto', max_iter=500)
    model_lr = log.fit(x_train, y_train)
    probs_lr = model_lr.predict_proba(x_test)[:, 1]
    probs_lr_scol6.append(probs_lr)
    ly_prediction = log.predict(x_test)
    fly = f1_score(ly_prediction, y_test)
    f1_lr_scol6.append(fly)
    rocauc_lr = roc_auc_score(y_test, ly_prediction)
    rocauc_lr_scol6.append(rocauc_lr)
    recalls_lr = recall_score(y_test, ly_prediction)
    recall_lr_scol6.append(recalls_lr)
    precisions_lr = precision_score(y_test, ly_prediction)
    precision_lr_scol6.append(precisions_lr)
    accuracys_lr = accuracy_score(y_test, ly_prediction)
    accuracy_lr_scol6.append(accuracys_lr)
    print("===Logistic Regression with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[6], i6)
    lr_end = time.time()
    print('Logistic F1-score', fly * 100)
    print('Logistic ROCAUC score:', rocauc_lr * 100)
    print('Logistic Recall score:', recalls_lr * 100)
    print('Logistic Precision Score:', precisions_lr * 100)
    print('Logistic Confusion Matrix', confusion_matrix(y_test, ly_prediction), "\n")
    print('Logistic Classification', classification_report(y_test, ly_prediction), "\n")
    print('Logistic Accuracy Score', accuracys_lr * 100)
    print("Execution Time for Logistic Regression NearMiss: ", lr_end - start1, "seconds")

    start2 = time.time()
    from sklearn.tree import DecisionTreeClassifier

    DCT = DecisionTreeClassifier()
    model_dt = DCT.fit(x_train, y_train)
    probs_dt = model_dt.predict_proba(x_test)[:, 1]
    probs_dt_scol6.append(probs_dt)
    dct_pred = DCT.predict(x_test)
    fdct = f1_score(dct_pred, y_test)
    f1_dt_scol6.append(fdct)
    rocauc_dt = roc_auc_score(y_test, dct_pred)
    rocauc_dt_scol6.append(rocauc_dt)
    recalls_dt = recall_score(y_test, dct_pred)
    recall_dt_scol6.append(recalls_dt)
    precisions_dt = precision_score(y_test, dct_pred)
    precision_dt_scol6.append(precisions_dt)
    accuracys_dt = accuracy_score(y_test, dct_pred)
    accuracy_dt_scol6.append(accuracys_dt)
    print("===DecisionTreeClassifier with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[6], i6)
    dt_end = time.time()
    print('DCT F1-score', fdct * 100)
    print('DCT ROCAUC score:', rocauc_dt * 100)
    print('DCT Recall score:', recalls_dt * 100)
    print('DCT Precision Score:', precisions_dt * 100)
    print('DCT Confusion Matrix', confusion_matrix(y_test, dct_pred), "\n")
    print('DCT Classification', classification_report(y_test, dct_pred), "\n")
    print('DCT Accuracy Score', accuracys_dt * 100)
    print("Execution Time for Decision Tree NearMiss: ", dt_end - start2, "seconds")

    from sklearn.naive_bayes import MultinomialNB

    start3 = time.time()
    Naive = MultinomialNB()
    model_nb = Naive.fit(x_train, y_train)
    probs_nb = model_nb.predict_proba(x_test)[:, 1]
    probs_nb_scol6.append(probs_nb)
    # predict the labels on validation dataset
    ny_pred = Naive.predict(x_test)
    fnb = f1_score(ny_pred, y_test)
    f1_nb_scol6.append(fnb)
    rocauc_nb = roc_auc_score(y_test, ny_pred)
    rocauc_nb_scol6.append(rocauc_nb)
    recalls_nb = recall_score(y_test, ny_pred)
    recall_nb_scol6.append(recalls_nb)
    precisions_nb = precision_score(y_test, ny_pred)
    precision_nb_scol6.append(precisions_nb)
    accuracys_nb = accuracy_score(y_test, ny_pred)
    accuracy_nb_scol6.append(accuracys_nb)
    nb_end = time.time()
    # Use accuracy_score function to get the accuracy
    print("===Naive Bayes with TfidfVectorizer Imabalanced - 2010", df1_l, test_sizes[6], i6)
    print('Naive F1-score', fnb * 100)
    print('Naive ROCAUC score:', rocauc_nb * 100)
    print('Naive Recall score:', recalls_nb * 100)
    print('Naive Precision Score:', precisions_nb * 100)
    print('Naive Confusion Matrix', confusion_matrix(y_test, ny_pred), "\n")
    print('Naive Classification', classification_report(y_test, ny_pred), "\n")
    print('Naive Accuracy Score', accuracys_nb * 100)
    print("Execution Time for Naive Bayes NearMiss: ", nb_end - start3, "seconds")

    # XGBoost Classifier

    start4 = time.time()
    from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

    xgb_model = XGBClassifier().fit(x_train, y_train)
    probs_xg = xgb_model.predict_proba(x_test)[:, 1]
    probs_xg_scol6.append(probs_xg)
    # predict
    xgb_y_predict = xgb_model.predict(x_test)
    fxg = f1_score(xgb_y_predict, y_test)
    f1_xg_scol6.append(fxg)
    rocauc_xg = roc_auc_score(xgb_y_predict, y_test)
    rocauc_xg_scol6.append(rocauc_xg)
    recall_xg = recall_score(xgb_y_predict, y_test)
    recall_xg_scol6.append(recall_xg)
    precisions_xg = precision_score(xgb_y_predict, y_test)
    precision_xg_scol6.append(precisions_xg)
    accuracys_xg = accuracy_score(xgb_y_predict, y_test)
    accuracy_xg_scol6.append(accuracys_xg)
    xg_end = time.time()
    print("===XGB with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[6], i6)
    print('XGB F1-Score', fxg * 100)
    print('XGB ROCAUC Score:', rocauc_xg * 100)
    print('XGB Recall score:', recall_xg * 100)
    print('XGB Precision Score:', precisions_xg * 100)
    print('XGB Confusion Matrix', confusion_matrix(xgb_y_predict, y_test), "\n")
    print('XGB Classification', classification_report(xgb_y_predict, y_test), "\n")
    print('XGB Accuracy Score', accuracys_nb * 100)
    print("Execution Time for XGBoost Classifier NearMiss: ", xg_end - start4, "seconds")

    # Random Forest Classifier
    from sklearn.ensemble import RandomForestClassifier

    start5 = time.time()
    rfc_model = RandomForestClassifier(n_estimators=1000, random_state=0).fit(x_train, y_train)
    probs_rf = rfc_model.predict_proba(x_test)[:, 1]
    probs_rf_scol6.append(probs_rf)
    rfc_pred = rfc_model.predict(x_test)
    frfc = f1_score(rfc_pred, y_test)
    f1_rf_scol6.append(frfc)
    rocauc_rf = roc_auc_score(y_test, rfc_pred)
    rocauc_rf_scol6.append(rocauc_rf)
    recalls_rf = recall_score(rfc_pred, y_test)
    recall_rf_scol6.append(recalls_rf)
    precisions_rf = precision_score(rfc_pred, y_test)
    precision_rf_scol6.append(precisions_rf)
    accuracys_rf = accuracy_score(rfc_pred, y_test)
    accuracy_rf_scol6.append(accuracys_rf)
    rf_end = time.time()
    print("====RandomForest with Tfidf NearMiss 2010", df1_l, test_sizes[6], i6)
    print('RFC F1 score', frfc * 100)
    print('RFC ROCAUC Score:', rocauc_rf * 100)
    print('RFC Recall score:', recalls_rf * 100)
    print('RFC Precision Score:', precisions_rf * 100)
    print('RFC Confusion Matrix', confusion_matrix(y_test, rfc_pred), "\n")
    print('RFC Classification', classification_report(y_test, rfc_pred), "\n")
    print('RFC Accuracy Score', accuracys_rf * 100)
    print("Execution Time for Random Forest Classifier NearMiss: ", rf_end - start5, "seconds")

    print("Array of Prob Scores LR-Sam:", test_sizes[6], ":", probs_lr_scol6)
    print("Array of F1 Scores LR-Sam:", test_sizes[6], ":", f1_lr_scol6)
    print("Array of ROCAUC Scores LR-Sam:", test_sizes[6], ":", rocauc_lr_scol6)
    print("Array of Recall Scores LR-Sam:", test_sizes[6], ":", recall_lr_scol6)
    print("Array of Precision Scores LR-Sam:", test_sizes[6], ":", precision_lr_scol6)
    print("Array of Accuracy Scores LR-Sam:", test_sizes[6], ":", accuracy_lr_scol6)

    print("Array of Prob Scores DT-Sam:", test_sizes[6], ":", probs_dt_scol6)
    print("Array of F1 Scores DT-Sam:", test_sizes[6], ":", f1_dt_scol6)
    print("Array of ROCAUC Scores DT-Sam:", test_sizes[6], ":", rocauc_dt_scol6)
    print("Array of Recall Scores DT-Sam:", test_sizes[6], ":", recall_dt_scol6)
    print("Array of Precision Scores DT-Sam:", test_sizes[6], ":", precision_dt_scol6)
    print("Array of Accuracy Scores DT-Sam:", test_sizes[6], ":", accuracy_dt_scol6)

    print("Array of Prob Scores NB-Sam:", test_sizes[6], ":", probs_nb_scol6)
    print("Array of F1 Scores NB-Sam:", test_sizes[6], ":", f1_nb_scol6)
    print("Array of ROCAUC Scores NB-Sam:", test_sizes[6], ":", rocauc_nb_scol6)
    print("Array of Recall Scores NB-Sam:", test_sizes[6], ":", recall_nb_scol6)
    print("Array of Precision Scores NB-Sam:", test_sizes[6], ":", precision_nb_scol6)
    print("Array of Accuracy Scores NB-Sam:", test_sizes[6], ":", accuracy_nb_scol6)

    print("Array of Prob Scores XG-Sam:", test_sizes[6], ":", probs_xg_scol6)
    print("Array of F1 Scores XG-Sam:", test_sizes[6], ":", f1_xg_scol6)
    print("Array of ROCAUC Scores XG-Sam:", test_sizes[6], ":", rocauc_xg_scol6)
    print("Array of Recall Scores XG-Sam:", test_sizes[6], ":", recall_xg_scol6)
    print("Array of Precision Scores XG-Sam:", test_sizes[6], ":", precision_xg_scol6)
    print("Array of Accuracy Scores XG-Sam:", test_sizes[6], ":", accuracy_xg_scol6)

    print("Array of Prob Scores RF-Sam:", test_sizes[6], ":", probs_rf_scol6)
    print("Array of F1 Scores RF-Sam:", test_sizes[6], ":", f1_rf_scol6)
    print("Array of ROCAUC Scores RF-Sam:", test_sizes[6], ":", rocauc_rf_scol6)
    print("Array of Recall Scores RF-Sam:", test_sizes[6], ":", recall_rf_scol6)
    print("Array of Precision Scores RF-Sam:", test_sizes[6], ":", precision_rf_scol6)
    print("Array of Accuracy Scores RF-Sam:", test_sizes[6], ":", accuracy_rf_scol6)

'''
# Precision - 7th test size 
#precision_sam61b = list([precision_lr_scol6[0], precision_dt_scol6[0], precision_rf_scol6[0], precision_nb_scol6[0], precision_xg_scol6[0]])
precision_sam61 = list([test_sizes[6], precision_xg_scol6[0], precision_rf_scol6[0], precision_dt_scol6[0], precision_lr_scol6[0], precision_nb_scol6[0]])
#precision_sam61 = list([(test_sizes[6] - test_sizes[6]), (0.0 + precision_rf_scol6[0]), (1.0 + precision_xg_scol6[0]), (2.0 + precision_dt_scol6[0]), (3.0 + precision_lr_scol6[0]), (4.0 + precision_nb_scol6[0])])
print("Iteration 1 Array:", precision_sam61)
# precision_sam62 = list([precision_lr_scol6[1], precision_dt_scol6[1], precision_rf_scol6[1], precision_nb_scol6[1], precision_xg_scol6[1]])
precision_sam62 = list([test_sizes[6], precision_xg_scol6[1], precision_rf_scol6[1], precision_dt_scol6[1],  precision_lr_scol6[1], precision_nb_scol6[1]])
#precision_sam62 = list([(test_sizes[6] - test_sizes[6]), (0.0 + precision_rf_scol6[1]), (1.0 + precision_xg_scol6[1]), (2.0 + precision_dt_scol6[1]), (3.0 + precision_lr_scol6[1]), (4.0 + precision_nb_scol6[1])])
print("Iteration 2 Array:", precision_sam62)

precision_sam63 = list([test_sizes[6], precision_lr_scol6[2], precision_dt_scol6[2], precision_rf_scol6[2], precision_nb_scol6[2], precision_xg_scol6[2]] )
precision_sam64 = list([test_sizes[6], precision_lr_scol6[3], precision_dt_scol6[3], precision_rf_scol6[3], precision_nb_scol6[3], precision_xg_scol6[3]] )
precision_sam65 = list([test_sizes[6], precision_lr_scol6[4], precision_dt_scol6[4], precision_rf_scol6[4], precision_nb_scol6[4], precision_xg_scol6[4]] )
precision_sam66 = list([test_sizes[6], precision_lr_scol6[5], precision_dt_scol6[5], precision_rf_scol6[5], precision_nb_scol6[5], precision_xg_scol6[5]] )
precision_sam67 = list([test_sizes[6], precision_lr_scol6[6], precision_dt_scol6[6], precision_rf_scol6[6], precision_nb_scol6[6], precision_xg_scol6[6]] )
precision_sam68 = list([test_sizes[6], precision_lr_scol6[7], precision_dt_scol6[7], precision_rf_scol6[7], precision_nb_scol6[7], precision_xg_scol6[7]] )
precision_sam69 = list([test_sizes[6], precision_lr_scol6[8], precision_dt_scol6[8], precision_rf_scol6[8], precision_nb_scol6[8], precision_xg_scol6[8]] )
precision_sam70 = list([test_sizes[6], precision_lr_scol6[9], precision_dt_scol6[9], precision_rf_scol6[9], precision_nb_scol6[9], precision_xg_scol6[9]] )


# Recall - 7th test size
#recall_sam61b = list([recall_lr_scol6[0], recall_dt_scol6[0], recall_rf_scol6[0], recall_nb_scol6[0], recall_xg_scol6[0]])
recall_sam61 = list([test_sizes[6], recall_xg_scol6[0], recall_rf_scol6[0], recall_dt_scol6[0], recall_lr_scol6[0], recall_nb_scol6[0]])
#recall_sam61 = list([(test_sizes[6] - test_sizes[6]), (0.0 + recall_rf_scol6[0]), (1.0 + recall_xg_scol6[0]),(2.0 + recall_dt_scol6[0]), (3.0 + recall_lr_scol6[0]), (4.0 + recall_nb_scol6[0])])
print("Iteration 1 Array:", recall_sam61)
# recall_sam62 = list([recall_lr_scol6[1], recall_dt_scol6[1], recall_rf_scol6[1], recall_nb_scol6[1], recall_xg_scol6[1]])
recall_sam62 = list([test_sizes[6], recall_xg_scol6[1], recall_rf_scol6[1], recall_dt_scol6[1],  recall_lr_scol6[1], recall_nb_scol6[1]])
#recall_sam62 = list([(test_sizes[6] - test_sizes[6]), (0.0 + recall_rf_scol6[1]), (1.0 + recall_xg_scol6[1]),(2.0 + recall_dt_scol6[1]), (3.0 + recall_lr_scol6[1]), (4.0 + recall_nb_scol6[1])])
#print("Iteration 2 Array:", recall_sam62)
recall_sam63 = list([test_sizes[6], recall_lr_scol6[2], recall_dt_scol6[2], recall_rf_scol6[2], recall_nb_scol6[2], recall_xg_scol6[2]] )
recall_sam64 = list([test_sizes[6], recall_lr_scol6[3], recall_dt_scol6[3], recall_rf_scol6[3], recall_nb_scol6[3], recall_xg_scol6[3]] )
recall_sam65 = list([test_sizes[6], recall_lr_scol6[4], recall_dt_scol6[4], recall_rf_scol6[4], recall_nb_scol6[4], recall_xg_scol6[4]] )
recall_sam66 = list([test_sizes[6], recall_lr_scol6[5], recall_dt_scol6[5], recall_rf_scol6[5], recall_nb_scol6[5], recall_xg_scol6[5]] )
recall_sam67 = list([test_sizes[6], recall_lr_scol6[6], recall_dt_scol6[6], recall_rf_scol6[6], recall_nb_scol6[6], recall_xg_scol6[6]] )
recall_sam68 = list([test_sizes[6], recall_lr_scol6[7], recall_dt_scol6[7], recall_rf_scol6[7], recall_nb_scol6[7], recall_xg_scol6[7]] )
recall_sam69 = list([test_sizes[6], recall_lr_scol6[8], recall_dt_scol6[8], recall_rf_scol6[8], recall_nb_scol6[8], recall_xg_scol6[8]] )
recall_sam70 = list([test_sizes[6], recall_lr_scol6[9], recall_dt_scol6[9], recall_rf_scol6[9], recall_nb_scol6[9], recall_xg_scol6[9]] )
'''
'''
precision_lr_scol6_avg = (precision_lr_scol6[0] + precision_lr_scol6[1] + precision_lr_scol6[2] + precision_lr_scol6[3] + precision_lr_scol6[4] + precision_lr_scol6[5] + precision_lr_scol6[6] + precision_lr_scol6[7] + precision_lr_scol6[8] + precision_lr_scol6[9]) / 10
precision_dt_scol6_avg = (precision_dt_scol6[0] + precision_dt_scol6[1] + precision_dt_scol6[2] + precision_dt_scol6[3] + precision_dt_scol6[4] + precision_dt_scol6[5] + precision_dt_scol6[6] + precision_dt_scol6[7] + precision_dt_scol6[8] + precision_dt_scol6[9]) / 10
precision_rf_scol6_avg = (precision_rf_scol6[0] + precision_rf_scol6[1] + precision_rf_scol6[2] + precision_rf_scol6[3] + precision_rf_scol6[4] + precision_rf_scol6[5] + precision_rf_scol6[6] + precision_rf_scol6[7] + precision_rf_scol6[8] + precision_rf_scol6[9]) / 10
precision_nb_scol6_avg = (precision_nb_scol6[0] + precision_nb_scol6[1] + precision_nb_scol6[2] + precision_nb_scol6[3] + precision_nb_scol6[4] + precision_nb_scol6[5] + precision_nb_scol6[6] + precision_nb_scol6[7] + precision_nb_scol6[8] + precision_nb_scol6[9]) / 10
precision_xg_scol6_avg = (precision_xg_scol6[0] + precision_xg_scol6[1] + precision_xg_scol6[2] + precision_xg_scol6[3] + precision_xg_scol6[4] + precision_xg_scol6[5] + precision_xg_scol6[6] + precision_xg_scol6[7] + precision_xg_scol6[8] + precision_xg_scol6[9]) / 10

recall_lr_scol6_avg = (recall_lr_scol6[0] + recall_lr_scol6[1] + recall_lr_scol6[2] + recall_lr_scol6[3] + recall_lr_scol6[4] + recall_lr_scol6[5] + recall_lr_scol6[6] + recall_lr_scol6[7] + recall_lr_scol6[8] + recall_lr_scol6[9]) / 10
recall_dt_scol6_avg = (recall_dt_scol6[0] + recall_dt_scol6[1] + recall_dt_scol6[2] + recall_dt_scol6[3] + recall_dt_scol6[4] + recall_dt_scol6[5] + recall_dt_scol6[6] + recall_dt_scol6[7] + recall_dt_scol6[8] + recall_dt_scol6[9]) / 10
recall_rf_scol6_avg = (recall_rf_scol6[0] + recall_rf_scol6[1] + recall_rf_scol6[2] + recall_rf_scol6[3] + recall_rf_scol6[4] + recall_rf_scol6[5] + recall_rf_scol6[6] + recall_rf_scol6[7] + recall_rf_scol6[8] + recall_rf_scol6[9]) / 10
recall_nb_scol6_avg = (recall_nb_scol6[0] + recall_nb_scol6[1] + recall_nb_scol6[2] + recall_nb_scol6[3] + recall_nb_scol6[4] + recall_nb_scol6[5] + recall_nb_scol6[6] + recall_nb_scol6[7] + recall_nb_scol6[8] + recall_nb_scol6[9]) / 10
recall_xg_scol6_avg = (recall_xg_scol6[0] + recall_xg_scol6[1] + recall_xg_scol6[2] + recall_xg_scol6[3] + recall_xg_scol6[4] + recall_xg_scol6[5] + recall_xg_scol6[6] + recall_xg_scol6[7] + recall_xg_scol6[8] + recall_xg_scol6[9]) / 10
'''

precision_lr_scol6_avg = (precision_lr_scol6[0] + precision_lr_scol6[1] + precision_lr_scol6[2] + precision_lr_scol6[3] + precision_lr_scol6[4]) / 5
precision_dt_scol6_avg = (precision_dt_scol6[0] + precision_dt_scol6[1] + precision_dt_scol6[2] + precision_dt_scol6[3] + precision_dt_scol6[4]) / 5
precision_rf_scol6_avg = (precision_rf_scol6[0] + precision_rf_scol6[1] + precision_rf_scol6[2] + precision_rf_scol6[3] + precision_rf_scol6[4]) / 5
precision_nb_scol6_avg = (precision_nb_scol6[0] + precision_nb_scol6[1] + precision_nb_scol6[2] + precision_nb_scol6[3] + precision_nb_scol6[4]) / 5
precision_xg_scol6_avg = (precision_xg_scol6[0] + precision_xg_scol6[1] + precision_xg_scol6[2] + precision_xg_scol6[3] + precision_xg_scol6[4]) / 5

recall_lr_scol6_avg = (recall_lr_scol6[0] + recall_lr_scol6[1] + recall_lr_scol6[2] + recall_lr_scol6[3] + recall_lr_scol6[4]) / 5
recall_dt_scol6_avg = (recall_dt_scol6[0] + recall_dt_scol6[1] + recall_dt_scol6[2] + recall_dt_scol6[3] + recall_dt_scol6[4]) / 5
recall_rf_scol6_avg = (recall_rf_scol6[0] + recall_rf_scol6[1] + recall_rf_scol6[2] + recall_rf_scol6[3] + recall_rf_scol6[4]) / 5
recall_nb_scol6_avg = (recall_nb_scol6[0] + recall_nb_scol6[1] + recall_nb_scol6[2] + recall_nb_scol6[3] + recall_nb_scol6[4]) / 5
recall_xg_scol6_avg = (recall_xg_scol6[0] + recall_xg_scol6[1] + recall_xg_scol6[2] + recall_xg_scol6[3] + recall_xg_scol6[4]) / 5


avg_precision_sam6 = list([test_sizes[6], precision_lr_scol6_avg, precision_dt_scol6_avg, precision_rf_scol6_avg, precision_nb_scol6_avg, precision_xg_scol6_avg])
avg_recall_sam6 = list([test_sizes[6], recall_lr_scol6_avg, recall_dt_scol6_avg, recall_rf_scol6_avg, recall_nb_scol6_avg, recall_xg_scol6_avg])

# Test Size #8 - 75%
x_tfidf = tfidf_vect.fit_transform(df["lemmatized"])

probs_lr_scol7 = []
f1_lr_scol7 = []
rocauc_lr_scol7 = []
recall_lr_scol7 = []
precision_lr_scol7 = []
accuracy_lr_scol7 = []

probs_dt_scol7 = []
f1_dt_scol7 = []
rocauc_dt_scol7 = []
recall_dt_scol7 = []
precision_dt_scol7 = []
accuracy_dt_scol7 = []

probs_nb_scol7 = []
f1_nb_scol7 = []
rocauc_nb_scol7 = []
recall_nb_scol7 = []
precision_nb_scol7 = []
accuracy_nb_scol7 = []

probs_xg_scol7 = []
f1_xg_scol7 = []
rocauc_xg_scol7 = []
recall_xg_scol7 = []
precision_xg_scol7 = []
accuracy_xg_scol7 = []

probs_rf_scol7 = []
f1_rf_scol7 = []
rocauc_rf_scol7 = []
recall_rf_scol7 = []
precision_rf_scol7 = []
accuracy_rf_scol7 = []

train_values7 = np.array([0.023, 0.056, 0.076, 0.104, 0.113])
# Other remaining values: 0.144, 0.175, 0.187, 0.200, 0.225
# 0.100, 0.125, 0.169, 0.195, 0.215, 0.797, 0.800, 0.900
test_sizes = np.array([0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95])
# train_sizes = round(train_list, 3)
for i7 in train_values7:
    # train_sizes = train_sizes + i
    # random_portion = round(np.random.uniform(0.2, 0.5), 3)
    # print(random_portion)
    x_train, x_test, y_train, y_test = train_test_split(x_nm, y_nm, train_size=i7, test_size=test_sizes[7])

    start1 = time.time()
    log = LogisticRegression(penalty='l2', random_state=0, solver='lbfgs', multi_class='auto', max_iter=500)
    model_lr = log.fit(x_train, y_train)
    probs_lr = model_lr.predict_proba(x_test)[:, 1]
    probs_lr_scol7.append(probs_lr)
    ly_prediction = log.predict(x_test)
    fly = f1_score(ly_prediction, y_test)
    f1_lr_scol7.append(fly)
    rocauc_lr = roc_auc_score(y_test, ly_prediction)
    rocauc_lr_scol7.append(rocauc_lr)
    recalls_lr = recall_score(y_test, ly_prediction)
    recall_lr_scol7.append(recalls_lr)
    precisions_lr = precision_score(y_test, ly_prediction)
    precision_lr_scol7.append(precisions_lr)
    accuracys_lr = accuracy_score(y_test, ly_prediction)
    accuracy_lr_scol7.append(accuracys_lr)
    print("===Logistic Regression with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[7], i7)
    lr_end = time.time()
    print('Logistic F1-score', fly * 100)
    print('Logistic ROCAUC score:', rocauc_lr * 100)
    print('Logistic Recall score:', recalls_lr * 100)
    print('Logistic Precision Score:', precisions_lr * 100)
    print('Logistic Confusion Matrix', confusion_matrix(y_test, ly_prediction), "\n")
    print('Logistic Classification', classification_report(y_test, ly_prediction), "\n")
    print('Logistic Accuracy Score', accuracys_lr * 100)
    print("Execution Time for Logistic Regression NearMiss: ", lr_end - start1, "seconds")

    start2 = time.time()
    from sklearn.tree import DecisionTreeClassifier

    DCT = DecisionTreeClassifier()
    model_dt = DCT.fit(x_train, y_train)
    probs_dt = model_dt.predict_proba(x_test)[:, 1]
    probs_dt_scol7.append(probs_dt)
    dct_pred = DCT.predict(x_test)
    fdct = f1_score(dct_pred, y_test)
    f1_dt_scol7.append(fdct)
    rocauc_dt = roc_auc_score(y_test, dct_pred)
    rocauc_dt_scol7.append(rocauc_dt)
    recalls_dt = recall_score(y_test, dct_pred)
    recall_dt_scol7.append(recalls_dt)
    precisions_dt = precision_score(y_test, dct_pred)
    precision_dt_scol7.append(precisions_dt)
    accuracys_dt = accuracy_score(y_test, dct_pred)
    accuracy_dt_scol7.append(accuracys_dt)
    print("===DecisionTreeClassifier with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[7], i7)
    dt_end = time.time()
    print('DCT F1-score', fdct * 100)
    print('DCT ROCAUC score:', rocauc_dt * 100)
    print('DCT Recall score:', recalls_dt * 100)
    print('DCT Precision Score:', precisions_dt * 100)
    print('DCT Confusion Matrix', confusion_matrix(y_test, dct_pred), "\n")
    print('DCT Classification', classification_report(y_test, dct_pred), "\n")
    print('DCT Accuracy Score', accuracys_dt * 100)
    print("Execution Time for Decision Tree NearMiss: ", dt_end - start2, "seconds")

    from sklearn.naive_bayes import MultinomialNB

    start3 = time.time()
    Naive = MultinomialNB()
    model_nb = Naive.fit(x_train, y_train)
    probs_nb = model_nb.predict_proba(x_test)[:, 1]
    probs_nb_scol7.append(probs_nb)
    # predict the labels on validation dataset
    ny_pred = Naive.predict(x_test)
    fnb = f1_score(ny_pred, y_test)
    f1_nb_scol7.append(fnb)
    rocauc_nb = roc_auc_score(y_test, ny_pred)
    rocauc_nb_scol7.append(rocauc_nb)
    recalls_nb = recall_score(y_test, ny_pred)
    recall_nb_scol7.append(recalls_nb)
    precisions_nb = precision_score(y_test, ny_pred)
    precision_nb_scol7.append(precisions_nb)
    accuracys_nb = accuracy_score(y_test, ny_pred)
    accuracy_nb_scol7.append(accuracys_nb)
    nb_end = time.time()
    # Use accuracy_score function to get the accuracy
    print("===Naive Bayes with TfidfVectorizer Imabalanced - 2010", df1_l, test_sizes[7], i7)
    print('Naive F1-score', fnb * 100)
    print('Naive ROCAUC score:', rocauc_nb * 100)
    print('Naive Recall score:', recalls_nb * 100)
    print('Naive Precision Score:', precisions_nb * 100)
    print('Naive Confusion Matrix', confusion_matrix(y_test, ny_pred), "\n")
    print('Naive Classification', classification_report(y_test, ny_pred), "\n")
    print('Naive Accuracy Score', accuracys_nb * 100)
    print("Execution Time for Naive Bayes NearMiss: ", nb_end - start3, "seconds")

    # XGBoost Classifier

    start4 = time.time()
    from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

    xgb_model = XGBClassifier().fit(x_train, y_train)
    probs_xg = xgb_model.predict_proba(x_test)[:, 1]
    probs_xg_scol7.append(probs_xg)
    # predict
    xgb_y_predict = xgb_model.predict(x_test)
    fxg = f1_score(xgb_y_predict, y_test)
    f1_xg_scol7.append(fxg)
    rocauc_xg = roc_auc_score(xgb_y_predict, y_test)
    rocauc_xg_scol7.append(rocauc_xg)
    recall_xg = recall_score(xgb_y_predict, y_test)
    recall_xg_scol7.append(recall_xg)
    precisions_xg = precision_score(xgb_y_predict, y_test)
    precision_xg_scol7.append(precisions_xg)
    accuracys_xg = accuracy_score(xgb_y_predict, y_test)
    accuracy_xg_scol7.append(accuracys_xg)
    xg_end = time.time()
    print("===XGB with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[7], i7)
    print('XGB F1-Score', fxg * 100)
    print('XGB ROCAUC Score:', rocauc_xg * 100)
    print('XGB Recall score:', recall_xg * 100)
    print('XGB Precision Score:', precisions_xg * 100)
    print('XGB Confusion Matrix', confusion_matrix(xgb_y_predict, y_test), "\n")
    print('XGB Classification', classification_report(xgb_y_predict, y_test), "\n")
    print('XGB Accuracy Score', accuracys_nb * 100)
    print("Execution Time for XGBoost Classifier NearMiss: ", xg_end - start4, "seconds")

    # Random Forest Classifier
    from sklearn.ensemble import RandomForestClassifier

    start5 = time.time()
    rfc_model = RandomForestClassifier(n_estimators=1000, random_state=0).fit(x_train, y_train)
    probs_rf = rfc_model.predict_proba(x_test)[:, 1]
    probs_rf_scol7.append(probs_rf)
    rfc_pred = rfc_model.predict(x_test)
    frfc = f1_score(rfc_pred, y_test)
    f1_rf_scol7.append(frfc)
    rocauc_rf = roc_auc_score(y_test, rfc_pred)
    rocauc_rf_scol7.append(rocauc_rf)
    recalls_rf = recall_score(rfc_pred, y_test)
    recall_rf_scol7.append(recalls_rf)
    precisions_rf = precision_score(rfc_pred, y_test)
    precision_rf_scol7.append(precisions_rf)
    accuracys_rf = accuracy_score(rfc_pred, y_test)
    accuracy_rf_scol7.append(accuracys_rf)
    rf_end = time.time()
    print("====RandomForest with Tfidf NearMiss 2010", df1_l, test_sizes[7], i7)
    print('RFC F1 score', frfc * 100)
    print('RFC ROCAUC Score:', rocauc_rf * 100)
    print('RFC Recall score:', recalls_rf * 100)
    print('RFC Precision Score:', precisions_rf * 100)
    print('RFC Confusion Matrix', confusion_matrix(y_test, rfc_pred), "\n")
    print('RFC Classification', classification_report(y_test, rfc_pred), "\n")
    print('RFC Accuracy Score', accuracys_rf * 100)
    print("Execution Time for Random Forest Classifier NearMiss: ", rf_end - start5, "seconds")

    print("Array of Prob Scores LR-Sam:", test_sizes[7], ":", probs_lr_scol7)
    print("Array of F1 Scores LR-Sam:", test_sizes[7], ":", f1_lr_scol7)
    print("Array of ROCAUC Scores LR-Sam:", test_sizes[7], ":", rocauc_lr_scol7)
    print("Array of Recall Scores LR-Sam:", test_sizes[7], ":", recall_lr_scol7)
    print("Array of Precision Scores LR-Sam:", test_sizes[7], ":", precision_lr_scol7)
    print("Array of Accuracy Scores LR-Sam:", test_sizes[7], ":", accuracy_lr_scol7)

    print("Array of Prob Scores DT-Sam:", test_sizes[7], ":", probs_dt_scol7)
    print("Array of F1 Scores DT-Sam:", test_sizes[7], ":", f1_dt_scol7)
    print("Array of ROCAUC Scores DT-Sam:", test_sizes[7], ":", rocauc_dt_scol7)
    print("Array of Recall Scores DT-Sam:", test_sizes[7], ":", recall_dt_scol7)
    print("Array of Precision Scores DT-Sam:", test_sizes[7], ":", precision_dt_scol7)
    print("Array of Accuracy Scores DT-Sam:", test_sizes[7], ":", accuracy_dt_scol7)

    print("Array of Prob Scores NB-Sam:", test_sizes[7], ":", probs_nb_scol7)
    print("Array of F1 Scores NB-Sam:", test_sizes[7], ":", f1_nb_scol7)
    print("Array of ROCAUC Scores NB-Sam:", test_sizes[7], ":", rocauc_nb_scol7)
    print("Array of Recall Scores NB-Sam:", test_sizes[7], ":", recall_nb_scol7)
    print("Array of Precision Scores NB-Sam:", test_sizes[7], ":", precision_nb_scol7)
    print("Array of Accuracy Scores NB-Sam:", test_sizes[7], ":", accuracy_nb_scol7)

    print("Array of Prob Scores XG-Sam:", test_sizes[7], ":", probs_xg_scol7)
    print("Array of F1 Scores XG-Sam:", test_sizes[7], ":", f1_xg_scol7)
    print("Array of ROCAUC Scores XG-Sam:", test_sizes[7], ":", rocauc_xg_scol7)
    print("Array of Recall Scores XG-Sam:", test_sizes[7], ":", recall_xg_scol7)
    print("Array of Precision Scores XG-Sam:", test_sizes[7], ":", precision_xg_scol7)
    print("Array of Accuracy Scores XG-Sam:", test_sizes[7], ":", accuracy_xg_scol7)

    print("Array of Prob Scores RF-Sam:", test_sizes[7], ":", probs_rf_scol7)
    print("Array of F1 Scores RF-Sam:", test_sizes[7], ":", f1_rf_scol7)
    print("Array of ROCAUC Scores RF-Sam:", test_sizes[7], ":", rocauc_rf_scol7)
    print("Array of Recall Scores RF-Sam:", test_sizes[7], ":", recall_rf_scol7)
    print("Array of Precision Scores RF-Sam:", test_sizes[7], ":", precision_rf_scol7)
    print("Array of Accuracy Scores RF-Sam:", test_sizes[7], ":", accuracy_rf_scol7)
'''
# PRecision - # 8 test size
precision_sam71b = list([precision_lr_scol7[0], precision_dt_scol7[0], precision_rf_scol7[0], precision_nb_scol7[0], precision_xg_scol7[0]])
precision_sam71 = list([test_sizes[7], precision_xg_scol7[0], precision_rf_scol7[0], precision_dt_scol7[0], precision_lr_scol7[0], precision_nb_scol7[0]])
# precision_sam71 = list([(test_sizes[7] - test_sizes[7]), (0.0 + precision_rf_scol7[0]), (1.0 + precision_xg_scol7[0]),(2.0 + precision_dt_scol7[0]), (3.0 + precision_lr_scol7[0]), (4.0 + precision_nb_scol7[0])])
print("Iteration 1 Array:", precision_sam71)
# precision_sam72 = list([precision_lr_scol7[1], precision_dt_scol7[1], precision_rf_scol7[1], precision_nb_scol7[1], precision_xg_scol7[1]])
precision_sam72 = list([test_sizes[7], precision_xg_scol7[1], precision_rf_scol7[1], precision_dt_scol7[1],  precision_lr_scol7[1], precision_nb_scol7[1]])
#precision_sam72 = list([(test_sizes[7] - test_sizes[7]), (0.0 + precision_rf_scol7[1]), (1.0 + precision_xg_scol7[1]), (2.0 + precision_dt_scol7[1]), (3.0 + precision_lr_scol7[1]), (4.0 + precision_nb_scol7[1])])
#print("Iteration 2 Array:", precision_sam62)

precision_sam73 = list([test_sizes[7], precision_lr_scol7[2], precision_dt_scol7[2], precision_rf_scol7[2], precision_nb_scol7[2], precision_xg_scol7[2]] )
precision_sam74 = list([test_sizes[7], precision_lr_scol7[3], precision_dt_scol7[3], precision_rf_scol7[3], precision_nb_scol7[3], precision_xg_scol7[3]] )
precision_sam75 = list([test_sizes[7], precision_lr_scol7[4], precision_dt_scol7[4], precision_rf_scol7[4], precision_nb_scol7[4], precision_xg_scol7[4]] )
precision_sam76 = list([test_sizes[7], precision_lr_scol7[5], precision_dt_scol7[5], precision_rf_scol7[5], precision_nb_scol7[5], precision_xg_scol7[5]] )
precision_sam77 = list([test_sizes[7], precision_lr_scol7[6], precision_dt_scol7[6], precision_rf_scol7[6], precision_nb_scol7[6], precision_xg_scol7[6]] )
precision_sam78 = list([test_sizes[7], precision_lr_scol7[7], precision_dt_scol7[7], precision_rf_scol7[7], precision_nb_scol7[7], precision_xg_scol7[7]] )
precision_sam79 = list([test_sizes[7], precision_lr_scol7[8], precision_dt_scol7[8], precision_rf_scol7[8], precision_nb_scol7[8], precision_xg_scol7[8]] )
precision_sam80 = list([test_sizes[7], precision_lr_scol7[9], precision_dt_scol7[9], precision_rf_scol7[9], precision_nb_scol7[9], precision_xg_scol7[9]] )



# Recall - #8 test size
#recall_sam71b = list([recall_lr_scol7[0], recall_dt_scol7[0], recall_rf_scol7[0], recall_nb_scol7[0], recall_xg_scol7[0]])
recall_sam71 = list([test_sizes[7], recall_xg_scol7[0], recall_rf_scol7[0], recall_dt_scol7[0], recall_lr_scol7[0], recall_nb_scol7[0]])
# recall_sam71 = list([(test_sizes[9] - test_sizes[9]), (0.0 + recall_rf_scol7[0]), (1.0 + recall_xg_scol7[0]), (2.0 + recall_dt_scol7[0]), (3.0 + recall_lr_scol7[0]), (4.0 + recall_nb_scol7[0])])
print("Iteration 1 Array:", recall_sam71)
# recall_sam72 = list([recall_lr_scol7[1], recall_dt_scol7[1], recall_rf_scol7[1], recall_nb_scol7[1], recall_xg_scol7[1]])
recall_sam72 = list([test_sizes[7], recall_xg_scol7[1], recall_rf_scol7[1], recall_dt_scol7[1],  recall_lr_scol7[1], recall_nb_scol7[1]])
#recall_sam72 = list([(test_sizes[9] - test_sizes[9]), (0.0 + recall_rf_scol7[1]), (1.0 + recall_xg_scol7[1]),(2.0 + recall_dt_scol7[1]), (3.0 + recall_lr_scol7[1]), (4.0 + recall_nb_scol7[1])])
print("Iteration 2 Array:", recall_sam72)
recall_sam73 = list([test_sizes[7], recall_lr_scol7[2], recall_dt_scol7[2], recall_rf_scol7[2], recall_nb_scol7[2], recall_xg_scol7[2]] )
recall_sam74 = list([test_sizes[7], recall_lr_scol7[3], recall_dt_scol7[3], recall_rf_scol7[3], recall_nb_scol7[3], recall_xg_scol7[3]] )
recall_sam75 = list([test_sizes[7], recall_lr_scol7[4], recall_dt_scol7[4], recall_rf_scol7[4], recall_nb_scol7[4], recall_xg_scol7[4]] )
recall_sam76 = list([test_sizes[7], recall_lr_scol7[5], recall_dt_scol7[5], recall_rf_scol7[5], recall_nb_scol7[5], recall_xg_scol7[5]] )
recall_sam87 = list([test_sizes[7], recall_lr_scol7[6], recall_dt_scol7[6], recall_rf_scol7[6], recall_nb_scol7[6], recall_xg_scol7[6]] )
recall_sam88 = list([test_sizes[7], recall_lr_scol7[7], recall_dt_scol7[7], recall_rf_scol7[7], recall_nb_scol7[7], recall_xg_scol7[7]] )
recall_sam89 = list([test_sizes[7], recall_lr_scol7[8], recall_dt_scol7[8], recall_rf_scol7[8], recall_nb_scol7[8], recall_xg_scol7[8]] )
recall_sam90 = list([test_sizes[7], recall_lr_scol7[9], recall_dt_scol7[9], recall_rf_scol7[9], recall_nb_scol7[9], recall_xg_scol7[9]] )

precision_lr_scol7_avg = (precision_lr_scol7[0] + precision_lr_scol7[1] + precision_lr_scol7[2] + precision_lr_scol7[3] + precision_lr_scol7[4] + precision_lr_scol7[5] + precision_lr_scol7[6] + precision_lr_scol7[7] + precision_lr_scol7[8] + precision_lr_scol7[9]) / 10
precision_dt_scol7_avg = (precision_dt_scol7[0] + precision_dt_scol7[1] + precision_dt_scol7[2] + precision_dt_scol7[3] + precision_dt_scol7[4] + precision_dt_scol7[5] + precision_dt_scol7[6] + precision_dt_scol7[7] + precision_dt_scol7[8] + precision_dt_scol7[9]) / 10
precision_rf_scol7_avg = (precision_rf_scol7[0] + precision_rf_scol7[1] + precision_rf_scol7[2] + precision_rf_scol7[3] + precision_rf_scol7[4] + precision_rf_scol7[5] + precision_rf_scol7[6] + precision_rf_scol7[7] + precision_rf_scol7[8] + precision_rf_scol7[9]) / 10
precision_nb_scol7_avg = (precision_nb_scol7[0] + precision_nb_scol7[1] + precision_nb_scol7[2] + precision_nb_scol7[3] + precision_nb_scol7[4] + precision_nb_scol7[5] + precision_nb_scol7[6] + precision_nb_scol7[7] + precision_nb_scol7[8] + precision_nb_scol7[9]) / 10
precision_xg_scol7_avg = (precision_xg_scol7[0] + precision_xg_scol7[1] + precision_xg_scol7[2] + precision_xg_scol7[3] + precision_xg_scol7[4] + precision_xg_scol7[5] + precision_xg_scol7[6] + precision_xg_scol7[7] + precision_xg_scol7[8] + precision_xg_scol7[9]) / 10

recall_lr_scol7_avg = (recall_lr_scol7[0] + recall_lr_scol7[1] + recall_lr_scol7[2] + recall_lr_scol7[3] + recall_lr_scol7[4] + recall_lr_scol7[5] + recall_lr_scol7[6] + recall_lr_scol7[7] + recall_lr_scol7[8] + recall_lr_scol7[9]) / 10
recall_dt_scol7_avg = (recall_dt_scol7[0] + recall_dt_scol7[1] + recall_dt_scol7[2] + recall_dt_scol7[3] + recall_dt_scol7[4] + recall_dt_scol7[5] + recall_dt_scol7[6] + recall_dt_scol7[7] + recall_dt_scol7[8] + recall_dt_scol7[9]) / 10
recall_rf_scol7_avg = (recall_rf_scol7[0] + recall_rf_scol7[1] + recall_rf_scol7[2] + recall_rf_scol7[3] + recall_rf_scol7[4] + recall_rf_scol7[5] + recall_rf_scol7[6] + recall_rf_scol7[7] + recall_rf_scol7[8] + recall_rf_scol7[9]) / 10
recall_nb_scol7_avg = (recall_nb_scol7[0] + recall_nb_scol7[1] + recall_nb_scol7[2] + recall_nb_scol7[3] + recall_nb_scol7[4] + recall_nb_scol7[5] + recall_nb_scol7[6] + recall_nb_scol7[7] + recall_nb_scol7[8] + recall_nb_scol7[9]) / 10
recall_xg_scol7_avg = (recall_xg_scol7[0] + recall_xg_scol7[1] + recall_xg_scol7[2] + recall_xg_scol7[3] + recall_xg_scol7[4] + recall_xg_scol7[5] + recall_xg_scol7[6] + recall_xg_scol7[7] + recall_xg_scol7[8] + recall_xg_scol7[9]) / 10
'''


precision_lr_scol7_avg = (precision_lr_scol7[0] + precision_lr_scol7[1] + precision_lr_scol7[2] + precision_lr_scol7[3] + precision_lr_scol7[4]) / 5
precision_dt_scol7_avg = (precision_dt_scol7[0] + precision_dt_scol7[1] + precision_dt_scol7[2] + precision_dt_scol7[3] + precision_dt_scol7[4]) / 5
precision_rf_scol7_avg = (precision_rf_scol7[0] + precision_rf_scol7[1] + precision_rf_scol7[2] + precision_rf_scol7[3] + precision_rf_scol7[4]) / 5
precision_nb_scol7_avg = (precision_nb_scol7[0] + precision_nb_scol7[1] + precision_nb_scol7[2] + precision_nb_scol7[3] + precision_nb_scol7[4]) / 5
precision_xg_scol7_avg = (precision_xg_scol7[0] + precision_xg_scol7[1] + precision_xg_scol7[2] + precision_xg_scol7[3] + precision_xg_scol7[4]) / 5

recall_lr_scol7_avg = (recall_lr_scol7[0] + recall_lr_scol7[1] + recall_lr_scol7[2] + recall_lr_scol7[3] + recall_lr_scol7[4]) / 5
recall_dt_scol7_avg = (recall_dt_scol7[0] + recall_dt_scol7[1] + recall_dt_scol7[2] + recall_dt_scol7[3] + recall_dt_scol7[4]) / 5
recall_rf_scol7_avg = (recall_rf_scol7[0] + recall_rf_scol7[1] + recall_rf_scol7[2] + recall_rf_scol7[3] + recall_rf_scol7[4]) / 5
recall_nb_scol7_avg = (recall_nb_scol7[0] + recall_nb_scol7[1] + recall_nb_scol7[2] + recall_nb_scol7[3] + recall_nb_scol7[4]) / 5
recall_xg_scol7_avg = (recall_xg_scol7[0] + recall_xg_scol7[1] + recall_xg_scol7[2] + recall_xg_scol7[3] + recall_xg_scol7[4]) / 5

avg_precision_sam7 = list([test_sizes[7], precision_lr_scol7_avg, precision_dt_scol7_avg, precision_rf_scol7_avg, precision_nb_scol7_avg, precision_xg_scol7_avg])
avg_recall_sam7 = list([test_sizes[7], recall_lr_scol7_avg, recall_dt_scol7_avg, recall_rf_scol7_avg, recall_nb_scol7_avg, recall_xg_scol7_avg])

# Test Size #9 - 85%
x_tfidf = tfidf_vect.fit_transform(df["lemmatized"])

probs_lr_scol8 = []
f1_lr_scol8 = []
rocauc_lr_scol8 = []
recall_lr_scol8 = []
precision_lr_scol8 = []
accuracy_lr_scol8 = []

probs_dt_scol8 = []
f1_dt_scol8 = []
rocauc_dt_scol8 = []
recall_dt_scol8 = []
precision_dt_scol8 = []
accuracy_dt_scol8 = []

probs_nb_scol8 = []
f1_nb_scol8 = []
rocauc_nb_scol8 = []
recall_nb_scol8 = []
precision_nb_scol8 = []
accuracy_nb_scol8 = []

probs_xg_scol8 = []
f1_xg_scol8 = []
rocauc_xg_scol8 = []
recall_xg_scol8 = []
precision_xg_scol8 = []
accuracy_xg_scol8 = []

probs_rf_scol8 = []
f1_rf_scol8 = []
rocauc_rf_scol8 = []
recall_rf_scol8 = []
precision_rf_scol8 = []
accuracy_rf_scol8 = []

train_values8 = np.array([0.01, 0.02, 0.03, 0.05, 0.07])
# Other remaining values: 0.08, 0.09, 0.11, 0.13, 0.14
# 0.100, 0.125, 0.169, 0.195, 0.215, 0.797, 0.800, 0.900
test_sizes = np.array([0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95])
# train_sizes = round(train_list, 3)
for i8 in train_values8:
    # train_sizes = train_sizes + i
    # random_portion = round(np.random.uniform(0.2, 0.5), 3)
    # print(random_portion)
    x_train, x_test, y_train, y_test = train_test_split(x_nm, y_nm, train_size=i8, test_size=test_sizes[8])

    start1 = time.time()
    log = LogisticRegression(penalty='l2', random_state=0, solver='lbfgs', multi_class='auto', max_iter=500)
    model_lr = log.fit(x_train, y_train)
    probs_lr = model_lr.predict_proba(x_test)[:, 1]
    probs_lr_scol8.append(probs_lr)
    ly_prediction = log.predict(x_test)
    fly = f1_score(ly_prediction, y_test)
    f1_lr_scol8.append(fly)
    rocauc_lr = roc_auc_score(y_test, ly_prediction)
    rocauc_lr_scol8.append(rocauc_lr)
    recalls_lr = recall_score(y_test, ly_prediction)
    recall_lr_scol8.append(recalls_lr)
    precisions_lr = precision_score(y_test, ly_prediction)
    precision_lr_scol8.append(precisions_lr)
    accuracys_lr = accuracy_score(y_test, ly_prediction)
    accuracy_lr_scol8.append(accuracys_lr)
    print("===Logistic Regression with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[8], i8)
    lr_end = time.time()
    print('Logistic F1-score', fly * 100)
    print('Logistic ROCAUC score:', rocauc_lr * 100)
    print('Logistic Recall score:', recalls_lr * 100)
    print('Logistic Precision Score:', precisions_lr * 100)
    print('Logistic Confusion Matrix', confusion_matrix(y_test, ly_prediction), "\n")
    print('Logistic Classification', classification_report(y_test, ly_prediction), "\n")
    print('Logistic Accuracy Score', accuracys_lr * 100)
    print("Execution Time for Logistic Regression NearMiss: ", lr_end - start1, "seconds")

    start2 = time.time()
    from sklearn.tree import DecisionTreeClassifier

    DCT = DecisionTreeClassifier()
    model_dt = DCT.fit(x_train, y_train)
    probs_dt = model_dt.predict_proba(x_test)[:, 1]
    probs_dt_scol8.append(probs_dt)
    dct_pred = DCT.predict(x_test)
    fdct = f1_score(dct_pred, y_test)
    f1_dt_scol8.append(fdct)
    rocauc_dt = roc_auc_score(y_test, dct_pred)
    rocauc_dt_scol8.append(rocauc_dt)
    recalls_dt = recall_score(y_test, dct_pred)
    recall_dt_scol8.append(recalls_dt)
    precisions_dt = precision_score(y_test, dct_pred)
    precision_dt_scol8.append(precisions_dt)
    accuracys_dt = accuracy_score(y_test, dct_pred)
    accuracy_dt_scol8.append(accuracys_dt)
    print("===DecisionTreeClassifier with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[8], i8)
    dt_end = time.time()
    print('DCT F1-score', fdct * 100)
    print('DCT ROCAUC score:', rocauc_dt * 100)
    print('DCT Recall score:', recalls_dt * 100)
    print('DCT Precision Score:', precisions_dt * 100)
    print('DCT Confusion Matrix', confusion_matrix(y_test, dct_pred), "\n")
    print('DCT Classification', classification_report(y_test, dct_pred), "\n")
    print('DCT Accuracy Score', accuracys_dt * 100)
    print("Execution Time for Decision Tree NearMiss: ", dt_end - start2, "seconds")

    from sklearn.naive_bayes import MultinomialNB

    start3 = time.time()
    Naive = MultinomialNB()
    model_nb = Naive.fit(x_train, y_train)
    probs_nb = model_nb.predict_proba(x_test)[:, 1]
    probs_nb_scol8.append(probs_nb)
    # predict the labels on validation dataset
    ny_pred = Naive.predict(x_test)
    fnb = f1_score(ny_pred, y_test)
    f1_nb_scol8.append(fnb)
    rocauc_nb = roc_auc_score(y_test, ny_pred)
    rocauc_nb_scol8.append(rocauc_nb)
    recalls_nb = recall_score(y_test, ny_pred)
    recall_nb_scol8.append(recalls_nb)
    precisions_nb = precision_score(y_test, ny_pred)
    precision_nb_scol8.append(precisions_nb)
    accuracys_nb = accuracy_score(y_test, ny_pred)
    accuracy_nb_scol8.append(accuracys_nb)
    nb_end = time.time()
    # Use accuracy_score function to get the accuracy
    print("===Naive Bayes with TfidfVectorizer Imabalanced - 2010", df1_l, test_sizes[8], i8)
    print('Naive F1-score', fnb * 100)
    print('Naive ROCAUC score:', rocauc_nb * 100)
    print('Naive Recall score:', recalls_nb * 100)
    print('Naive Precision Score:', precisions_nb * 100)
    print('Naive Confusion Matrix', confusion_matrix(y_test, ny_pred), "\n")
    print('Naive Classification', classification_report(y_test, ny_pred), "\n")
    print('Naive Accuracy Score', accuracys_nb * 100)
    print("Execution Time for Naive Bayes NearMiss: ", nb_end - start3, "seconds")

    # XGBoost Classifier

    start4 = time.time()
    from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

    xgb_model = XGBClassifier().fit(x_train, y_train)
    probs_xg = xgb_model.predict_proba(x_test)[:, 1]
    probs_xg_scol8.append(probs_xg)
    # predict
    xgb_y_predict = xgb_model.predict(x_test)
    fxg = f1_score(xgb_y_predict, y_test)
    f1_xg_scol8.append(fxg)
    rocauc_xg = roc_auc_score(xgb_y_predict, y_test)
    rocauc_xg_scol8.append(rocauc_xg)
    recall_xg = recall_score(xgb_y_predict, y_test)
    recall_xg_scol8.append(recall_xg)
    precisions_xg = precision_score(xgb_y_predict, y_test)
    precision_xg_scol8.append(precisions_xg)
    accuracys_xg = accuracy_score(xgb_y_predict, y_test)
    accuracy_xg_scol8.append(accuracys_xg)
    xg_end = time.time()
    print("===XGB with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[8], i8)
    print('XGB F1-Score', fxg * 100)
    print('XGB ROCAUC Score:', rocauc_xg * 100)
    print('XGB Recall score:', recall_xg * 100)
    print('XGB Precision Score:', precisions_xg * 100)
    print('XGB Confusion Matrix', confusion_matrix(xgb_y_predict, y_test), "\n")
    print('XGB Classification', classification_report(xgb_y_predict, y_test), "\n")
    print('XGB Accuracy Score', accuracys_nb * 100)
    print("Execution Time for XGBoost Classifier NearMiss: ", xg_end - start4, "seconds")

    # Random Forest Classifier
    from sklearn.ensemble import RandomForestClassifier

    start5 = time.time()
    rfc_model = RandomForestClassifier(n_estimators=1000, random_state=0).fit(x_train, y_train)
    probs_rf = rfc_model.predict_proba(x_test)[:, 1]
    probs_rf_scol8.append(probs_rf)
    rfc_pred = rfc_model.predict(x_test)
    frfc = f1_score(rfc_pred, y_test)
    f1_rf_scol8.append(frfc)
    rocauc_rf = roc_auc_score(y_test, rfc_pred)
    rocauc_rf_scol8.append(rocauc_rf)
    recalls_rf = recall_score(rfc_pred, y_test)
    recall_rf_scol8.append(recalls_rf)
    precisions_rf = precision_score(rfc_pred, y_test)
    precision_rf_scol8.append(precisions_rf)
    accuracys_rf = accuracy_score(rfc_pred, y_test)
    accuracy_rf_scol8.append(accuracys_rf)
    rf_end = time.time()
    print("====RandomForest with Tfidf NearMiss 2010", df1_l, test_sizes[8], i8)
    print('RFC F1 score', frfc * 100)
    print('RFC ROCAUC Score:', rocauc_rf * 100)
    print('RFC Recall score:', recalls_rf * 100)
    print('RFC Precision Score:', precisions_rf * 100)
    print('RFC Confusion Matrix', confusion_matrix(y_test, rfc_pred), "\n")
    print('RFC Classification', classification_report(y_test, rfc_pred), "\n")
    print('RFC Accuracy Score', accuracys_rf * 100)
    print("Execution Time for Random Forest Classifier NearMiss: ", rf_end - start5, "seconds")

    print("Array of Prob Scores LR-Sam:", test_sizes[8], ":", probs_lr_scol8)
    print("Array of F1 Scores LR-Sam:", test_sizes[8], ":", f1_lr_scol8)
    print("Array of ROCAUC Scores LR-Sam:", test_sizes[8], ":", rocauc_lr_scol8)
    print("Array of Recall Scores LR-Sam:", test_sizes[8], ":", recall_lr_scol8)
    print("Array of Precision Scores LR-Sam:", test_sizes[8], ":", precision_lr_scol8)
    print("Array of Accuracy Scores LR-Sam:", test_sizes[8], ":", accuracy_lr_scol8)

    print("Array of Prob Scores DT-Sam:", test_sizes[8], ":", probs_dt_scol8)
    print("Array of F1 Scores DT-Sam:", test_sizes[8], ":", f1_dt_scol8)
    print("Array of ROCAUC Scores DT-Sam:", test_sizes[8], ":", rocauc_dt_scol8)
    print("Array of Recall Scores DT-Sam:", test_sizes[8], ":", recall_dt_scol8)
    print("Array of Precision Scores DT-Sam:", test_sizes[8], ":", precision_dt_scol8)
    print("Array of Accuracy Scores DT-Sam:", test_sizes[8], ":", accuracy_dt_scol8)

    print("Array of Prob Scores NB-Sam:", test_sizes[8], ":", probs_nb_scol8)
    print("Array of F1 Scores NB-Sam:", test_sizes[8], ":", f1_nb_scol8)
    print("Array of ROCAUC Scores NB-Sam:", test_sizes[8], ":", rocauc_nb_scol8)
    print("Array of Recall Scores NB-Sam:", test_sizes[8], ":", recall_nb_scol8)
    print("Array of Precision Scores NB-Sam:", test_sizes[8], ":", precision_nb_scol8)
    print("Array of Accuracy Scores NB-Sam:", test_sizes[8], ":", accuracy_nb_scol8)

    print("Array of Prob Scores XG-Sam:", test_sizes[8], ":", probs_xg_scol8)
    print("Array of F1 Scores XG-Sam:", test_sizes[8], ":", f1_xg_scol8)
    print("Array of ROCAUC Scores XG-Sam:", test_sizes[8], ":", rocauc_xg_scol8)
    print("Array of Recall Scores XG-Sam:", test_sizes[8], ":", recall_xg_scol8)
    print("Array of Precision Scores XG-Sam:", test_sizes[8], ":", precision_xg_scol8)
    print("Array of Accuracy Scores XG-Sam:", test_sizes[8], ":", accuracy_xg_scol8)

    print("Array of Prob Scores RF-Sam:", test_sizes[8], ":", probs_rf_scol8)
    print("Array of F1 Scores RF-Sam:", test_sizes[8], ":", f1_rf_scol8)
    print("Array of ROCAUC Scores RF-Sam:", test_sizes[8], ":", rocauc_rf_scol8)
    print("Array of Recall Scores RF-Sam:", test_sizes[8], ":", recall_rf_scol8)
    print("Array of Precision Scores RF-Sam:", test_sizes[8], ":", precision_rf_scol8)
    print("Array of Accuracy Scores RF-Sam:", test_sizes[8], ":", accuracy_rf_scol8)
'''
# Precision - #9 test size
#precision_sam81b = list([precision_lr_scol8[0], precision_dt_scol8[0], precision_rf_scol8[0], precision_nb_scol8[0], precision_xg_scol8[0]])
precision_sam81 = list([test_sizes[8], precision_xg_scol8[0], precision_rf_scol8[0], precision_dt_scol8[0], precision_lr_scol8[0], precision_nb_scol8[0]])
# precision_sam81 = list([(test_sizes[8] - test_sizes[8]), (0.0 + precision_rf_scol8[0]), (1.0 + precision_xg_scol8[0]), (2.0 + precision_dt_scol8[0]), (3.0 + precision_lr_scol8[0]), (4.0 + precision_nb_scol8[0])])
print("Iteration 1 Array:", precision_sam81)
# precision_sam82 = list([precision_lr_scol8[1], precision_dt_scol8[1], precision_rf_scol8[1], precision_nb_scol8[1], precision_xg_scol8[1]])
precision_sam82 = list([test_sizes[8], precision_xg_scol8[1], precision_rf_scol8[1], precision_dt_scol8[1],  precision_lr_scol8[1], precision_nb_scol8[1]])
#precision_sam82 = list([(test_sizes[8] - test_sizes[8]), (0.0 + precision_rf_scol8[1]), (1.0 + precision_xg_scol8[1]),(2.0 + precision_dt_scol8[1]), (3.0 + precision_lr_scol8[1]), (4.0 + precision_nb_scol8[1])])
print("Iteration 2 Array:", precision_sam82)

precision_sam83 = list([test_sizes[8], precision_lr_scol8[2], precision_dt_scol8[2], precision_rf_scol8[2], precision_nb_scol8[2], precision_xg_scol8[2]] )
precision_sam84 = list([test_sizes[8], precision_lr_scol8[3], precision_dt_scol8[3], precision_rf_scol8[3], precision_nb_scol8[3], precision_xg_scol8[3]] )
precision_sam85 = list([test_sizes[8], precision_lr_scol8[4], precision_dt_scol8[4], precision_rf_scol8[4], precision_nb_scol8[4], precision_xg_scol8[4]] )
precision_sam86 = list([test_sizes[8], precision_lr_scol8[5], precision_dt_scol8[5], precision_rf_scol8[5], precision_nb_scol8[5], precision_xg_scol8[5]] )
precision_sam87 = list([test_sizes[8], precision_lr_scol8[6], precision_dt_scol8[6], precision_rf_scol8[6], precision_nb_scol8[6], precision_xg_scol8[6]] )
precision_sam88 = list([test_sizes[8], precision_lr_scol8[7], precision_dt_scol8[7], precision_rf_scol8[7], precision_nb_scol8[7], precision_xg_scol8[7]] )
precision_sam89 = list([test_sizes[8], precision_lr_scol8[8], precision_dt_scol8[8], precision_rf_scol8[8], precision_nb_scol8[8], precision_xg_scol8[8]] )
precision_sam90 = list([test_sizes[8], precision_lr_scol8[9], precision_dt_scol8[9], precision_rf_scol8[9], precision_nb_scol8[9], precision_xg_scol8[9]] )


# Recall - #9 test size
#recall_sam81b = list([recall_lr_scol8[0], recall_dt_scol8[0], recall_rf_scol8[0], recall_nb_scol8[0], recall_xg_scol8[0]])
recall_sam81 = list([test_sizes[8], recall_xg_scol8[0], recall_rf_scol8[0], recall_dt_scol8[0], recall_lr_scol8[0], recall_nb_scol8[0]])
#recall_sam81 = list([(test_sizes[9] - test_sizes[9]), (0.0 + recall_rf_scol8[0]), (1.0 + recall_xg_scol8[0], (2.0 + recall_dt_scol8[0]), (3.0 + recall_lr_scol8[0]), (4.0 + recall_nb_scol8[0])])
print("Iteration 1 Array:", recall_sam81)
# recall_sam82 = list([recall_lr_scol8[1], recall_dt_scol8[1], recall_rf_scol8[1], recall_nb_scol8[1], recall_xg_scol8[1]])
recall_sam82 = list([test_sizes[8], recall_xg_scol8[1], recall_rf_scol8[1], recall_dt_scol8[1],  recall_lr_scol8[1], recall_nb_scol8[1]])
#recall_sam82 = list([(test_sizes[8] - test_sizes[8]), (0.0 + recall_rf_scol8[1]), (1.0 + recall_xg_scol8[1]),(2.0 + recall_dt_scol8[1]), (3.0 + recall_lr_scol8[1]), (4.0 + recall_nb_scol8[1])])
print("Iteration 2 Array:", recall_sam82)

recall_sam83 = list([test_sizes[8], recall_lr_scol8[2], recall_dt_scol8[2], recall_rf_scol8[2], recall_nb_scol8[2], recall_xg_scol8[2]] )
recall_sam84 = list([test_sizes[8], recall_lr_scol8[3], recall_dt_scol8[3], recall_rf_scol8[3], recall_nb_scol8[3], recall_xg_scol8[3]] )
recall_sam85 = list([test_sizes[8], recall_lr_scol8[4], recall_dt_scol8[4], recall_rf_scol8[4], recall_nb_scol8[4], recall_xg_scol8[4]] )
recall_sam86 = list([test_sizes[8], recall_lr_scol8[5], recall_dt_scol8[5], recall_rf_scol8[5], recall_nb_scol8[5], recall_xg_scol8[5]] )
recall_sam87 = list([test_sizes[8], recall_lr_scol8[6], recall_dt_scol8[6], recall_rf_scol8[6], recall_nb_scol8[6], recall_xg_scol8[6]] )
recall_sam88 = list([test_sizes[8], recall_lr_scol8[7], recall_dt_scol8[7], recall_rf_scol8[7], recall_nb_scol8[7], recall_xg_scol8[7]] )
recall_sam89 = list([test_sizes[8], recall_lr_scol8[8], recall_dt_scol8[8], recall_rf_scol8[8], recall_nb_scol8[8], recall_xg_scol8[8]] )
recall_sam90 = list([test_sizes[8], recall_lr_scol8[9], recall_dt_scol8[9], recall_rf_scol8[9], recall_nb_scol8[9], recall_xg_scol8[9]] )
'''
precision_lr_scol8_avg = (precision_lr_scol8[0] + precision_lr_scol8[1] + precision_lr_scol8[2] + precision_lr_scol8[3] + precision_lr_scol8[4]) / 5
precision_dt_scol8_avg = (precision_dt_scol8[0] + precision_dt_scol8[1] + precision_dt_scol8[2] + precision_dt_scol8[3] + precision_dt_scol8[4]) / 5
precision_rf_scol8_avg = (precision_rf_scol8[0] + precision_rf_scol8[1] + precision_rf_scol8[2] + precision_rf_scol8[3] + precision_rf_scol8[4]) / 5
precision_nb_scol8_avg = (precision_nb_scol8[0] + precision_nb_scol8[1] + precision_nb_scol8[2] + precision_nb_scol8[3] + precision_nb_scol8[4]) / 5
precision_xg_scol8_avg = (precision_xg_scol8[0] + precision_xg_scol8[1] + precision_xg_scol8[2] + precision_xg_scol8[3] + precision_xg_scol8[4]) / 5

recall_lr_scol8_avg = (recall_lr_scol8[0] + recall_lr_scol8[1] + recall_lr_scol8[2] + recall_lr_scol8[3] + recall_lr_scol8[4]) / 5
recall_dt_scol8_avg = (recall_dt_scol8[0] + recall_dt_scol8[1] + recall_dt_scol8[2] + recall_dt_scol8[3] + recall_dt_scol8[4]) / 5
recall_rf_scol8_avg = (recall_rf_scol8[0] + recall_rf_scol8[1] + recall_rf_scol8[2] + recall_rf_scol8[3] + recall_rf_scol8[4]) / 5
recall_nb_scol8_avg = (recall_nb_scol8[0] + recall_nb_scol8[1] + recall_nb_scol8[2] + recall_nb_scol8[3] + recall_nb_scol8[4]) / 5
recall_xg_scol8_avg = (recall_xg_scol8[0] + recall_xg_scol8[1] + recall_xg_scol8[2] + recall_xg_scol8[3] + recall_xg_scol8[4]) / 5

avg_precision_sam8 = list([test_sizes[8], precision_lr_scol8_avg, precision_dt_scol8_avg, precision_rf_scol8_avg, precision_nb_scol8_avg, precision_xg_scol8_avg])
avg_recall_sam8 = list([test_sizes[8], recall_lr_scol8_avg, recall_dt_scol8_avg, recall_rf_scol8_avg, recall_nb_scol8_avg, recall_xg_scol8_avg])

# Test Size #10 - 95%
x_tfidf = tfidf_vect.fit_transform(df["lemmatized"])

probs_lr_scol9 = []
f1_lr_scol9 = []
rocauc_lr_scol9 = []
recall_lr_scol9 = []
precision_lr_scol9 = []
accuracy_lr_scol9 = []

probs_dt_scol9 = []
f1_dt_scol9 = []
rocauc_dt_scol9 = []
recall_dt_scol9 = []
precision_dt_scol9 = []
accuracy_dt_scol9 = []

probs_nb_scol9 = []
f1_nb_scol9 = []
rocauc_nb_scol9 = []
recall_nb_scol9 = []
precision_nb_scol9 = []
accuracy_nb_scol9 = []

probs_xg_scol9 = []
f1_xg_scol9 = []
rocauc_xg_scol9 = []
recall_xg_scol9 = []
precision_xg_scol9 = []
accuracy_xg_scol9 = []

probs_rf_scol9 = []
f1_rf_scol9 = []
rocauc_rf_scol9 = []
recall_rf_scol9 = []
precision_rf_scol9 = []
accuracy_rf_scol9 = []

train_values9 = np.array([0.005, 0.01, 0.015, 0.02, 0.025])
# Other remaining values: , 0.03, 0.035, 0.04, 0.045, 0.05
# 0.100, 0.125, 0.169, 0.95, 0.215, 0.797, 0.800, 0.900
test_sizes = np.array([0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95])
# train_sizes = round(train_list, 3)
for i9 in train_values9:
    # train_sizes = train_sizes + i
    # random_portion = round(np.random.uniform(0.2, 0.5), 3)
    # print(random_portion)
    x_train, x_test, y_train, y_test = train_test_split(x_nm, y_nm, train_size=i9, test_size=test_sizes[9])

    start1 = time.time()
    log = LogisticRegression(penalty='l2', random_state=0, solver='lbfgs', multi_class='auto', max_iter=500)
    model_lr = log.fit(x_train, y_train)
    probs_lr = model_lr.predict_proba(x_test)[:, 1]
    probs_lr_scol9.append(probs_lr)
    ly_prediction = log.predict(x_test)
    fly = f1_score(ly_prediction, y_test)
    f1_lr_scol9.append(fly)
    rocauc_lr = roc_auc_score(y_test, ly_prediction)
    rocauc_lr_scol9.append(rocauc_lr)
    recalls_lr = recall_score(y_test, ly_prediction)
    recall_lr_scol9.append(recalls_lr)
    precisions_lr = precision_score(y_test, ly_prediction)
    precision_lr_scol9.append(precisions_lr)
    accuracys_lr = accuracy_score(y_test, ly_prediction)
    accuracy_lr_scol9.append(accuracys_lr)
    print("===Logistic Regression with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[9], i9)
    lr_end = time.time()
    print('Logistic F1-score', fly * 100)
    print('Logistic ROCAUC score:', rocauc_lr * 100)
    print('Logistic Recall score:', recalls_lr * 100)
    print('Logistic Precision Score:', precisions_lr * 100)
    print('Logistic Confusion Matrix', confusion_matrix(y_test, ly_prediction), "\n")
    print('Logistic Classification', classification_report(y_test, ly_prediction), "\n")
    print('Logistic Accuracy Score', accuracys_lr * 100)
    print("Execution Time for Logistic Regression NearMiss: ", lr_end - start1, "seconds")

    start2 = time.time()
    from sklearn.tree import DecisionTreeClassifier

    DCT = DecisionTreeClassifier()
    model_dt = DCT.fit(x_train, y_train)
    probs_dt = model_dt.predict_proba(x_test)[:, 1]
    probs_dt_scol9.append(probs_dt)
    dct_pred = DCT.predict(x_test)
    fdct = f1_score(dct_pred, y_test)
    f1_dt_scol9.append(fdct)
    rocauc_dt = roc_auc_score(y_test, dct_pred)
    rocauc_dt_scol9.append(rocauc_dt)
    recalls_dt = recall_score(y_test, dct_pred)
    recall_dt_scol9.append(recalls_dt)
    precisions_dt = precision_score(y_test, dct_pred)
    precision_dt_scol9.append(precisions_dt)
    accuracys_dt = accuracy_score(y_test, dct_pred)
    accuracy_dt_scol9.append(accuracys_dt)
    print("===DecisionTreeClassifier with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[9], i9)
    dt_end = time.time()
    print('DCT F1-score', fdct * 100)
    print('DCT ROCAUC score:', rocauc_dt * 100)
    print('DCT Recall score:', recalls_dt * 100)
    print('DCT Precision Score:', precisions_dt * 100)
    print('DCT Confusion Matrix', confusion_matrix(y_test, dct_pred), "\n")
    print('DCT Classification', classification_report(y_test, dct_pred), "\n")
    print('DCT Accuracy Score', accuracys_dt * 100)
    print("Execution Time for Decision Tree NearMiss: ", dt_end - start2, "seconds")

    from sklearn.naive_bayes import MultinomialNB

    start3 = time.time()
    Naive = MultinomialNB()
    model_nb = Naive.fit(x_train, y_train)
    probs_nb = model_nb.predict_proba(x_test)[:, 1]
    probs_nb_scol9.append(probs_nb)
    # predict the labels on validation dataset
    ny_pred = Naive.predict(x_test)
    fnb = f1_score(ny_pred, y_test)
    f1_nb_scol9.append(fnb)
    rocauc_nb = roc_auc_score(y_test, ny_pred)
    rocauc_nb_scol9.append(rocauc_nb)
    recalls_nb = recall_score(y_test, ny_pred)
    recall_nb_scol9.append(recalls_nb)
    precisions_nb = precision_score(y_test, ny_pred)
    precision_nb_scol9.append(precisions_nb)
    accuracys_nb = accuracy_score(y_test, ny_pred)
    accuracy_nb_scol9.append(accuracys_nb)
    nb_end = time.time()
    # Use accuracy_score function to get the accuracy
    print("===Naive Bayes with TfidfVectorizer Imabalanced - 2010", df1_l, test_sizes[9], i9)
    print('Naive F1-score', fnb * 100)
    print('Naive ROCAUC score:', rocauc_nb * 100)
    print('Naive Recall score:', recalls_nb * 100)
    print('Naive Precision Score:', precisions_nb * 100)
    print('Naive Confusion Matrix', confusion_matrix(y_test, ny_pred), "\n")
    print('Naive Classification', classification_report(y_test, ny_pred), "\n")
    print('Naive Accuracy Score', accuracys_nb * 100)
    print("Execution Time for Naive Bayes NearMiss: ", nb_end - start3, "seconds")

    # XGBoost Classifier

    start4 = time.time()
    from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

    xgb_model = XGBClassifier().fit(x_train, y_train)
    probs_xg = xgb_model.predict_proba(x_test)[:, 1]
    probs_xg_scol9.append(probs_xg)
    # predict
    xgb_y_predict = xgb_model.predict(x_test)
    fxg = f1_score(xgb_y_predict, y_test)
    f1_xg_scol9.append(fxg)
    rocauc_xg = roc_auc_score(xgb_y_predict, y_test)
    rocauc_xg_scol9.append(rocauc_xg)
    recall_xg = recall_score(xgb_y_predict, y_test)
    recall_xg_scol9.append(recall_xg)
    precisions_xg = precision_score(xgb_y_predict, y_test)
    precision_xg_scol9.append(precisions_xg)
    accuracys_xg = accuracy_score(xgb_y_predict, y_test)
    accuracy_xg_scol9.append(accuracys_xg)
    xg_end = time.time()
    print("===XGB with TfidfVectorizer NearMiss - 2010", df1_l, test_sizes[9], i9)
    print('XGB F1-Score', fxg * 100)
    print('XGB ROCAUC Score:', rocauc_xg * 100)
    print('XGB Recall score:', recall_xg * 100)
    print('XGB Precision Score:', precisions_xg * 100)
    print('XGB Confusion Matrix', confusion_matrix(xgb_y_predict, y_test), "\n")
    print('XGB Classification', classification_report(xgb_y_predict, y_test), "\n")
    print('XGB Accuracy Score', accuracys_nb * 100)
    print("Execution Time for XGBoost Classifier NearMiss: ", xg_end - start4, "seconds")

    # Random Forest Classifier
    from sklearn.ensemble import RandomForestClassifier

    start5 = time.time()
    rfc_model = RandomForestClassifier(n_estimators=1000, random_state=0).fit(x_train, y_train)
    probs_rf = rfc_model.predict_proba(x_test)[:, 1]
    probs_rf_scol9.append(probs_rf)
    rfc_pred = rfc_model.predict(x_test)
    frfc = f1_score(rfc_pred, y_test)
    f1_rf_scol9.append(frfc)
    rocauc_rf = roc_auc_score(y_test, rfc_pred)
    rocauc_rf_scol9.append(rocauc_rf)
    recalls_rf = recall_score(rfc_pred, y_test)
    recall_rf_scol9.append(recalls_rf)
    precisions_rf = precision_score(rfc_pred, y_test)
    precision_rf_scol9.append(precisions_rf)
    accuracys_rf = accuracy_score(rfc_pred, y_test)
    accuracy_rf_scol9.append(accuracys_rf)
    rf_end = time.time()
    print("====RandomForest with Tfidf NearMiss 2010", df1_l, test_sizes[9], i9)
    print('RFC F1 score', frfc * 100)
    print('RFC ROCAUC Score:', rocauc_rf * 100)
    print('RFC Recall score:', recalls_rf * 100)
    print('RFC Precision Score:', precisions_rf * 100)
    print('RFC Confusion Matrix', confusion_matrix(y_test, rfc_pred), "\n")
    print('RFC Classification', classification_report(y_test, rfc_pred), "\n")
    print('RFC Accuracy Score', accuracys_rf * 100)
    print("Execution Time for Random Forest Classifier NearMiss: ", rf_end - start5, "seconds")

    print("Array of Prob Scores LR-Sam:", test_sizes[9], ":", probs_lr_scol9)
    print("Array of F1 Scores LR-Sam:", test_sizes[9], ":", f1_lr_scol9)
    print("Array of ROCAUC Scores LR-Sam:", test_sizes[9], ":", rocauc_lr_scol9)
    print("Array of Recall Scores LR-Sam:", test_sizes[9], ":", recall_lr_scol9)
    print("Array of Precision Scores LR-Sam:", test_sizes[9], ":", precision_lr_scol9)
    print("Array of Accuracy Scores LR-Sam:", test_sizes[9], ":", accuracy_lr_scol9)

    print("Array of Prob Scores DT-Sam:", test_sizes[9], ":", probs_dt_scol9)
    print("Array of F1 Scores DT-Sam:", test_sizes[9], ":", f1_dt_scol9)
    print("Array of ROCAUC Scores DT-Sam:", test_sizes[9], ":", rocauc_dt_scol9)
    print("Array of Recall Scores DT-Sam:", test_sizes[9], ":", recall_dt_scol9)
    print("Array of Precision Scores DT-Sam:", test_sizes[9], ":", precision_dt_scol9)
    print("Array of Accuracy Scores DT-Sam:", test_sizes[9], ":", accuracy_dt_scol9)

    print("Array of Prob Scores NB-Sam:", test_sizes[9], ":", probs_nb_scol9)
    print("Array of F1 Scores NB-Sam:", test_sizes[9], ":", f1_nb_scol9)
    print("Array of ROCAUC Scores NB-Sam:", test_sizes[9], ":", rocauc_nb_scol9)
    print("Array of Recall Scores NB-Sam:", test_sizes[9], ":", recall_nb_scol9)
    print("Array of Precision Scores NB-Sam:", test_sizes[9], ":", precision_nb_scol9)
    print("Array of Accuracy Scores NB-Sam:", test_sizes[9], ":", accuracy_nb_scol9)

    print("Array of Prob Scores XG-Sam:", test_sizes[9], ":", probs_xg_scol9)
    print("Array of F1 Scores XG-Sam:", test_sizes[9], ":", f1_xg_scol9)
    print("Array of ROCAUC Scores XG-Sam:", test_sizes[9], ":", rocauc_xg_scol9)
    print("Array of Recall Scores XG-Sam:", test_sizes[9], ":", recall_xg_scol9)
    print("Array of Precision Scores XG-Sam:", test_sizes[9], ":", precision_xg_scol9)
    print("Array of Accuracy Scores XG-Sam:", test_sizes[9], ":", accuracy_xg_scol9)

    print("Array of Prob Scores RF-Sam:", test_sizes[9], ":", probs_rf_scol9)
    print("Array of F1 Scores RF-Sam:", test_sizes[9], ":", f1_rf_scol9)
    print("Array of ROCAUC Scores RF-Sam:", test_sizes[9], ":", rocauc_rf_scol9)
    print("Array of Recall Scores RF-Sam:", test_sizes[9], ":", recall_rf_scol9)
    print("Array of Precision Scores RF-Sam:", test_sizes[9], ":", precision_rf_scol9)
    print("Array of Accuracy Scores RF-Sam:", test_sizes[9], ":", accuracy_rf_scol9)
'''
# Preicsion - #10 test size
#precision_sam91b = list([precision_lr_scol9[0], precision_dt_scol9[0], precision_rf_scol9[0], precision_nb_scol9[0], precision_xg_scol9[0]])
precision_sam91 = list([test_sizes[9], precision_xg_scol9[0], precision_rf_scol9[0], precision_dt_scol9[0], precision_lr_scol9[0], precision_nb_scol9[0]])
#precision_sam91 = list([(test_sizes[9] - test_sizes[9]), (0.0 + precision_rf_scol9[0]), (1.0 + precision_xg_scol9[0]),(2.0 + precision_dt_scol9[0]), (3.0 + precision_lr_scol9[0]), (4.0 + precision_nb_scol9[0])])
print("Iteration 1 Array:", precision_sam91)
# precision_sam92 = list([precision_lr_scol9[1], precision_dt_scol9[1], precision_rf_scol9[1], precision_nb_scol9[1], precision_xg_scol9[1]])
precision_sam92 = list([test_sizes[9], precision_xg_scol9[1], precision_rf_scol9[1], precision_dt_scol9[1],  precision_lr_scol9[1], precision_nb_scol9[1]])
#precision_sam92 = list([(test_sizes[9] - test_sizes[9]), (0.0 + precision_rf_scol9[1]), (1.0 + precision_xg_scol9[1]),(2.0 + precision_dt_scol9[1]), (3.0 + precision_lr_scol9[1]), (4.0 + precision_nb_scol9[1])])
print("Iteration 2 Array:", precision_sam92)
precision_sam93 = list([test_sizes[9], precision_lr_scol9[2], precision_dt_scol9[2], precision_rf_scol9[2], precision_nb_scol9[2], precision_xg_scol9[2]] )
precision_sam94 = list([test_sizes[9], precision_lr_scol9[3], precision_dt_scol9[3], precision_rf_scol9[3], precision_nb_scol9[3], precision_xg_scol9[3]] )
precision_sam95 = list([test_sizes[9], precision_lr_scol9[4], precision_dt_scol9[4], precision_rf_scol9[4], precision_nb_scol9[4], precision_xg_scol9[4]] )
precision_sam96 = list([test_sizes[9], precision_lr_scol9[5], precision_dt_scol9[5], precision_rf_scol9[5], precision_nb_scol9[5], precision_xg_scol9[5]] )
precision_sam97 = list([test_sizes[9], precision_lr_scol9[6], precision_dt_scol9[6], precision_rf_scol9[6], precision_nb_scol9[6], precision_xg_scol9[6]] )
precision_sam98 = list([test_sizes[9], precision_lr_scol9[7], precision_dt_scol9[7], precision_rf_scol9[7], precision_nb_scol9[7], precision_xg_scol9[7]] )
precision_sam99 = list([test_sizes[9], precision_lr_scol9[8], precision_dt_scol9[8], precision_rf_scol9[8], precision_nb_scol9[8], precision_xg_scol9[8]] )
precision_sam100 = list([test_sizes[9], precision_lr_scol9[9], precision_dt_scol9[9], precision_rf_scol9[9], precision_nb_scol9[9], precision_xg_scol9[9]] )

# Recall - 10 test size
#recall_sam91b = list([recall_lr_scol9[0], recall_dt_scol9[0], recall_rf_scol9[0], recall_nb_scol9[0], recall_xg_scol9[0]])
recall_sam91 = list([test_sizes[9], recall_xg_scol9[0], recall_rf_scol9[0], recall_dt_scol9[0], recall_lr_scol9[0], recall_nb_scol9[0]])
# recall_sam91 = list([(test_sizes[9] - test_sizes[9]), (0.0 + recall_rf_scol9[0]), (1.0 + recall_xg_scol9[0]),(2.0 + recall_dt_scol9[0]), (3.0 + recall_lr_scol9[0]), (4.0 + recall_nb_scol9[0])])
print("Iteration 1 Array:", recall_sam91)
# recall_sam92 = list([recall_lr_scol9[1], recall_dt_scol9[1], recall_rf_scol9[1], recall_nb_scol9[1], recall_xg_scol9[1]])
recall_sam92 = list([test_sizes[9], recall_xg_scol9[1], recall_rf_scol9[1], recall_dt_scol9[1],  recall_lr_scol9[1], recall_nb_scol9[1]])
#recall_sam92 = list([(test_sizes[9] - test_sizes[9]), (0.0 + recall_rf_scol9[1]), (1.0 + recall_xg_scol9[1]),(2.0 + recall_dt_scol9[1]), (3.0 + recall_lr_scol9[1]), (4.0 + recall_nb_scol9[1])])
print("Iteration 2 Array:", recall_sam92)

recall_sam93 = list([test_sizes[9], recall_lr_scol9[2], recall_dt_scol9[2], recall_rf_scol9[2], recall_nb_scol9[2], recall_xg_scol9[2]] )
recall_sam94 = list([test_sizes[9], recall_lr_scol9[3], recall_dt_scol9[3], recall_rf_scol9[3], recall_nb_scol9[3], recall_xg_scol9[3]] )
recall_sam95 = list([test_sizes[9], recall_lr_scol9[4], recall_dt_scol9[4], recall_rf_scol9[4], recall_nb_scol9[4], recall_xg_scol9[4]] )
recall_sam96 = list([test_sizes[9], recall_lr_scol9[5], recall_dt_scol9[5], recall_rf_scol9[5], recall_nb_scol9[5], recall_xg_scol9[5]] )
recall_sam97 = list([test_sizes[9], recall_lr_scol9[6], recall_dt_scol9[6], recall_rf_scol9[6], recall_nb_scol9[6], recall_xg_scol9[6]] )
recall_sam98 = list([test_sizes[9], recall_lr_scol9[7], recall_dt_scol9[7], recall_rf_scol9[7], recall_nb_scol9[7], recall_xg_scol9[7]] )
recall_sam99 = list([test_sizes[9], recall_lr_scol9[8], recall_dt_scol9[8], recall_rf_scol9[8], recall_nb_scol9[8], recall_xg_scol9[8]] )
recall_sam100 = list([test_sizes[9], recall_lr_scol9[9], recall_dt_scol9[9], recall_rf_scol9[9], recall_nb_scol9[9], recall_xg_scol9[9]] )


precision_lr_scol9_avg = (precision_lr_scol9[0] + precision_lr_scol9[1] + precision_lr_scol9[2] + precision_lr_scol9[3] + precision_lr_scol9[4] + precision_lr_scol9[5] + precision_lr_scol9[6] + precision_lr_scol9[7] + precision_lr_scol9[8] + precision_lr_scol9[9]) / 10
precision_dt_scol9_avg = (precision_dt_scol9[0] + precision_dt_scol9[1] + precision_dt_scol9[2] + precision_dt_scol9[3] + precision_dt_scol9[4] + precision_dt_scol9[5] + precision_dt_scol9[6] + precision_dt_scol9[7] + precision_dt_scol9[8] + precision_dt_scol9[9]) / 10
precision_rf_scol9_avg = (precision_rf_scol9[0] + precision_rf_scol9[1] + precision_rf_scol9[2] + precision_rf_scol9[3] + precision_rf_scol9[4] + precision_rf_scol9[5] + precision_rf_scol9[6] + precision_rf_scol9[7] + precision_rf_scol9[8] + precision_rf_scol9[9]) / 10
precision_nb_scol9_avg = (precision_nb_scol9[0] + precision_nb_scol9[1] + precision_nb_scol9[2] + precision_nb_scol9[3] + precision_nb_scol9[4] + precision_nb_scol9[5] + precision_nb_scol9[6] + precision_nb_scol9[7] + precision_nb_scol9[8] + precision_nb_scol9[9]) / 10
precision_xg_scol9_avg = (precision_xg_scol9[0] + precision_xg_scol9[1] + precision_xg_scol9[2] + precision_xg_scol9[3] + precision_xg_scol9[4] + precision_xg_scol9[5] + precision_xg_scol9[6] + precision_xg_scol9[7] + precision_xg_scol9[8] + precision_xg_scol9[9]) / 10

recall_lr_scol9_avg = (recall_lr_scol9[0] + recall_lr_scol9[1] + recall_lr_scol9[2] + recall_lr_scol9[3] + recall_lr_scol9[4] + recall_lr_scol9[5] + recall_lr_scol9[6] + recall_lr_scol9[7] + recall_lr_scol9[8] + recall_lr_scol9[9]) / 10
recall_dt_scol9_avg = (recall_dt_scol9[0] + recall_dt_scol9[1] + recall_dt_scol9[2] + recall_dt_scol9[3] + recall_dt_scol9[4] + recall_dt_scol9[5] + recall_dt_scol9[6] + recall_dt_scol9[7] + recall_dt_scol9[8] + recall_dt_scol9[9]) / 10
recall_rf_scol9_avg = (recall_rf_scol9[0] + recall_rf_scol9[1] + recall_rf_scol9[2] + recall_rf_scol9[3] + recall_rf_scol9[4] + recall_rf_scol9[5] + recall_rf_scol9[6] + recall_rf_scol9[7] + recall_rf_scol9[8] + recall_rf_scol9[9]) / 10
recall_nb_scol9_avg = (recall_nb_scol9[0] + recall_nb_scol9[1] + recall_nb_scol9[2] + recall_nb_scol9[3] + recall_nb_scol9[4] + recall_nb_scol9[5] + recall_nb_scol9[6] + recall_nb_scol9[7] + recall_nb_scol9[8] + recall_nb_scol9[9]) / 10
recall_xg_scol9_avg = (recall_xg_scol9[0] + recall_xg_scol9[1] + recall_xg_scol9[2] + recall_xg_scol9[3] + recall_xg_scol9[4] + recall_xg_scol9[5] + recall_xg_scol9[6] + recall_xg_scol9[7] + recall_xg_scol9[8] + recall_xg_scol9[9]) / 10
'''

precision_lr_scol9_avg = (precision_lr_scol9[0] + precision_lr_scol9[1] + precision_lr_scol9[2] + precision_lr_scol9[3] + precision_lr_scol9[4]) / 5
precision_dt_scol9_avg = (precision_dt_scol9[0] + precision_dt_scol9[1] + precision_dt_scol9[2] + precision_dt_scol9[3] + precision_dt_scol9[4]) / 5
precision_rf_scol9_avg = (precision_rf_scol9[0] + precision_rf_scol9[1] + precision_rf_scol9[2] + precision_rf_scol9[3] + precision_rf_scol9[4]) / 5
precision_nb_scol9_avg = (precision_nb_scol9[0] + precision_nb_scol9[1] + precision_nb_scol9[2] + precision_nb_scol9[3] + precision_nb_scol9[4]) / 5
precision_xg_scol9_avg = (precision_xg_scol9[0] + precision_xg_scol9[1] + precision_xg_scol9[2] + precision_xg_scol9[3] + precision_xg_scol9[4]) / 5

recall_lr_scol9_avg = (recall_lr_scol9[0] + recall_lr_scol9[1] + recall_lr_scol9[2] + recall_lr_scol9[3] + recall_lr_scol9[4]) / 5
recall_dt_scol9_avg = (recall_dt_scol9[0] + recall_dt_scol9[1] + recall_dt_scol9[2] + recall_dt_scol9[3] + recall_dt_scol9[4]) / 5
recall_rf_scol9_avg = (recall_rf_scol9[0] + recall_rf_scol9[1] + recall_rf_scol9[2] + recall_rf_scol9[3] + recall_rf_scol9[4]) / 5
recall_nb_scol9_avg = (recall_nb_scol9[0] + recall_nb_scol9[1] + recall_nb_scol9[2] + recall_nb_scol9[3] + recall_nb_scol9[4]) / 5
recall_xg_scol9_avg = (recall_xg_scol9[0] + recall_xg_scol9[1] + recall_xg_scol9[2] + recall_xg_scol9[3] + recall_xg_scol9[4]) / 5



avg_precision_sam9 = list([test_sizes[9], precision_lr_scol9_avg, precision_dt_scol9_avg, precision_rf_scol9_avg, precision_nb_scol9_avg, precision_xg_scol9_avg])
avg_recall_sam9 = list([test_sizes[9], recall_lr_scol9_avg, recall_dt_scol9_avg, recall_rf_scol9_avg, recall_nb_scol9_avg, recall_xg_scol9_avg])

fig, ax = plt.subplots()

legend_names = ['TS - 5%', 'TS - 15%', 'TS - 25%', 'TS - 35%', 'TS - 45%', 'TS - 55%', 'TS - 65%', 'TS - 75%', 'TS - 85%', 'TS - 95%']

'''
classifier_names = {
     0: "Log Reg",
     1: "Dec Tre",
     2: "Naive Bayes",
     3: "XGBoost",
     4: "Random Forest"
}
'''

'''
length_50 = np.length(50, 60, N)
length_60 = np.length(60, 70, N)
length_70 = np.length(70, 80, N)
'''
'''
ln_x1 = [x for x in range(len(precision_sam1))]
print("Array x-axis 1", ln_x1)
ln_x2 = [x for x in range(len(precision_sam11))]
print("Array x-axis 2", ln_x2)
ln_x3 = [x for x in range(len(precision_sam31))]
print("Array x-axis 3", ln_x3)
ln_x4 = [x for x in range(len(precision_sam31))]
print("Array x-axis 4", ln_x4)
ln_x5 = [x for x in range(len(precision_sam41))]
print("Array x-axis 5", ln_x5)
ln_x6 = [x for x in range(len(precision_sam51))]
print("Array x-axis 6", ln_x6)
ln_x7 = [x for x in range(len(precision_sam61))]
print("Array x-axis 7", ln_x7)
ln_x8 = [x for x in range(len(precision_sam71))]
print("Array x-axis 8", ln_x8)
ln_x9 = [x for x in range(len(precision_sam81))]
print("Array x-axis 9", ln_x9)
ln_x10 = [x for x in range(len(precision_sam91))]
print("Array x-axis 10", ln_x10)
'''

ln_x1 = [x for x in range(len(avg_precision_sam))]
print("Array x-axis 1", ln_x1)
ln_x2 = [x for x in range(len(avg_precision_sam1))]
print("Array x-axis 2", ln_x2)
ln_x3 = [x for x in range(len(avg_precision_sam2))]
print("Array x-axis 3", ln_x3)
ln_x4 = [x for x in range(len(avg_precision_sam3))]
print("Array x-axis 4", ln_x4)
ln_x5 = [x for x in range(len(avg_precision_sam4))]
print("Array x-axis 5", ln_x5)
ln_x6 = [x for x in range(len(avg_precision_sam5))]
print("Array x-axis 6", ln_x6)
ln_x7 = [x for x in range(len(avg_precision_sam6))]
print("Array x-axis 7", ln_x7)
ln_x8 = [x for x in range(len(avg_precision_sam7))]
print("Array x-axis 8", ln_x8)
ln_x9 = [x for x in range(len(avg_precision_sam8))]
print("Array x-axis 9", ln_x9)
ln_x10 = [x for x in range(len(avg_precision_sam9))]
print("Array x-axis 10", ln_x10)


test_size1 = [0.05 for x in range(6)]
test_size2 = [0.15 for x in range(6)]
test_size3 = [0.25 for x in range(6)]
test_size4 = [0.35 for x in range(6)]
test_size5 = [0.45 for x in range(6)]
test_size6 = [0.55 for x in range(6)]
test_size7 = [0.65 for x in range(6)]
test_size8 = [0.75 for x in range(6)]
test_size9 = [0.85 for x in range(6)]
test_size10 = [0.95 for x in range(6)]
#test_sizes[0] = [precision_sam1, precision_sam3]
#test_sizes[1] = [precision_sam11, precision_sam12]
#test_sizes[3] = [precision_sam31, precision_sam32]
#x = [ln_x1, ln_x2, ln_x3, ln_x4, ln_x5, ln_x6]
# = [test_sizes[0], test_sizes[0], test_sizes[1], ]
#labels = [x.get_text() for x in Axes.get_xticklabels()]

def update_ticks(x, pos):
    if x == 0:
        return ''
    elif x == 1:
        return 'Logistic Reg'
    elif x == 2:
        return 'Decision Tree'
    elif x == 3:
        return 'Random Forest'
    elif x == 4:
        return 'Naive Bayes'
    elif x == 5:
        return 'XGBoost'
    else:
        return x


#Axes.set_xticklabels(labels)
#labels = ['Log Reg', '', 'Dec Tre', '', 'Nai Bay', '', 'XGBoost', '', 'Ran For']
#y_axis = [precision_sam1, precision_sam3, precision_sam11, precision_sam12]
#y = []
# precision_sam3, precision_sam13
#split1 = [precision_sam1, precision_sam3]
#split2 = [precision_sam11, precision_sam12]
#split3 = [precision_sam31, precision_sam32, precision_sam33]
# , precision_sam31, precision_sam32, precision_sam33
#y_axis = [(split1), (split2)]
'''
ax.set_title('Recall: NearMiss - Randomization 2010', size=20)
ax.plot(ln_x1, recall_sam1, label=legend_names[0])
ax.plot(ln_x2, recall_sam11, label=legend_names[1])
ax.plot(ln_x3, recall_sam31, label=legend_names[2])
ax.plot(ln_x4, recall_sam31, label=legend_names[3])
ax.plot(ln_x5, recall_sam41, label=legend_names[4])
ax.plot(ln_x6, recall_sam51,label=legend_names[5])
ax.plot(ln_x7, recall_sam61, label=legend_names[6])
ax.plot(ln_x8, recall_sam71, label=legend_names[7])
ax.plot(ln_x9, recall_sam81, label=legend_names[8])
ax.plot(ln_x10, recall_sam91, label=legend_names[9])
'''
ax.set_title('Precision: NearMiss - Randomization 2010', size=20)
ax.plot(ln_x1, avg_precision_sam, label=legend_names[0])
ax.plot(ln_x2, avg_precision_sam1, label=legend_names[1])
ax.plot(ln_x3, avg_precision_sam2, label=legend_names[2])
ax.plot(ln_x4, avg_precision_sam3, label=legend_names[3])
ax.plot(ln_x5, avg_precision_sam4, label=legend_names[4])
ax.plot(ln_x6, avg_precision_sam5, label=legend_names[5])
ax.plot(ln_x7, avg_precision_sam6, label=legend_names[6])
ax.plot(ln_x8, avg_precision_sam7, label=legend_names[7])
ax.plot(ln_x9, avg_precision_sam8, label=legend_names[8])
ax.plot(ln_x10, avg_precision_sam9, label=legend_names[9])
#plt.xticks(x, labels)
#plt.plot(precision_sam3, precision_sam3, label=f'50%: Iteration 2')
#plt.plot(precision_sam3, precision_sam3, label=f'50%: Iteration 3')
#plt.plot(precision_sam11, precision_sam11, label=f'60%: Iteration 1')
#plt.plot(precision_sam12, precision_sam12, label=f'60%: Iteration 2')
#plt.plot(precision_sam13, precision_sam13, label=f'60%: Iteration 3')
#plt.plot(precision_sam31, precision_sam31, label=f'70%: Iteration 1')
#plt.plot(precision_sam32, precision_sam32, label=f'70%: Iteration 2')
#plt.plot(precision_sam33, precision_sam33, label=f'70%: Iteration 3')

ax.xaxis.set_major_formatter(mticker.FuncFormatter(update_ticks))
ax.yaxis.set_major_locator(mticker.LinearLocator(11))
#ax.set_xlim(0.0)
ax.set_xlabel('Test Size', size=14)
ax.set_ylim(0.0)
ax.set_ylabel('Precision', size=14)
'''
ax2 = ax.twinx()
ax2.yaxis.set_major_locator(mticker.LinearLocator(11))
ax2.set_ylabel('Precision', size=14)
ax2.set(ylim=ax.get_ylim())
'''
ax.legend()

'''
fig2 = plt.figure(10, 7)
data_pre = [precision_sam1b, precision_sam11b, precision_sam31b, precision_sam31b, precision_sam41b, precision_sam51b, precision_sam61b, precision_sam71b, precision_sam81b, precision_sam91b]
bpl = ax.boxplot(data_pre, vert=True, sym='', widths=0.6)
ticks = ['TS - 5%', 'TS - 15%', 'TS - 25%', 'TS - 35%', 'TS - 45%', 'TS - 55%', 'TS - 65%', 'TS - 75%', 'TS - 85%', 'TS - 95%']
#bpr = plt.boxplot(data_rec, positions=np.array(range(len(data_rec)))*2.0+0.4, vert=True, sym='', widths=0.6)
#bpl = plt.boxplot(data_pre, positions=[1, 3, 5, 7, 9], sym='', vert=True,  widths=0.6)
#bpr = plt.boxplot(data_rec, positions=[2, 4, 6, 8, 10],  sym='', vert=True, widths=0.6)
set_box_color(bpl, '#305C79') # colors are from http://colorbrewer2.org/
set_box_color(bpr, '#FF7900')

# draw temporary red and blue lines and use them to create a legend
#plt.plot([], c='#305C79', label='Precision', data=data_pre)
#plt.legend()
plt.xticks(ticks)
#plt.xlim(-2, len(ticks)*2)
#plt.ylim(0, 8)
#plt.tight_layout()
plt.title('Precision: Randomization NearMiss 2010')
plt.xlabel('Test Sizes/Iterations')
plt.ylabel('Precision')
plt.savefig('boxplot.png')
'''

plt.show();