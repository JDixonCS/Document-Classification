# -*- coding: utf-8 -*-
"""Imbalanced_Classes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GTN2Q9XyFLIyex-nmuU7PB8k4tUmSW-q
"""
import random
import sys
from pylab import *
import numpy as np # linear algebra
#np.set_printoptions(threshold=sys.maxsize)
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker
#import matplotlib.axis as axis
#from matplotlib.xaxis import set_major_formatter
from matplotlib.axes import Axes
from pathlib import Path
import re
import csv
import time
from scipy import stats
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import RandomizedSearchCV
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score, f1_score
from sklearn.tree import DecisionTreeClassifier
from xgboost import XGBClassifier
from sklearn.svm import LinearSVC
from sklearn.metrics import recall_score
from sklearn.metrics import precision_score
from timeit import default_timer as timer

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.wrappers.scikit_learn import KerasClassifier

import os
# print(os.listdir("../input"))
plt.style.use('ggplot')

df = pd.DataFrame()
'''
raw = open(r"C:\\Users\\z3696\\Documents\\Document-Classification\\classifier\\NIST_FULL\\2019-neg.txt", encoding="ISO-8859-1")
lines = raw.readlines()
raw.close()

# remove /n at the end of each line
for index, line in enumerate(lines):
    lines[index] = line.strip()
    print(lines[index])

neg_df = pd.DataFrame(columns=['sentence'])
i = 0
first_col = ""
for line in lines:
    first_col = re.sub(r' \(.*', "", line)
    neg_df.loc[i] = [first_col]
    i = i+1

neg_df.head()
neg_df['label'] = 0
print(neg_df.shape)
'''
raw1 = open(r"C:\Users\z3696\Documents\Document-Classification\classifier\NIST_TEXT\2019\pos\3338062.txt", encoding="ISO-8859-1")
lines1 = raw1.readlines()
raw1.close()

# remove /n at the end of each line
for index, line in enumerate(lines1):
    lines1[index] = line.strip()
    print(lines1[index])

pos_df = pd.DataFrame(columns=['sentence'])
i = 0
first_col = ""
for line in lines1:
    first_col = re.sub(r' \(.*', "", line)
    pos_df.loc[i] = [first_col]
    i = i+1

pos_df.head()
pos_df['label'] = "null"

df = df.append(pos_df)
#df = df.append(neg_df)
print(df)
print(pos_df.shape)
#print(neg_df.shape)

#df = df.insert(0, 'ID', range(1, 1 + len(df)))
#print(df)

#filepath = Path('C:/Users/z3696/Documents/Document-Classification/classifier/sentencelabel.csv')
df.dropna(axis=0,how='any',thresh=None,subset=None,inplace=True)
csv_data = df.to_csv(index_label='ID')
print(csv_data)
#print('\nCSV String:\n', csv_data)
with open('3338062.csv', 'w') as csv_file:
    df.to_csv(path_or_buf=csv_file)