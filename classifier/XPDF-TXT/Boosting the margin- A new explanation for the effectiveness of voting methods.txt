Machine Learning: Proceedings of the Fourteenth International Conference, 1997.

Boosting the margin: A new explanation for the effectiveness of voting methods

Robert E. Schapire Yoav Freund
AT&T Labs 600 Mountain Avenue
Murray Hill, NJ 07974 USA
¡
schapire, yoav @research.att.com ¢

Peter Bartlett Dept. of Systems Engineering RSISE, Aust. National University Canberra, ACT 0200 Australia
Peter.Bartlett@anu.edu.au

Wee Sun Lee Electrical Engineering Department
University College UNSW Australian Defence Force Academy
Canberra ACT 2600 Australia w-lee@ee.adfa.oz.au

Abstract. One of the surprising recurring phenomena observed in experiments with boosting is that the test error of the generated hypothesis usually does not increase as its size becomes very large, and often is observed to decrease even after the training error reaches zero. In this paper, we show that this phenomenon is related to the distribution of margins of the training examples with respect to the generated voting classification rule, where the margin of an example is simply the difference between the number of correct votes and the maximum number of votes received by any incorrect label. We show that techniques used in the analysis of Vapnik's support vector classifiers and of neural networks with small weights can be applied to voting methods to relate the margin distribution to the test error. We also show theoretically and experimentally that boosting is especially effective at increasing the margins of the training examples. Finally, we compare our explanation to those based on the bias-variance decomposition.
1 INTRODUCTION
In recent years, there has been growing interest in learning algorithms which achieve high accuracy by voting the predictions of several classifiers. For example, several researchers have reported significant improvements in the performance of decision-tree learning algorithms such as C4.5 or CART using voting methods [4, 5, 7, 8, 10, 15].
We refer to each of the hypotheses that is combined in the vote as a base hypothesis and to the final voted hypothesis as the combined hypothesis.
As examples of the effectiveness of these methods, consider the results of the following two experiments using the "letter" dataset.1 In the first experiment, we used Breiman's bagging method [4] on top of C4.5. That is, we reran C4.5 many times on random "bootstrap" subsamples and combined the computed trees using simple voting. On the left of
£
AT&T Labs is planning to move from Murray Hill. The new address will be: 180 Park Avenue, Florham Park, NJ 07932-0971.
1All the non-synthetic datasets used in this research are part of the "StatLog" database, which can be retrieved electronically from the UCI repository http://www.ics.uci.edu/ mlearn/MLRepository.html.
¤

Figure 1, we have shown the training and test error curves (lower and upper curves, respectively) of the combined hypothesis as a function of the number of trees combined. The test error of C4.5 on this dataset (run just once) is 13.8%. The test error of bagging 1000 trees is 6.6%, a significant improvement. (Both of these error rates are indicated in the figure as horizontal grid lines.)
In the second experiment, we used Freund and Schapire's AdaBoost algorithm [12] on top of C4.5 for the same dataset. This algorithm is similar to bagging, except that the subsamples are chosen in a manner which concentrates on the "hardest" examples. The results of this experiment are also shown in Figure 1. Note that boosting drives the test error down even further to just 3.1%.
These error curves reveal a remarkable phenomenon, first observed by Drucker and Cortes [8], and later by Quinlan [15] and Breiman [5]. Ordinarily, as hypotheses become more and more complex, we expect their generalization error eventually to degrade. Yet these curves reveal that test error does not increase for either method even after 1000 trees have been combined (by which point, the combined hypothesis involves more than two million decision-tree nodes). How can it be that such complex hypotheses have such low error rates? This seems especially surprising for boosting in which each new decision tree is trained on an ever more specialized subsample of the training set.
Another apparent paradox is revealed in the error curve for AdaBoost. After just five trees have been combined, the training error of the combined hypothesis has already dropped to zero, but the test error continues to drop2 from 8.4% on round 5 down to 3.1% on round 1000. Surely, a combination of five trees is much simpler than a combination of 1000 trees, and both perform equally well on the training set (perfectly, in fact). So how can it be that the larger and more complex combined hypothesis performs so much better on the test set?
2Even when the training error of the combined hypothesis reaches zero, AdaBoost continues to obtain new base hypotheses by training the base learning algorithm on different subsamples of the data. Thus, the combined hypothesis continues to evolve, even after its training error reaches zero. See Section 3 for more detail.

Bagging
20

Boosting
20

Bagging
1.0

Boosting
1.0

15

15

10

10

0.5

0.5

5

5

0

0

10

100

1000

10

100

1000 -1

-0.5

0.5

1 -1

-0.5

Figure 1: Error curves and margin distribution graphs for bagging and boosting C4.5 on "letter" dataset.

0.5

1

The results of these experiments seem to contradict Occam's razor, one of the fundamental principles in the theory of machine learning. This principle states that in order to achieve good test error, the hypothesis should be as simple as possible, and that the difference between the training error and the test error will increase when the number of parameters that are needed to describe the hypothesis increases.
Indeed, such an analysis of boosting (which could also be applied to bagging) was carried out by Freund and Schapire [12] using the methods of Baum and Haussler [2]. This analysis predicts that the test error eventually will increase as the number of base hypotheses combined increases. Such a prediction is clearly incorrect in the case of the experiments described above, as was pointed out by Quinlan [15] and Breiman [5]. The apparent contradiction is especially stark in the boosting experiment in which the test error continues to decrease even after the training error has reached zero.
Breiman [5] and others have argued that voting methods work primarily by reducing the "variance" of a learning algorithm. This explanation is useful for bagging in that bagging tends to be most effective when the variance is large. However, for boosting, this explanation is, at best, incomplete. As will be seen in Section 5, large variance of the base hypotheses is not a requirement for boosting to be effective. In some cases, boosting even increases the variance while reducing the overall generalization error.
In this paper, we present an alternative theoretical analysis of voting methods, applicable, for instance, to bagging, boosting, "arcing" [5] and ECOC [7]. Our approach is based on a similar result presented by Bartlett [1] in a different context. We prove rigorous upper bounds on the generalization error of voting methods in terms of a measure of performance of the combined hypothesis on the training set. Our bounds also depend on the number of training examples and the "complexity" of the base hypotheses, but do not depend explicitly on the number of base hypotheses. Besides explaining the shape of the observed learning curves, our analysis may be helpful in understanding why these algorithms fail or succeed, and may also lead to the design of even more effective voting methods.
The key idea of this analysis is the following. In order to analyze the generalization error, one should consider more than just the training error, i.e., the number of incorrect classifications in the training set. One should also take into

account the confidence of the classifications. Here, we use a measure of the classification confidence for which it is possible to prove that an improvement in this measure of confidence on the training set guarantees an improvement in the upper bound on the generalization error.
Consider a combined hypothesis whose prediction is the result of a vote (or a weighted vote) over a set of base hypotheses. Suppose that the weights assigned to the different base hypotheses are normalized so that they sum to one. Fixing our attention on a particular example, we refer to the sum of the weights of the base hypotheses that predict a particular label as the weight of that label. We define the classification margin for the example as the difference between the weight assigned to the correct label and the maximal weight assigned to any single incorrect label. It is easy to see that the margin is a number in the
¢¡
range 1£ 1¤ and that an example is classified correctly if and only if its margin is positive. A large positive margin can be interpreted as a "confident" correct classification.
Now consider the distribution of the margin over the whole set of training examples. To visualize this distribution, we plot the fraction of exa¢¡ mples whose margin is at most ¥ as a function of ¥§¦ 1£ 1¤ . We refer to these graphs as margin distribution graphs. On the right side of Figure 1, we show the margin distribution graphs that correspond to the experiments described above. The graphs show the margin distributions for bagging and boosting after 5, 100 and 1000 iterations, indicated by short-dashed, long-dashed (mostly hidden) and solid curves, respectively.
Our main observation is that both boosting and bagging tend to increase the margins associated with examples and converge to a margin distribution in which most examples have large margins. Boosting is especially aggressive in its effect on examples whose initial margin is small. Even though the training error remains unchanged (at zero) after round 5, the margin distribution graph changes quite significantly so that after 100 iterations all examples have a margin larger than 0.5. In comparison, on round 5, about 7.7% of the examples have margin below 0¨ 5. As we see from this and other experiments detailed later in the paper, this type of reduction in the fraction of training examples with small margin is a good predictor of improvements in the test error.
The idea that maximizing the margin can improve the generalization error of a classifier was previously suggested and studied by Vapnik [19] and led to his work with Cortes

2

on support-vector classifiers [6], and with Boser and Guyon [3] on optimal margin classifiers. In Section 6, we discuss the relation between our work and Vapnik's in greater detail.
Shawe-Taylor et al. [16] gave bounds on the generalization error of these classifiers in terms of the margins, and Bartlett [1] used related techniques to give a similar bound for neural networks with small weights. Since voting classifiers are a special case of these neural networks, an immediate consequence of Bartlett's result is a bound on the generalization error of a voting classifier in terms of the fraction of training examples with small margin.
In Section 2, we use a similar but simpler approach to give a slightly better bound. Here we give the main intuition behind the proof. This idea brings us back to Occam's razor, though in a rather indirect way. Recall that an example is classified correctly if its margin is positive. If an example is classified by a large margin (either positive or negative), then small changes to the weights in the majority vote are unlikely to change the label. If most of the examples have a large margin then the classification error of the original majority vote and the perturbed majority vote will be similar. Suppose now that we had a small set of weighted majority rules that was fixed ahead of time, called the "approximating set." One way of perturbing the weights of the hypothesis majority vote is to find a nearby rule within the approximating set. As the approximating set is small, we can guarantee that the error of the approximating rule on the training set is similar to its generalization error, and as its error is similar to that of the original rule, the generalization error of the original rule should also be small. Thus, we are back to an Occam's razor argument in which instead of arguing that the classification rule itself is simple, we argue that the rule is close to a simple rule.
Boosting is particularly good at finding hypotheses with large margins in that it concentrates on those examples whose margins are small (or negative) and forces the base learning algorithm to generate good classifications for those examples. This process continues even after the training error has reached zero, which explains the continuing drop in test error.
In Section 3, we show that the powerful effect of boosting on the margin is not merely an empirical observation but is in fact the result of a provable property of the algorithm. Specifically, we are able to prove upper bounds on the number of training examples below a particular margin in terms of the training errors of the individual base hypotheses. Under certain reasonable conditions, these bounds imply that the number of training examples with small margin drops exponentially fast with the number of base hypotheses.
In Section 4, we give more examples of margin distribution graphs for other datasets, base learning algorithms and combination methods.
In Section 5, we discuss the relation of our work to biasvariance decompositions, and in Section 6, we compare our work to Vapnik's optimal margin classifiers.

2 GENERALIZATION ERROR AS A FUNCTION OF MARGIN DISTRIBUTIONS

In this section, we prove that achieving a large margin on

the training set results in an improved bound on the gener-

alization error. This bound does not depend on the number

of hypotheses that are combined in the vote. The approach

we take is similar to that of Shawe-Taylor et al. [16] and

Bartlett [1], but the proof here is simpler and more direct.

A slightly weaker version of Theorem 1 is a special case of

Bartlett's main result.

We give a proof for the special case in which there ¡ ¡
are just two possible labels 1£ 1 . The proof can be ¢

¡ generalized to larger finite sets of labels. Let denote the space from which the base hypothe-

¤ ¢ £¡ ses are chosen, for example, for C4.5 or CART, it is the
space of decision trees. A base hypothesis ¦ is ¡ ¡
a mapping from an instance space to 1£ 1 . We ¢

assume that examples are generated independently at ran-

¥ dom according to some fixed but unknown distribution

¡

¡

©¤§ ¦   ¨ over

1£ 1 . The training set is a list of pairs

¢

       "! ¥ 1£ 1 £ ¥ 2£ 2 £ ¨ ¨ ¨ £ ¥ £

chosen according to

¥ #%$'&)(0214365 7 . We use

[ ] to denote the probability of the

7  8  event when the example ¥ £ is chosen according to

¥ # $9&@(021A3CB 7 , and

[ ] to denote probability with respect to

choosing an example uniformly at random from the train-

# 5 7 # B 7 D 5 7 D B 7 ing set. When clear from context, we abbreviate these by [ ] and [ ]. We use [ ] and [ ] to denote

E ¡ expected value in a similar manner. We define the convex hull of as the set of map-

¡ pings that can be generated by taking a weighted average
of hypotheses from :

E GFIH QPRTUWS VWX`Y U ¢  ba U%c S U  d ¨

:¥

¥

0;

1

aaaa Y UGY U where it is understood that only finitely many 's may be Y H nonzero.3 The majority vote rule that is associated with He     gives the wrong prediction on the example ¥ £ only if  gf He 8  ¥ 0. Also, the margin of an example ¥ £ in this   case is simply ¥ .

The following theorem, the main result of this section,

states that with high probability, the generalization error of

hany majority vote hypothesis can be bounded in terms of the
number of training examples with margin below a threshold
h h ¡ , plus an additional term which depends on the number of
training examples, some "complexity" measure of , and the threshold (preventing us from choosing too close to

zero).

¡ Because of space constraints, we prove the theorem only
in the case that the base hypothesis space is finite, such

as the set of all decision trees of a given size over a set of

discrete-valued features. In this case, our bound depends

3A finite support is not a requirement for our proof but is sufficient for the application here which is to majority votes over a finite number of base hypotheses.

3

¡ ¡ only on log , which is roughly the description length of
a hypothesis in . This means that we can tolerate very

¡ large hypothesis classes. If is infinite--such as the class of decision trees over

¡ continuous features--we state our bound, without proof, in
terms of the VC-dimension of .

Note that the theorem applies to every majority vote

hypothesis, regardless of how it is computed. Thus, the

theorem applies to any voting method, including boosting,

bagging, etc.

© ¨ Theorem 1 Let be a sample of examples chosen in-

¥ dependently at random according to . Assume that the

¡ ¡£¢ base hypothesis space is finite, and let

0. Then

¡

© ¡ with probability at least 1 over the random choice of

h H E the training set , every weighted average function ¦

¢ satisfies the following bound for all 0:

5¥¤  He If ¦ f B§¤  He If h ¦ P

¥

0P

¥

©¨ ¨ ¡   1 log log  ¨ h ¡  2

log 1

12
¨

! ¡ More generally, for finite or infinite with VC-dimension

, the following bound holds as well:

5 A HC  f ¨ f B Ah HC¨    f h   P

¤

¥
©¨



0¦ 1"

!

¤P

¥

§ log2

2

!

¦ log 1¡



1 2

¨

¡ Proof: We only prove the first case in which is finite. E$# For the sake of the proof we define to be the set of
% ¡ unweighted averages over elements from :

E&#  ¨ F H : ¥ PR

%1 S')#(

¢

' ¥



¢

'

¦

¡

d

¨

¢ ¡ We allow the same ¦

1
to appear multiple times in the

sum. This set will play the role of the approximating set in

the proof.

H E Any majority vote hypothesis ¦ can be associated

¡ U with a distribution over as defined by the coefficients .

% ¡ Y By choosing elements of independently at random

according to this distribution we can generate an element

E # H E of . Using such a construction we map each ¦ to a

0 E # distribution over .

Our goal is to upper bound the generalization error of

H E 1 E # h ¢ ¦ . For any ¦

and 0 we can separate this

# 5  He If f probability into two
¥¤ ¥ 0¦

terms:
# 52# 5¤

31
¤

 31 ¥

 ¥

f

¢

h



h

2¦ 

2

 He ¥ If

0¦

¨

1 E$# As this inequality holds for any ¦ , we can take the

expected value of the right hand side with respect to the
0 distribution and get:

# 52¤  HC  f ¦ ¥

0

f 

# D

#5 4D

39(545

36(4 57¤36# 57¤531¤

 8¤ 31¥ 1

5A¤ # 4 3657¤



If ¥ 31 ¥







¥

¢

h

f



h

2¦
h
¢



2 

h

2¦@¦ 2

HC 

¥

If HC
¥



0¦
f

0¦B¦

¨

(1)

We bound both terms in (1) separately, starting with

 8  the second term. Consider a fixed example ¥ £ and take

the probability inside the expectation with respect to the

1 He   D 4 395 ¤C1   ¦ random choice of . It is clear that ¥

¥

% h  so the probability inside the expectation is equal to the
probability that the average over random draws from ¡ ¡
a distribution over 1£ 1 is different by 2 from its ¢

# 3    h  HC  f f   expected value. The Chernoff bound yields

4 95D¤ 31 ¥ ¢  2

¥

0¦

AEGF

#IH 2 8 ¨

2

To upper bound the first term in (1) we use the union
© bound. That is, the probability over the choice of that 1 E # h ¢ there exists any ¦ and 0 for which

# 52¤ 81  If h  ¦P¢ # BQ¤ 81  If h  ¦ 2R # ¥

2

¥

2

 %  E&# E F TS U is at most 1

2 2 . The exponential term comes

from the Chernoff bound which holds for any single choice

1 h  %  E # of and . The term

1 is an upper bound on

the number of such choices where we have used the fact
h E$# that, because of the form of functions in , we need only

VW3% V  B% consider values of of the form 2 for 0£ ¨ ¨ ¨ £ .

E&# f ¡ # Note that

.

R # YX   ¨    %  ¡ # ¡`#  Thus, if we set

1 2 ln

1

,

0 and take expectation with respect to , we get that, with ¡
¡`# probability at least 1

# 5 (4 395 ¤ 31   f h  ¦ f # B@(4 395 ¤A81   f h  ¦ 2R # ¥

2

¥

2

h 3

0 for every choice of , and every distribution .

To finish the argument we relate the fraction of the

He h 31   f h  training set on which ¥

2 to the fraction on which

  f¥

, which is the quantity that we measure. Notice

that
#

B@(4 395DD B¤ 81¤ #  ¥ 4 39f5

¤Ah 8 1 2¦¥ f

# f

h

Ba¤ 
2

He 

¥

HCI f ¥



h
¢

¦

h

¦b¦

¨

(4)

To bound the expression inside the expectation we use the

Chernoff bound as we did for Equation (2) and get

# 3    f h  HC  h f   4 95D¤ 31 ¥

2

¥

¢

¦

AE

F

#IH 2 8 ¨

5

      ¡@# ¡c % % Let

1 so that the probability of

% d #Pe ¡@# ¡ failure for any will be at most

1

. Then

combining Equations (1), (2), (3), (4) and (5), we get that,
h ¡
¡ ¢ with probability at least 1 , for every 0 and every
c% 1:

# 5  HC  f f # B  HC If h ¤ ¥ 0¦

¤¥

  ¡ 2E F #IH 2 8 gf

1% ln

¨2

%

¦ ¡1 2

#
¨

(6)

4

%    h   ¨§ ¡  Finally, the statement of the first part of the theorem follows

by setting

4 2 ln ln ¢¡ .

¡ ¡ We can extend the proof given above to the more general
case in which may be infinite using VC-dimension rather than log . Here, we sketch an alternative, more general

E # approach which can be applied to any class of real-valued
functions. The use of an approximating class, such as

in the proof of Theorem 1, is central to our approach. We

refer to such an approximating class as a sloppy cover. More

formally, for a class £ of real-valued functions, a training

© ¨ h R set of length , and positive real numbers and , we

R h say that a function class £ ^ is an -sloppy -cover of £ with

© H H respect to if, for all in £ , there exists ^ in £ ^ with

# &W3eB H   He  ¢ h R  h R 8¨  ¥¤ ^ ¥ ¡

¥

§¦©¨
. Let  £ £ £ £ denote

R h © ¨ © the maximum, over all training sets of size , of the size

© H of the smallest -sloppy -cover of £ with respect to .
Standard techniques allow us to prove that the probability

(over the random choice of ) that there exists an in £

for which

# 5  HC If # B  HC  f h ¥¤ ¦ ¢ §¤ ¥

0

 h ¨   ¨   R  is no more than 2 £ £ 2£ 8£ 2

¦ £R ¥

¡
R § exp

2

32 . (The

proof is essentially identical to that of Theorem 1 in Bart-

lett [1].)

The second part of Theorem 1 can now be proved by

constructing a sloppy cover using the same probabilistic

E # ¡ argument in the proof above, i.e., by choosing an element of randomly by sampling functions from . In addition,

this result leads to a slight improvement (by log factors)

of the main result of Bartlett [1], which gives bounds on

generalization error for neural networks with real outputs

in terms of the size of the network weights and the margin

distribution.

3 THE EFFECT OF BOOSTING ON MARGIN DISTRIBUTIONS

We now give theoretical evidence that Freund and Scha-

pire's [12] AdaBoost algorithm is especially suited to the

task of maximizing the number of training examples with

large margin.

Space limitations permit only a terse review of their

algorithm. We adopt the notation used in the previous

section, and restrict our attention to the binary case.

 Boosting works by sequentially rerunning a base learn-
ing algorithm, each time using a different distribution over training examples. That is, on each round  1£ ¨ ¨ ¨ £ , a

distribution  is computed over the training examples, or,

¡
¨ formally, over the set of indices 1£ ¨ ¨ ¨ £ . The goal of the ¢

R  ' '   ' ¢ base learning algorithm then"is! to find a hypothesis  with

# 3 6¤  ¢  ¦ small error 

 

# ¥ . The distribution

 V   @¨ used by AdaBoost is initially uniform ( 1

1 ), and

  '  '  " R  V   then V   ¢ "    R   

is upd¡ated' exp

multiplicatively on e'ach   ¥ )(  . Here, 

round:

1 2

ln

$&%
¡
1

1 



 and (  is an overall normalization constant chosen so that

 0% 1 sums to one. It can be verified that, in our case, ( 

XR ¡ R  2  1  . The final combined hypothesis is a weighted

HC  (  (  H  majority

vote
1

of

th' e

base

hypotheses,
1

n' amely,

sign

where

 d ¢   d ¥

32 1   ¥ 54

32 1  4 . Note that, on

round
    d F ( ¢   ¥ £

 , AdaBoost for which

p la1ce's
&6 1



the
6 6

most weight on examples ¥ is smallest. This quan-

tity is exactly the margin of the combined hypothesis com-

puted up to this point.

Freund and Schapire [12] prove that if the training error

R  rates of all the ba¡8 se7 hypotheses 7 are bounded below 1 2

f  ¢ so that  1 2 for some

0, then the training

error of the combined hypothesis decreases exponentially

fast with the number of base hypotheses that are combined.

The training error is equal to the fraction of examples for

 HC  f which ¥

0. It is a simple matter to extend their

h proof to show that if is not too large, then the fraction of

 HC %f h training examples for which ¥

also decreases to

zero exponentially fast with the number of base hypotheses

(or boosting iterations).

R R h Theorem 2 Suppose the base learning algorithm, when
called by AdaBoost, generates hypotheses with weighted

$9&@( 021A3CB  HC  f h f     training errors 1£ ¨ ¨ ¨ £ 2 . Then for any , we have that

P

¤¥

¦ ( R F H R H 9 2 @ 22

1

¡
1

 1% ¨ 7

 HC If h  1

Proof sketch: Note that if ¥

then

 S 2(

¢   f '  ¥

h S 2(

' 

1

1

and so

 S ¢   h S c  ¡
exp

(2 '  A ¥

(2 ' 

1¨

1

1

Th# er$9&)e(f0o1Ar3eeB, ¤  He ¥ If h ¦

f

D $9&@( 021A3eBCB exp  ¡  S (2

¢   '  A ¥

h S (2 ' ED 

 

h ( 1 ¨ S   S ¢   d ')(  ' ( ' exp

' 2 1  4

1
¡
exp

1
2'  ¥

1

1

h S S     (  ( ')( V 2 '

exp



1

92 (F
1

 2%1 1

where the last equality fol'lows from the definition of  Plugging in the values of  and (  gives the theorem. 2

%

1.

R f  ¢ To understand the s¡Gig7nificance of7 the result, assume
that, for all  ,  1 2 for some 0. Then we can

simplify the upper bound in Equation (7) to:

     F H H  @

¡
1

7
2

1

1

7
2

1%

2
¨

5

Boosting

C4.5 Bagging

40

40

40

35

35

35

30

30

30

25

25

25

20

20

20

15

15

15

10

10

10

5

5

5

0

0

0

10

100

1000

10

100

1000

1.0

1.0

0.5

0.5

ECOC

10

100

1.0

100 80 60 40 20 0
1000

Boosting

100

80

60

40

20

0

10

100

1000

1.0

stumps Bagging

10

100

1.0

100 80 60 40 20 0
1000

0.5

0.5

0.5

ECOC

10

100

1.0

1000

0.5

-1

-0.5

0.5

1

-1

-0.5

0.5

1

-1

-0.5

0.5

1

-1

-0.5

0.5

1

-1

-0.5

0.5

1

-1

-0.5

0.5

1

40

40

40

100

100

100

35

35

35

30

30

30

80

80

80

25

25

25

20

20

20

15

15

15

60

60

60

40

40

40

10

10

10

5

5

5

20

20

20

0

0

10

100

1000

0

10

100

1000

0

10

100

1000

0

10

100

1000

0

10

100

1000

10

100

1000

1.0

1.0

1.0

1.0

1.0

1.0

0.5

0.5

0.5

0.5

0.5

0.5

-1

-0.5

0.5

1

-1

-0.5

0.5

1

-1

-0.5

0.5

1

-1

-0.5

0.5

1

-1

-0.5

0.5

1

-1

-0.5

0.5

1

40

40

40

100

100

100

35

35

35

30

30

30

80

80

80

25

25

25

20

20

20

15

15

15

60

60

60

40

40

40

10

10

10

5

5

5

20

20

20

0

0

10

100

1000

0

10

100

1000

0

10

100

1000

0

10

100

1000

0

10

100

1000

10

100

1000

1.0

1.0

1.0

1.0

1.0

1.0

0.5

0.5

0.5

0.5

0.5

0.5

-1

-0.5

0.5

1

-1

-0.5

0.5

1

-1

-0.5

0.5

1

-1

-0.5

0.5

1

-1

-0.5

0.5

1

-1

-0.5

0.5

1

Figure 2: Error curves and margin distribution graphs for several learning methods on "letter" (top), "satimage" (middle) and "vehicle" (bottom) datasets.

hC¨ 7

 HC  f h If

, it can be shown that the expression inside the

parentheses is smaller than 1 so that the probability that

¥

decreases exponentially fast with  .4

Although this theorem applies only to binary classifi-

cation problems, Freund and Schapire [12] give extensive

treatment to the multi-class case. All of their results can be

extended to prove analogous theorems about margin distri-

butions for this more general case.

4 MORE MARGIN DISTRIBUTION

age" and "vehicle." The first two came with their own test sets. For the vehicle dataset, we randomly selected half of the data to be held out as a test set. Note that these curves represent only a single run of each algorithm.
In addition to bagging and boosting, we also used a variant of Dietterich and Bakiri's method of error-correcting output codes [7], which can be viewed as a voting method. However, rather than carefully constructing error-correcting codes, we simply used random output codes which are highly likely to have similar properties.

GRAPHS
Figure 2 shows a series of error curves and margin distribution graphs for a variety of datasets and learning methods. Vertically, the figure is split into three sections corresponding to the three "StatLog" datasets tested -- "letter," "satim-

For the base learning algorithm, we used C4.5, and we also used a simple algorithm for finding the best singlenode, binary-split decision tree (a decision "stump"). Since this latter algorithm is very weak, we used the "pseudoloss" versions of boosting and bagging. (See Freund and Schapire [12, 10] for details.)

4We can show that if is known in advance then an exponential
¡£¢ decrease in the probability can be achieved (by a slightly different
boosting algorithm) for any 2 . However, we don't know
¤ ¥£¦¨§ how to achieve this improvement when no nontrivial lower bound
on 1 2 is known a priori.

As explained in the introduction, each of the learning curve figures shows the training error (bottom) and test error (top) curves. We have also indicated as horizontal grid lines the error rate of the base hypothesis when run just once, as well as the error rate of the combined hypothesis after 1000

6

iterations. Note the log scale used in these figures. Margin distribution graphs are shown for 5, 100 and
1000 iterations indicated by short-dashed, long-dashed (sometimes barely visible) and solid curves, respectively.
It is interesting that, across datasets, all of the learning algorithms tend to produce margin distribution graphs of roughly the same character. As already noted, when used with C4.5, boosting is especially aggressive at increasing the margins of the examples, so much so that it is "willing" to suffer significant reductions in the margins of those examples that already have large margins. This can be seen in the figure where we observe that the maximal margin in the final hypothesis is bounded well away from 1. Contrast this with the final graph for bagging in which as many as half of the examples have a margin of 1.
The graphs for ECOC with C4.5 resemble in shape those for boosting more so than bagging, but tend to have overall lower margins.
Note that, on every dataset, both boosting and bagging eventually achieve perfect or nearly perfect accuracy on the training sets (at least 99%), but the generalization error for boosting is better. The explanation for this is evident from the margin distribution graphs where we see that, for boosting, far fewer training examples have margin close to zero.
When used with stumps, boosting is unable to achieve such large margins since, consistent with Theorem 2, the base hypotheses have much higher training errors. Presumably, such low margins do not adversely affect the generalization error because the complexity of decision stumps is so much smaller than that of full decision trees.
5 RELATION TO BIAS-VARIANCE
THEORY
One of the main explanations for the improvements achieved by voting classifiers is based on separating the expected error of a classifier into a bias term and a variance term. While the details of these definitions differ from author to author [5, 13, 14, 18], they are all attempts to capture the following quantities: The bias term measures the persistent error of the learning algorithm, in other words, the error that would remain even if we had an infinite number of independently trained hypotheses. The variance term measures the error that is due to fluctuations that are a part of generating a single hypothesis. The idea is that by averaging over many hypotheses one can reduce the variance term and in that way reduce the expected error.
In this section, we discuss a few of the strengths and weakness of bias-variance theory as an explanation for the performance of voting methods, especially boosting.
The bias-variance decomposition for classification. The origins of bias-variance analysis are in quadratic regression. Averaging several independently trained regression functions will never increase the expected error. This encouraging fact is nicely reflected in the bias-variance separation of the expected quadratic error. Both bias and vari-

ance are always nonnegative and averaging decreases the

variance term without changing the bias term.

One would naturally hope that this beautiful analysis

would carry over from quadratic regression to classifica-

tion. Unfortunately, as has been observed before us, tak-

ing the majority vote over several classification rules can

sometimes result in an increase in the expected classifica-

tion error. This simple observation suggests that it may be

inherently more difficult or even impossible to find a bias-

variance decomposition for classification as natural and sat-

isfying as in the quadratic regression case.

This difficulty is reflected in the myriad definitions that

have been proposed for bias and variance [5, 13, 14, 18].

Rather than discussing each one separately, for the remain-

der of this section, except where noted, we follow the def-

initions given by Kong and Dietterich [14], and referred to

as "Definition 0" by Breiman [5].

Bagging and variance reduction. The notion of vari-

ance certainly seems to be helpful in understanding bagging;

empirically, bagging appears to be most effective for learn-

ing algorithms with large variance. In fact, under idealized

conditions, variance is by definition the amount of decrease

in error effected by bagging a large number of base hy-

potheses. This ideal situation is one in which the bootstrap

samples used in bagging faithfully approximate truly inde-

pendent samples. However, this assumption can fail to hold

in practice, in which case, bagging may not perform as well

as expected, even when variance dominates the error of the

base learning algorithm.

This can happen even when the data distribution is very

 simple. For example, consider data generated according ¡ ¡
to the following distribution. The label ¦ 1£ 1 is

chosen uniformly at random. The instance ¥ ¦

¡
¡
1£

¢
17

¢

   is then chosen by picking each of the 7 bits to be equal to ¡ with probability 0¨ 9 and with probability 0¨ 1. Thus,
each coordinate of ¥ is an independent noisy version of .

For our base learner, we use a learning algorithm which

 generates a hypothesis that is equal to the single coordinate
of ¥ which is the best predictor of with respect to the

training set. It is clear that each coordinate of ¥ has the

same probability of being chosen as the hypothesis on a

random training set, so the aggregate predictor over many

independently trained samples is the unweighted majority

vote over the coordinates of ¥ , which is also the Bayes op-

timal predictor in this case. Thus, the bias of our learning

algorithm is exactly zero. The prediction error of the ma-

jority rule is roughly 0¨ 3%, and so a variance of about 9¨ 7%

strongly dominates the expected error rate of 10%. In such

a favorable case, one would hope that bagging could get

close to the error of the Bayes optimal predictor.

However, using a training set of 500 examples, the gen-

eralization error achieved by bagging is 5¨ 6% after 200

iterations. (All results are averaged over many runs.) The

reason for this poor performance is that, in each random

 sample, some of the coordinates of ¥ are slightly more
correlated with and bagging tends to pick these coordi-

nates much more often than the others. Thus, in this case,

7

name waveform
twonorm
threenorm
ringnorm
Kong & Dietterich

bias var error bias var error bias var error bias var error bias var error

Kong & Dietterich [14] definitions

stumps

C4.5

error

pseudo-loss

error

­ boost bag boost bag ­ boost bag

26.0 3.8 22.8 0.8 11.9 1.5 0.5 1.4

5.6 2.8 4.1 3.8 8.6 14.9 3.7 5.2

44.7 19.6 39.9 17.7 33.5 29.4 17.2 19.7

2.5 0.6 2.0

0.5 0.2 0.5

28.5 2.3 17.3

18.7 1.8 5.4

33.3 5.3 21.7

21.6 4.4 8.3

24.5 6.3 21.6

4.7 2.9 5.0

6.9 5.1 4.8

16.7 5.2 6.8

41.9 22.0 36.9

31.9 18.6 22.3

F 46.9 7 9 40.6

4.1 6.6 12.2

F 46.9 7 1 41.4

2.0 0.7 1.7 15.5 2.3 6.3 19.0 4.5 9.5

49.2 49.1 49.2 7.7 35.1 7.7 5.5 8.9

0.2 0.2 0.2 5.1 3.5 7.2 6.6 4.3

49.5 49.3 49.5 12.8 38.6 14.9 12.1 13.1

Breiman [5] definitions

stumps

C4.5

error

pseudo-loss

error

­ boost bag boost bag

­ boost bag

19.2 2.6 15.7 0.5 7.9 0.9 0.3 1.4

12.5 4.0 11.2 4.1 12.5 15.5 3.9 5.2

44.7 19.6 39.9 17.7 33.5 29.4 17.2 19.7

1.3 0.3 1.1

0.3 0.1 0.3

29.6 2.6 18.2

19.0 1.9 5.6

33.3 5.3 21.7

21.6 4.4 8.3

14.2 4.1 13.8

2.6 1.9 3.1

17.2 7.3 12.6

18.8 6.3 8.6

41.9 22.0 36.9

31.9 18.6 22.3

32.3 2.7 37.6

1.1 0.4 1.1

6.7 8.0 2.2

16.4 2.6 6.9

40.6 12.2 41.4

19.0 4.5 9.5

49.0 49.0 49.0 5.3 29.7 5.1 3.5 6.2

0.4 0.3 0.5 7.5 8.9 9.8 8.5 6.9

49.5 49.3 49.5 12.8 38.6 14.9 12.1 13.1

Table 1: Bias-variance experiments using boosting and bagging on synthetic data. Columns labeled with a dash indicate that the base learning algorithm was run just once.

the behavior of bagging is very different from its expected behavior on truly independent training sets.
Boosting, on the same data, achieved a test error of 0¨ 6%.
Boosting and variance reduction. Breiman [5] argued that boosting is primarily a variance-reducing procedure. Some of the evidence for this comes from the observed effectiveness of boosting when used with C4.5 or CART, algorithms known empirically to have high variance. As the error of these algorithms is mostly due to variance, it is not surprising that the reduction in the error is primarily due to a reduction in the variance. However, our experiments show that boosting can also be highly effective when used with learning algorithms whose error tends to be dominated by bias rather than variance.5
We ran boosting and bagging on four artificial datasets described by Breiman [5], as well as the artificial problem studied by Kong and Dietterich [14]. Following previous authors, we used training sets of size 200 for the latter problem and 300 for the others. For the base learning algorithm, we tested C4.5. We also used a very simple base learning algorithm that essentially finds the single-node binarysplit decision tree (a decision "stump") that minimizes either the training error or the "pseudoloss" (see Freund and Schapire [10] for details). We then estimated bias, variance and average error of these algorithms by rerunning them many times. For these experiments, we used both the bias-variance definitions given by Kong and Dietterich [14] and those proposed more recently by Breiman [5]. For multi-class problems, following Freund and Schapire [10], we tested both error-based and pseudoloss-based versions of bagging and boosting. For two-class problems, only the error-based versions were used.
The results are summarized in Table 1. Clearly, boosting is doing more than reducing variance. For instance, on "ringnorm," boosting decreases the overall error of the
5In fact, the original goal of boosting was to reduce the error of so-called "weak" learning algorithms which tend to have very large bias.

stump

algorithm

from

40

¨

6% ¡

to

12¨ 2%,

but

actually

in-

creases the variance from 7¨ 9% to 6.6% using Kong

and Dietterich's definitions, or from 6.7% to 8.0% using

Breiman's definitions.

Breiman also tested boosting with a low-variance base

learning algorithm--namely, linear discriminant analysis

(LDA)--and attributed the ineffectiveness of boosting in

this case to the "stability" (low variance) of LDA. The ex-

periments with the fairly stable stump algorithm suggest

that stability in itself may not be sufficient to predict boost-

ing's failure. Our theory is more specific and rigorous in

pinpointing the reasons that boosting can fail. Taken to-

gether, Theorem 1 and Theorem 2 state that boosting can

perform poorly only if: (1) there is insufficient training
R data relative to the "complexity" of the base hypotheses, or
(2) the training errors of the base hypotheses (the  's in

Theorem 2) become too large too quickly.

6 RELATION TO VAPNIK'S MAXIMAL MARGIN CLASSIFIERS
The use of the margins of real-valued hypotheses to predict generalization error was previously studied by Vapnik [19] in his work with Boser and Guyon [3] and Cortes [6] on optimal margin classifiers. This method, like boosting, aims to find a linear combination of base hypotheses which maximizes margins on training data. However, the two methods differ in the assumptions used on the norms of the base hypotheses and the weights. In the optimal margin method, the sum of the squared outputs of the base hypotheses an¡ d the sum of the squared weights (that is, the squared 2 norms) are both assumed to be bounded. In boo¡£s¢ting, the maximum absolute value of the base hypotheses ( ¡ norm) and the sum of the absolute values of the weights ( 1 norm) are assumed to be bounded. These assumptions mean that boosting is particularly suited for the case when all the base
¡
¡
hypotheses have a similar output range, such as 1£ 1 . ¢
On the other hand, the optimal margin method is suitable for the case where the magnitudes of the base hypotheses

8

decay as their number increases, such as in the dual spaces

used by Vapnik. Related to this, the optimal margin method

uses quadratic programming for its optimization, whereas

the boosting algorithm can be seen as a method for approx-

imate linear programming [11].

¡

Vapnik [19] showed that, with an 2¡ constraint on a

set of points, the set of normalized (in 2) linear7 combi-

 nations of
points has

VthCes-edipmoeinnstsiotnhatht ahtadveecrmeaasrgesinasat1le7 as2t.

on all This re-

sult implies bounds on the generalization error in terms of

the expected margin on test points (but typically this is not

known). Shawe-Taylor et al. [16] used techniques from

the theory of learning real-valued functions to give bounds

on generalization error in terms of margins¡ on the training examples, for linear combinations with an 2 bound on coefficients. Shawe-Taylor et al. [17] also gave related results

for arbitrary real classes, and Bartlett [1] gave bounds¡ of this type for neural networks with bounded weights (in 1). (Like boosting, neural network learning algorithms attempt

to find functions with large margins.)

Vapnik [19] gave an alternative analysis of optimal mar-

gin classifiers, based on the number of support vectors, i.e.,

the number of examples that define the final hypothesis.

This analysis is preferable to the analysis that depends on

the size of the margin when only a few of the training exam-

ples are support vectors. Previous work [9] has suggested

that boosting also can be used as a method for selecting a

small number of "informative" examples from the training

set. Investigating the relevance of this type of bound when

applying boosting to real-world problems is an interesting

open research direction.

7 OPEN PROBLEMS
The methods in this paper allow us to upper bound the generalization error of a classifier based on simple statistics which can be measured using the training data. We believe that these bounds give correct qualitative predictions regarding the behavior of the generalization error. Unfortunately, however, in their current form, our upper bounds are too pessimistic to be used as actual numerical estimates of the error, something which would be quite useful in practice. An important open problem is to derive more careful and precise bounds which can be used for this purpose. Besides paying closer attention to constant factors, such an analysis might also involve the measurement of more sophisticated statistics.
ACKNOWLEDGMENTS
Many thanks to Leo Breiman for a poignant email exchange which challenged us to think harder about these problems. Thanks also to all those who contributed to the datasets used in this paper.

REFERENCES
[1] Peter L. Bartlett. For valid generalization, the size of the weights is more important than the size of the network. In

Advances in Neural Information Processing Systems 9, 1997. [2] Eric B. Baum and David Haussler. What size net gives valid
generalization? In Advances in Neural Information Processing Systems I, pages 81­90. Morgan Kaufmann, 1989. [3] Bernhard E. Boser, Isabelle M. Guyon, and Vladimir N. Vapnik. A training algorithm for optimal margin classifiers. In Proceedings of the Fifth Annual ACM Workshop on Computational Learning Theory, pages 144­152, 1992. [4] Leo Breiman. Bagging predictors. Machine Learning, 24(2):123­140, 1996. [5] Leo Breiman. Bias, variance, and arcing classifiers. Technical Report 460, Statistics Department, University of California at Berkeley, 1996. [6] Corinna Cortes and Vladimir Vapnik. Support-vector networks. Machine Learning, 20(3):273­297, September 1995. [7] Thomas G. Dietterich and Ghulum Bakiri. Solving multiclass learning problems via error-correcting output codes. Journal of Artificial Intelligence Research, 2:263­286, January 1995. [8] Harris Drucker and Corinna Cortes. Boosting decision trees. In Advances in Neural Information Processing Systems 8, pages 479­485, 1996. [9] Yoav Freund. Boosting a weak learning algorithm by majority. Information and Computation, 121(2):256­285, 1995. [10] Yoav Freund and Robert E. Schapire. Experiments with a new boosting algorithm. In Machine Learning: Proceedings of the Thirteenth International Conference, pages 148­156, 1996. [11] Yoav Freund and Robert E. Schapire. Game theory, on-line prediction and boosting. In Proceedings of the Ninth Annual Conference on Computational Learning Theory, pages 325­ 332, 1996. [12] Yoav Freund and Robert E. Schapire. A decision-theoretic generalization of on-line learning and an application to boosting. Journal of Computer and System Sciences, To appear. An extended abstract appeared in EuroCOLT'95. [13] Ron Kohavi and David H. Wolpert. Bias plus variance decomposition for zero-one loss functions. In Machine Learning: Proceedings of the Thirteenth International Conference, pages 275­283, 1996. [14] Eun Bae Kong and Thomas G. Dietterich. Error-correcting output coding corrects bias and variance. In Proceedings of the Twelfth International Conference on Machine Learning, pages 313­321, 1995. [15] J. R. Quinlan. Bagging, boosting, and C4.5. In Proceedings of the Thirteenth National Conference on Artificial Intelligence, pages 725­730, 1996. [16] John Shawe-Taylor, Peter L. Bartlett, Robert C. Williamson, and Martin Anthony. A framework for structural risk minimisation. In Proceedings of the Ninth Annual Conference on Computational Learning Theory, pages 68­76, 1996. [17] John Shawe-Taylor, Peter L. Bartlett, Robert C. Williamson, and Martin Anthony. Structural risk minimization over datadependent hierarchies. Technical Report NC-TR-96-053, Neurocolt, 1996. [18] Robert Tibshirani. Bias, variance and prediction error for classification rules. Technical report, University of Toronto, November 1996. [19] V. N. Vapnik. Estimation of Dependences Based on Empirical Data. Springer-Verlag, 1982.

9

