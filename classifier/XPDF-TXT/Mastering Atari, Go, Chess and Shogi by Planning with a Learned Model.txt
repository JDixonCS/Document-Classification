arXiv:1911.08265v1 [cs.LG] 19 Nov 2019

Mastering Atari, Go, Chess and Shogi by Planning with a Learned Model
Julian Schrittwieser,1 Ioannis Antonoglou,1,2 Thomas Hubert,1 Karen Simonyan,1 Laurent Sifre,1 Simon Schmitt,1 Arthur Guez,1 Edward Lockhart,1 Demis Hassabis,1 Thore Graepel,1,2 Timothy Lillicrap,1
David Silver1,2
1DeepMind, 6 Pancras Square, London N1C 4AG. 2University College London, Gower Street, London WC1E 6BT.
These authors contributed equally to this work.
Abstract
Constructing agents with planning capabilities has long been one of the main challenges in the pursuit of artificial intelligence. Tree-based planning methods have enjoyed huge success in challenging domains, such as chess and Go, where a perfect simulator is available. However, in real-world problems the dynamics governing the environment are often complex and unknown. In this work we present the MuZero algorithm which, by combining a tree-based search with a learned model, achieves superhuman performance in a range of challenging and visually complex domains, without any knowledge of their underlying dynamics. MuZero learns a model that, when applied iteratively, predicts the quantities most directly relevant to planning: the reward, the actionselection policy, and the value function. When evaluated on 57 different Atari games - the canonical video game environment for testing AI techniques, in which model-based planning approaches have historically struggled our new algorithm achieved a new state of the art. When evaluated on Go, chess and shogi, without any knowledge of the game rules, MuZero matched the superhuman performance of the AlphaZero algorithm that was supplied with the game rules.
1 Introduction
Planning algorithms based on lookahead search have achieved remarkable successes in artificial intelligence. Human world champions have been defeated in classic games such as checkers [34], chess [5], Go [38] and poker [3, 26], and planning algorithms have had real-world impact in applications from logistics [47] to chemical synthesis [37]. However, these planning algorithms all rely on knowledge of the environment's dynamics, such as the rules of the game or an accurate simulator, preventing their direct application to real-world domains like robotics, industrial control, or intelligent assistants.
Model-based reinforcement learning (RL) [42] aims to address this issue by first learning a model of the environment's dynamics, and then planning with respect to the learned model. Typically, these models have either focused on reconstructing the true environmental state [8, 16, 24], or the sequence of full observations [14, 20]. However, prior work [4, 14, 20] remains far from the state of the art in visually rich domains, such as Atari 2600 games [2]. Instead, the most successful methods are based on model-free RL [9, 21, 18] ­ i.e. they estimate the optimal policy and/or value function directly from interactions with the environment. However, model-free algorithms are in turn far from the state of the art in domains that require precise and sophisticated lookahead, such as chess and Go.
In this paper, we introduce MuZero, a new approach to model-based RL that achieves state-of-the-art performance in Atari 2600, a visually complex set of domains, while maintaining superhuman performance in precision planning tasks such as chess, shogi and Go. MuZero builds upon AlphaZero's [39] powerful search and
1

search-based policy iteration algorithms, but incorporates a learned model into the training procedure. MuZero also extends AlphaZero to a broader set of environments including single agent domains and non-zero rewards at intermediate time-steps.
The main idea of the algorithm (summarized in Figure 1) is to predict those aspects of the future that are directly relevant for planning. The model receives the observation (e.g. an image of the Go board or the Atari screen) as an input and transforms it into a hidden state. The hidden state is then updated iteratively by a recurrent process that receives the previous hidden state and a hypothetical next action. At every one of these steps the model predicts the policy (e.g. the move to play), value function (e.g. the predicted winner), and immediate reward (e.g. the points scored by playing a move). The model is trained end-to-end, with the sole objective of accurately estimating these three important quantities, so as to match the improved estimates of policy and value generated by search as well as the observed reward. There is no direct constraint or requirement for the hidden state to capture all information necessary to reconstruct the original observation, drastically reducing the amount of information the model has to maintain and predict; nor is there any requirement for the hidden state to match the unknown, true state of the environment; nor any other constraints on the semantics of state. Instead, the hidden states are free to represent state in whatever way is relevant to predicting current and future values and policies. Intuitively, the agent can invent, internally, the rules or dynamics that lead to most accurate planning.
2 Prior Work
Reinforcement learning may be subdivided into two principal categories: model-based, and model-free [42]. Model-based RL constructs, as an intermediate step, a model of the environment. Classically, this model is represented by a Markov-decision process (MDP) [31] consisting of two components: a state transition model, predicting the next state, and a reward model, predicting the expected reward during that transition. The model is typically conditioned on the selected action, or a temporally abstract behavior such as an option [43]. Once a model has been constructed, it is straightforward to apply MDP planning algorithms, such as value iteration [31] or Monte-Carlo tree search (MCTS) [7], to compute the optimal value or optimal policy for the MDP. In large or partially observed environments, the algorithm must first construct the state representation that the model should predict. This tripartite separation between representation learning, model learning, and planning is potentially problematic since the agent is not able to optimize its representation or model for the purpose of effective planning, so that, for example modeling errors may compound during planning.
A common approach to model-based RL focuses on directly modeling the observation stream at the pixellevel. It has been hypothesized that deep, stochastic models may mitigate the problems of compounding error [14, 20]. However, planning at pixel-level granularity is not computationally tractable in large scale problems. Other methods build a latent state-space model that is sufficient to reconstruct the observation stream at pixel level [48, 49], or to predict its future latent states [13, 11], which facilitates more efficient planning but still focuses the majority of the model capacity on potentially irrelevant detail. None of these prior methods has constructed a model that facilitates effective planning in visually complex domains such as Atari; results lag behind well-tuned, model-free methods, even in terms of data efficiency [45].
A quite different approach to model-based RL has recently been developed, focused end-to-end on predicting the value function [41]. The main idea of these methods is to construct an abstract MDP model such that planning in the abstract MDP is equivalent to planning in the real environment. This equivalence is achieved by ensuring value equivalence, i.e. that, starting from the same real state, the cumulative reward of a trajectory through the abstract MDP matches the cumulative reward of a trajectory in the real environment.
The predictron [41] first introduced value equivalent models for predicting value (without actions). Although the underlying model still takes the form of an MDP, there is no requirement for its transition model to match real states in the environment. Instead the MDP model is viewed as a hidden layer of a deep neural network. The unrolled MDP is trained such that the expected cumulative sum of rewards matches the expected value with respect to the real environment, e.g. by temporal-difference learning.
Value equivalent models were subsequently extended to optimising value (with actions). TreeQN [10] learns an abstract MDP model, such that a tree search over that model (represented by a tree-structured neural network) approximates the optimal value function. Value iteration networks [44] learn a local MDP model, such that value
2

Figure 1: Planning, acting, and training with a learned model. (A) How MuZero uses its model to plan. The model consists of three connected components for representation, dynamics and prediction. Given a previous hidden state sk-1 and a candidate action ak, the dynamics function g produces an immediate reward rk and a new hidden state sk. The policy pk and value function vk are computed from the hidden state sk by a prediction function f . The initial hidden state s0 is obtained by passing the past observations (e.g. the Go board or Atari screen) into a representation function h. (B) How MuZero acts in the environment. A Monte-Carlo Tree Search is performed at each timestep t, as described in A. An action at+1 is sampled from the search policy t, which is proportional to the visit count for each action from the root node. The environment receives the action and generates a new observation ot+1 and reward ut+1. At the end of the episode the trajectory data is stored into a replay buffer. (C) How MuZero trains its model. A trajectory is sampled from the replay buffer. For the initial step, the representation function h receives as input the past observations o1, ..., ot from the selected trajectory. The model is subsequently unrolled recurrently for K steps. At each step k, the dynamics function g receives as input the hidden state sk-1 from the previous step and the real action at+k. The parameters of the representation, dynamics and prediction functions are jointly trained, end-to-end by backpropagation-through-time, to predict three quantities: the policy pk  t+k, value function vk  zt+k, and reward rt+k  ut+k, where zt+k is a sample return: either the final reward (board games) or n-step return (Atari).
iteration over that model (represented by a convolutional neural network) approximates the optimal value function. Value prediction networks [28] are perhaps the closest precursor to MuZero: they learn an MDP model grounded in real actions; the unrolled MDP is trained such that the cumulative sum of rewards, conditioned on the actual sequence of actions generated by a simple lookahead search, matches the real environment. Unlike MuZero there is no policy prediction, and the search only utilizes value prediction.
3 MuZero Algorithm
We now describe the MuZero algorithm in more detail. Predictions are made at each time-step t, for each of k = 1...K steps, by a model µ, with parameters , conditioned on past observations o1, ..., ot and future actions at+1, ..., at+k. The model predicts three future quantities: the policy pkt  (at+k+1|o1, ..., ot, at+1, ..., at+k), the value function vtk  E [ut+k+1 + ut+k+2 + ...|o1, ..., ot, at+1, ..., at+k], and the immediate reward rtk  ut+k, where u. is the true, observed reward,  is the policy used to select real actions, and  is the discount function of the environment.
Internally, at each time-step t (subscripts t suppressed for simplicity), the model is represented by the com-
3

bination of a representation function, a dynamics function, and a prediction function. The dynamics function, rk, sk = g(sk-1, ak), is a recurrent process that computes, at each hypothetical step k, an immediate reward rk and an internal state sk. It mirrors the structure of an MDP model that computes the expected reward and state
transition for a given state and action [31]. However, unlike traditional approaches to model-based RL [42], this internal state sk has no semantics of environment state attached to it ­ it is simply the hidden state of the overall
model, and its sole purpose is to accurately predict relevant, future quantities: policies, values, and rewards. In
this paper, the dynamics function is represented deterministically; the extension to stochastic transitions is left for future work. The policy and value functions are computed from the internal state sk by the prediction function, pk, vk = f(sk), akin to the joint policy and value network of AlphaZero. The "root" state s0 is initialized using a representation function that encodes past observations, s0 = h(o1, ..., ot); again this has no special semantics beyond its support for future predictions.
Given such a model, it is possible to search over hypothetical future trajectories a1, ..., ak given past obser-
vations o1, ..., ot. For example, a naive search could simply select the k step action sequence that maximizes the value function. More generally, we may apply any MDP planning algorithm to the internal rewards and state space
induced by the dynamics function. Specifically, we use an MCTS algorithm similar to AlphaZero's search, gener-
alized to allow for single agent domains and intermediate rewards (see Methods). At each internal node, it makes
use of the policy, value and reward estimates produced by the current model parameters . The MCTS algorithm
outputs a recommended policy t and estimated value t. An action at+1  t is then selected. All parameters of the model are trained jointly to accurately match the policy, value, and reward, for every
hypothetical step k, to corresponding target values observed after k actual time-steps have elapsed. Similarly to
AlphaZero, the improved policy targets are generated by an MCTS search; the first objective is to minimise the error between predicted policy pkt and search policy t+k. Also like AlphaZero, the improved value targets are generated by playing the game or MDP. However, unlike AlphaZero, we allow for long episodes with discounting
and intermediate rewards by bootstrapping n steps into the future from the search value, zt = ut+1 + ut+2 + ... + n-1ut+n + nt+n. Final outcomes {lose, draw, win} in board games are treated as rewards ut  {-1, 0, +1} occuring at the final step of the episode. Specifically, the second objective is to minimize the error between the predicted value vtk and the value target, zt+k 1. The reward targets are simply the observed rewards; the third objective is therefore to minimize the error between the predicted reward rtk and the observed reward ut+k. Finally, an L2 regularization term is also added, leading to the overall loss:

K

lt() = lr(ut+k, rtk) + lv(zt+k, vtk) + lp(t+k, pkt ) + c||||2

(1)

k=0

where lr, lv, and lp are loss functions for reward, value and policy respectively. Supplementary Figure S2 summarizes the equations governing how the MuZero algorithm plans, acts, and learns.

4 Results
We applied the MuZero algorithm to the classic board games Go, chess and shogi 2, as benchmarks for challenging planning problems, and to all 57 games in the Atari Learning Environment [2], as benchmarks for visually complex RL domains.
In each case we trained MuZero for K = 5 hypothetical steps. Training proceeded for 1 million mini-batches of size 2048 in board games and of size 1024 in Atari. During both training and evaluation, MuZero used 800 simulations for each search in board games, and 50 simulations for each search in Atari. The representation function uses the same convolutional [23] and residual [15] architecture as AlphaZero, but with 16 residual blocks instead of 20. The dynamics function uses the same architecture as the representation function and the prediction
1For chess, Go and shogi, the same squared error loss as AlphaZero is used for rewards and values. A cross-entropy loss was found to be more stable than a squared error when encountering rewards and values of variable scale in Atari. Cross-entropy was used for the policy loss in both cases.
2Imperfect information games such as Poker are not directly addressed by our method.

4

Chess

Shogi

Go



rmblkans opopopop 0Z0Z0Z0Z Z0Z0Z0Z0 0Z0Z0Z0Z Z0Z0Z0Z0 POPOPOPO SNAQJBMR















Atari

Figure 2: Evaluation of MuZero throughout training in chess, shogi, Go and Atari. The x-axis shows millions of training steps. For chess, shogi and Go, the y-axis shows Elo rating, established by playing games against AlphaZero using 800 simulations per move for both players. MuZero's Elo is indicated by the blue line, AlphaZero's Elo by the horizontal orange line. For Atari, mean (full line) and median (dashed line) human normalized scores across all 57 games are shown on the y-axis. The scores for R2D2 [21], (the previous state of the art in this domain, based on model-free RL) are indicated by the horizontal orange lines. Performance in Atari was evaluated using 50 simulations every fourth time-step, and then repeating the chosen action four times, as in prior work [25].
function uses the same architecture as AlphaZero. All networks use 256 hidden planes (see Methods for further details).
Figure 2 shows the performance throughout training in each game. In Go, MuZero slightly exceeded the performance of AlphaZero, despite using less computation per node in the search tree (16 residual blocks per evaluation in MuZero compared to 20 blocks in AlphaZero). This suggests that MuZero may be caching its computation in the search tree and using each additional application of the dynamics model to gain a deeper understanding of the position.
In Atari, MuZero achieved a new state of the art for both mean and median normalized score across the 57 games of the Arcade Learning Environment, outperforming the previous state-of-the-art method R2D2 [21] (a model-free approach) in 42 out of 57 games, and outperforming the previous best model-based approach SimPLe [20] in all games (see Table S1).
We also evaluated a second version of MuZero that was optimised for greater sample efficiency. Specifically, it reanalyzes old trajectories by re-running the MCTS using the latest network parameters to provide fresh targets (see Appendix H). When applied to 57 Atari games, using 200 million frames of experience per game, MuZero Reanalyze achieved 731% median normalized score, compared to 192%, 231% and 431% for previous state-ofthe-art model-free approaches IMPALA [9], Rainbow [17] and LASER [36] respectively.
To understand the role of the model in MuZero we also ran several experiments, focusing on the board game of Go and the Atari game of Ms. Pacman.
First, we tested the scalability of planning (Figure 3A), in the canonical planning problem of Go. We compared the performance of search in AlphaZero, using a perfect model, to the performance of search in MuZero, using a learned model. Specifically, the fully trained AlphaZero or MuZero was evaluated by comparing MCTS with different thinking times. MuZero matched the performance of a perfect model, even when doing much larger
5

Agent
Ape-X [18] R2D2 [21]
MuZero
IMPALA [9] Rainbow [17] UNREALa [19] LASER [36] MuZero Reanalyze

Median
434.1% 1920.6% 2041.1%
191.8% 231.1% 250%a 431% 731.1%

Mean
1695.6% 4024.9% 4999.2%
957.6% ­
880%a ­
2168.9%

Env. Frames
22.8B 37.5B 20.0B
200M 200M 250M 200M 200M

Training Time
5 days 5 days 12 hours
­ 10 days
­ ­ 12 hours

Training Steps
8.64M 2.16M
1M
­ ­ ­ ­ 1M

Table 1: Comparison of MuZero against previous agents in Atari. We compare separately against agents trained in large (top) and small (bottom) data settings; all agents other than MuZero used model-free RL techniques. Mean and median scores are given, compared to human testers. The best results are highlighted in bold. MuZero sets a new state of the art in both settings. aHyper-parameters were tuned per game.

searches (up to 10s thinking time) than those from which the model was trained (around 0.1s thinking time, see also Figure S3A).
We also investigated the scalability of planning across all Atari games (see Figure 3B). We compared MCTS with different numbers of simulations, using the fully trained MuZero. The improvements due to planning are much less marked than in Go, perhaps because of greater model inaccuracy; performance improved slightly with search time, but plateaued at around 100 simulations. Even with a single simulation ­ i.e. when selecting moves solely according to the policy network ­ MuZero performed well, suggesting that, by the end of training, the raw policy has learned to internalise the benefits of search (see also Figure S3B).
Next, we tested our model-based learning algorithm against a comparable model-free learning algorithm (see Figure 3C). We replaced the training objective of MuZero (Equation 1) with a model-free Q-learning objective (as used by R2D2), and the dual value and policy heads with a single head representing the Q-function Q(·|st). Subsequently, we trained and evaluated the new model without using any search. When evaluated on Ms. Pacman, our model-free algorithm achieved identical results to R2D2, but learned significantly slower than MuZero and converged to a much lower final score. We conjecture that the search-based policy improvement step of MuZero provides a stronger learning signal than the high bias, high variance targets used by Q-learning.
To better understand the nature of MuZero's learning algorithm, we measured how MuZero's training scales with respect to the amount of search it uses during training. Figure 3D shows the performance in Ms. Pacman, using an MCTS of different simulation counts per move throughout training. Surprisingly, and in contrast to previous work [1], even with only 6 simulations per move ­ fewer than the number of actions ­ MuZero learned an effective policy and improved rapidly. With more simulations performance jumped significantly higher. For analysis of the policy improvement during each individual iteration, see also Figure S3 C and D.

5 Conclusions
Many of the breakthroughs in artificial intelligence have been based on either high-performance planning [5, 38, 39] or model-free reinforcement learning methods [25, 29, 46]. In this paper we have introduced a method that combines the benefits of both approaches. Our algorithm, MuZero, has both matched the superhuman performance of high-performance planning algorithms in their favored domains ­ logically complex board games such as chess and Go ­ and outperformed state-of-the-art model-free RL algorithms in their favored domains ­ visually complex Atari games. Crucially, our method does not require any knowledge of the game rules or environment dynamics, potentially paving the way towards the application of powerful learning and planning methods to a host of realworld domains for which there exists no perfect simulator.

6

Figure 3: Evaluations of MuZero on Go (A), all 57 Atari Games (B) and Ms. Pacman (C-D). (A) Scaling with search time per move in Go, comparing the learned model with the ground truth simulator. Both networks were trained at 800 simulations per search, equivalent to 0.1 seconds per search. Remarkably, the learned model is able to scale well to up to two orders of magnitude longer searches than seen during training. (B) Scaling of final human normalized mean score in Atari with the number of simulations per search. The network was trained at 50 simulations per search. Dark line indicates mean score, shaded regions indicate 25th to 75th and 5th to 95th percentiles. The learned model's performance increases up to 100 simulations per search. Beyond, even when scaling to much longer searches than during training, the learned model's performance remains stable and only decreases slightly. This contrasts with the much better scaling in Go (A), presumably due to greater model inaccuracy in Atari than Go. (C) Comparison of MCTS based training with Q-learning in the MuZero framework on Ms. Pacman, keeping network size and amount of training constant. The state of the art Q-Learning algorithm R2D2 is shown as a baseline. Our Q-Learning implementation reaches the same final score as R2D2, but improves slower and results in much lower final performance compared to MCTS based training. (D) Different networks trained at different numbers of simulations per move, but all evaluated at 50 simulations per move. Networks trained with more simulations per move improve faster, consistent with ablation (B), where the policy improvement is larger when using more simulations per move. Surprisingly, MuZero can learn effectively even when training with less simulations per move than are enough to cover all 8 possible actions in Ms. Pacman.
7

6 Acknowledgments
Lorrayne Bennett, Oliver Smith and Chris Apps for organizational assistance; Koray Kavukcuoglu for reviewing the paper; Thomas Anthony, Matthew Lai, Nenad Tomasev, Ulrich Paquet, Sumedh Ghaisas for many fruitful discussions; and the rest of the DeepMind team for their support.
References
[1] Kamyar Azizzadenesheli, Brandon Yang, Weitang Liu, Emma Brunskill, Zachary C. Lipton, and Animashree Anandkumar. Surprising negative results for generative adversarial tree search. CoRR, abs/1806.05780, 2018.
[2] Marc G Bellemare, Yavar Naddaf, Joel Veness, and Michael Bowling. The arcade learning environment: An evaluation platform for general agents. Journal of Artificial Intelligence Research, 47:253­279, 2013.
[3] Noam Brown and Tuomas Sandholm. Superhuman ai for heads-up no-limit poker: Libratus beats top professionals. Science, 359(6374):418­424, 2018.
[4] Lars Buesing, Theophane Weber, Sebastien Racaniere, SM Eslami, Danilo Rezende, David P Reichert, Fabio Viola, Frederic Besse, Karol Gregor, Demis Hassabis, et al. Learning and querying fast generative models for reinforcement learning. arXiv preprint arXiv:1802.03006, 2018.
[5] Murray Campbell, A. Joseph Hoane, Jr., and Feng-hsiung Hsu. Deep blue. Artif. Intell., 134(1-2):57­83, January 2002.
[6] R. Coulom. Whole-history rating: A Bayesian rating system for players of time-varying strength. In International Conference on Computers and Games, pages 113­124, 2008.
[7] Re´mi Coulom. Efficient selectivity and backup operators in monte-carlo tree search. In International conference on computers and games, pages 72­83. Springer, 2006.
[8] MP. Deisenroth and CE. Rasmussen. Pilco: A model-based and data-efficient approach to policy search. In Proceedings of the 28th International Conference on Machine Learning, ICML 2011, pages 465­472. Omnipress, 2011.
[9] Lasse Espeholt, Hubert Soyer, Remi Munos, Karen Simonyan, Volodymir Mnih, Tom Ward, Yotam Doron, Vlad Firoiu, Tim Harley, Iain Dunning, et al. Impala: Scalable distributed deep-rl with importance weighted actor-learner architectures. In Proceedings of the International Conference on Machine Learning (ICML), 2018.
[10] Gregory Farquhar, Tim Rocktaeschel, Maximilian Igl, and Shimon Whiteson. TreeQN and ATreec: Differentiable tree planning for deep reinforcement learning. In International Conference on Learning Representations, 2018.
[11] Carles Gelada, Saurabh Kumar, Jacob Buckman, Ofir Nachum, and Marc G. Bellemare. DeepMDP: Learning continuous latent space models for representation learning. In Kamalika Chaudhuri and Ruslan Salakhutdinov, editors, Proceedings of the 36th International Conference on Machine Learning, volume 97 of Proceedings of Machine Learning Research, pages 2170­2179, Long Beach, California, USA, 09­15 Jun 2019. PMLR.
[12] Cloud tpu. https://cloud.google.com/tpu/. Accessed: 2019.
[13] David Ha and Ju¨rgen Schmidhuber. Recurrent world models facilitate policy evolution. In Proceedings of the 32Nd International Conference on Neural Information Processing Systems, NIPS'18, pages 2455­2467, USA, 2018. Curran Associates Inc.
8

[14] Danijar Hafner, Timothy Lillicrap, Ian Fischer, Ruben Villegas, David Ha, Honglak Lee, and James Davidson. Learning latent dynamics for planning from pixels. arXiv preprint arXiv:1811.04551, 2018.
[15] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Identity mappings in deep residual networks. In 14th European Conference on Computer Vision, pages 630­645, 2016.
[16] Nicolas Heess, Greg Wayne, David Silver, Timothy Lillicrap, Yuval Tassa, and Tom Erez. Learning continuous control policies by stochastic value gradients. In Proceedings of the 28th International Conference on Neural Information Processing Systems - Volume 2, NIPS'15, pages 2944­2952, Cambridge, MA, USA, 2015. MIT Press.
[17] Matteo Hessel, Joseph Modayil, Hado Van Hasselt, Tom Schaul, Georg Ostrovski, Will Dabney, Dan Horgan, Bilal Piot, Mohammad Azar, and David Silver. Rainbow: Combining improvements in deep reinforcement learning. In Thirty-Second AAAI Conference on Artificial Intelligence, 2018.
[18] Dan Horgan, John Quan, David Budden, Gabriel Barth-Maron, Matteo Hessel, Hado van Hasselt, and David Silver. Distributed prioritized experience replay. In International Conference on Learning Representations, 2018.
[19] Max Jaderberg, Volodymyr Mnih, Wojciech Marian Czarnecki, Tom Schaul, Joel Z Leibo, David Silver, and Koray Kavukcuoglu. Reinforcement learning with unsupervised auxiliary tasks. arXiv preprint arXiv:1611.05397, 2016.
[20] Lukasz Kaiser, Mohammad Babaeizadeh, Piotr Milos, Blazej Osinski, Roy H Campbell, Konrad Czechowski, Dumitru Erhan, Chelsea Finn, Piotr Kozakowski, Sergey Levine, et al. Model-based reinforcement learning for atari. arXiv preprint arXiv:1903.00374, 2019.
[21] Steven Kapturowski, Georg Ostrovski, Will Dabney, John Quan, and Remi Munos. Recurrent experience replay in distributed reinforcement learning. In International Conference on Learning Representations, 2019.
[22] Levente Kocsis and Csaba Szepesva´ri. Bandit based monte-carlo planning. In European conference on machine learning, pages 282­293. Springer, 2006.
[23] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. Imagenet classification with deep convolutional neural networks. In Advances in neural information processing systems, pages 1097­1105, 2012.
[24] Sergey Levine and Pieter Abbeel. Learning neural network policies with guided policy search under unknown dynamics. In Z. Ghahramani, M. Welling, C. Cortes, N. D. Lawrence, and K. Q. Weinberger, editors, Advances in Neural Information Processing Systems 27, pages 1071­1079. Curran Associates, Inc., 2014.
[25] Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A Rusu, Joel Veness, Marc G Bellemare, Alex Graves, Martin Riedmiller, Andreas K Fidjeland, Georg Ostrovski, et al. Human-level control through deep reinforcement learning. Nature, 518(7540):529, 2015.
[26] Matej Moravc´ik, Martin Schmid, Neil Burch, Viliam Lisy`, Dustin Morrill, Nolan Bard, Trevor Davis, Kevin Waugh, Michael Johanson, and Michael Bowling. Deepstack: Expert-level artificial intelligence in heads-up no-limit poker. Science, 356(6337):508­513, 2017.
[27] Arun Nair, Praveen Srinivasan, Sam Blackwell, Cagdas Alcicek, Rory Fearon, Alessandro De Maria, Vedavyas Panneershelvam, Mustafa Suleyman, Charles Beattie, Stig Petersen, Shane Legg, Volodymyr Mnih, Koray Kavukcuoglu, and David Silver. Massively parallel methods for deep reinforcement learning. CoRR, abs/1507.04296, 2015.
[28] Junhyuk Oh, Satinder Singh, and Honglak Lee. Value prediction network. In Advances in Neural Information Processing Systems, pages 6118­6128, 2017.
[29] OpenAI. Openai five. https://blog.openai.com/openai-five/, 2018.
9

[30] Tobias Pohlen, Bilal Piot, Todd Hester, Mohammad Gheshlaghi Azar, Dan Horgan, David Budden, Gabriel Barth-Maron, Hado van Hasselt, John Quan, Mel Vecer´ik, et al. Observe and look further: Achieving consistent performance on atari. arXiv preprint arXiv:1805.11593, 2018.
[31] Martin L. Puterman. Markov Decision Processes: Discrete Stochastic Dynamic Programming. John Wiley & Sons, Inc., New York, NY, USA, 1st edition, 1994.
[32] Christopher D Rosin. Multi-armed bandits with episode context. Annals of Mathematics and Artificial Intelligence, 61(3):203­230, 2011.
[33] Maarten PD Schadd, Mark HM Winands, H Jaap Van Den Herik, Guillaume MJ-B Chaslot, and Jos WHM Uiterwijk. Single-player monte-carlo tree search. In International Conference on Computers and Games, pages 1­12. Springer, 2008.
[34] Jonathan Schaeffer, Joseph Culberson, Norman Treloar, Brent Knight, Paul Lu, and Duane Szafron. A world championship caliber checkers program. Artificial Intelligence, 53(2-3):273­289, 1992.
[35] Tom Schaul, John Quan, Ioannis Antonoglou, and David Silver. Prioritized experience replay. In International Conference on Learning Representations, Puerto Rico, 2016.
[36] Simon Schmitt, Matteo Hessel, and Karen Simonyan. Off-policy actor-critic with shared experience replay. arXiv preprint arXiv:1909.11583, 2019.
[37] Marwin HS Segler, Mike Preuss, and Mark P Waller. Planning chemical syntheses with deep neural networks and symbolic ai. Nature, 555(7698):604, 2018.
[38] David Silver, Aja Huang, Chris J. Maddison, Arthur Guez, Laurent Sifre, George van den Driessche, Julian Schrittwieser, Ioannis Antonoglou, Veda Panneershelvam, Marc Lanctot, Sander Dieleman, Dominik Grewe, John Nham, Nal Kalchbrenner, Ilya Sutskever, Timothy Lillicrap, Madeleine Leach, Koray Kavukcuoglu, Thore Graepel, and Demis Hassabis. Mastering the game of Go with deep neural networks and tree search. Nature, 529(7587):484­489, January 2016.
[39] David Silver, Thomas Hubert, Julian Schrittwieser, Ioannis Antonoglou, Matthew Lai, Arthur Guez, Marc Lanctot, Laurent Sifre, Dharshan Kumaran, Thore Graepel, et al. A general reinforcement learning algorithm that masters chess, shogi, and go through self-play. Science, 362(6419):1140­1144, 2018.
[40] David Silver, Julian Schrittwieser, Karen Simonyan, Ioannis Antonoglou, Aja Huang, Arthur Guez, Thomas Hubert, Lucas Baker, Matthew Lai, Adrian Bolton, Yutian Chen, Timothy Lillicrap, Fan Hui, Laurent Sifre, George van den Driessche, Thore Graepel, and Demis Hassabis. Mastering the game of go without human knowledge. Nature, 550:354­359, October 2017.
[41] David Silver, Hado van Hasselt, Matteo Hessel, Tom Schaul, Arthur Guez, Tim Harley, Gabriel DulacArnold, David Reichert, Neil Rabinowitz, Andre Barreto, et al. The predictron: End-to-end learning and planning. In Proceedings of the 34th International Conference on Machine Learning-Volume 70, pages 3191­3199. JMLR. org, 2017.
[42] Richard S. Sutton and Andrew G. Barto. Reinforcement Learning: An Introduction. The MIT Press, second edition, 2018.
[43] Richard S Sutton, Doina Precup, and Satinder Singh. Between mdps and semi-mdps: A framework for temporal abstraction in reinforcement learning. Artificial intelligence, 112(1-2):181­211, 1999.
[44] Aviv Tamar, Yi Wu, Garrett Thomas, Sergey Levine, and Pieter Abbeel. Value iteration networks. In Advances in Neural Information Processing Systems, pages 2154­2162, 2016.
[45] Hado van Hasselt, Matteo Hessel, and John Aslanides. When to use parametric models in reinforcement learning? arXiv preprint arXiv:1906.05243, 2019.
10

[46] Oriol Vinyals, Igor Babuschkin, Wojciech M Czarnecki, Michae¨l Mathieu, Andrew Dudzik, Junyoung Chung, David H Choi, Richard Powell, Timo Ewalds, Petko Georgiev, et al. Grandmaster level in StarCraft II using multi-agent reinforcement learning. Nature, pages 1­5, 2019.
[47] I Vlahavas and I Refanidis. Planning and scheduling. EETN, Greece, Tech. Rep, 2013.
[48] Niklas Wahlstro¨m, Thomas B. Scho¨n, and Marc Peter Deisenroth. From pixels to torques: Policy learning with deep dynamical models. CoRR, abs/1502.02251, 2015.
[49] Manuel Watter, Jost Tobias Springenberg, Joschka Boedecker, and Martin Riedmiller. Embed to control: A locally linear latent dynamics model for control from raw images. In Proceedings of the 28th International Conference on Neural Information Processing Systems - Volume 2, NIPS'15, pages 2746­2754, Cambridge, MA, USA, 2015. MIT Press.
Supplementary Materials
· Pseudocode description of the MuZero algorithm.
· Data for Figures 2, 3, S2, S3, S4 and Tables 1, S1, S2 in JSON format.
Supplementary materials can be accessed from the ancillary file section of the arXiv submission.
Appendix A Comparison to AlphaZero
MuZero is designed for a more general setting than AlphaGo Zero [40] and AlphaZero [39]. In AlphaGo Zero and AlphaZero the planning process makes use of two separate components: a simulator
implements the rules of the game, which are used to update the state of the game while traversing the search tree; and a neural network jointly predicts the corresponding policy and value of a board position produced by the simulator (see Figure 1 A).
Specifically, AlphaGo Zero and AlphaZero use knowledge of the rules of the game in three places: (1) state transitions in the search tree, (2) actions available at each node of the search tree, (3) episode termination within the search tree. In MuZero, all of these have been replaced with the use of a single implicit model learned by a neural network (see Figure 1 B):
1) State transitions. AlphaZero had access to a perfect simulator of the true dynamics process. In contrast, MuZero employs a learned dynamics model within its search. Under this model, each node in the tree is represented by a corresponding hidden state; by providing a hidden state sk-1 and an action ak to the model the search algorithm can transition to a new node sk = g(sk-1, ak).
2) Actions available. AlphaZero used the set of legal actions obtained from the simulator to mask the prior produced by the network everywhere in the search tree. MuZero only masks legal actions at the root of the search tree where the environment can be queried, but does not perform any masking within the search tree. This is possible because the network rapidly learns not to predict actions that never occur in the trajectories it is trained on.
3) Terminal nodes. AlphaZero stopped the search at tree nodes representing terminal states and used the terminal value provided by the simulator instead of the value produced by the network. MuZero does not give special treatment to terminal nodes and always uses the value predicted by the network. Inside the tree, the search can proceed past a terminal node - in this case the network is expected to always predict the same value. This is achieved by treating terminal states as absorbing states during training.
In addition, MuZero is designed to operate in the general reinforcement learning setting: single-agent domains with discounted intermediate rewards of arbitrary magnitude. In contrast, AlphaGo Zero and AlphaZero were designed to operate in two-player games with undiscounted terminal rewards of ±1.
11

Appendix B Search

We now describe the search algorithm used by MuZero. Our approach is based upon Monte-Carlo tree search with
upper confidence bounds, an approach to planning that converges asymptotically to the optimal policy in single
agent domains and to the minimax value function in zero sum games [22]. Every node of the search tree is associated with an internal state s. For each action a from s there is an
edge (s, a) that stores a set of statistics {N (s, a), Q(s, a), P (s, a), R(s, a), S(s, a)}, respectively representing visit counts N , mean value Q, policy P , reward R, and state transition S.
Similar to AlphaZero, the search is divided into three stages, repeated for a number of simulations. Selection: Each simulation starts from the internal root state s0, and finishes when the simulation reaches a leaf node sl. For each hypothetical time-step k = 1...l of the simulation, an action ak is selected according to the stored statistics for internal state sk-1, by maximizing over an upper confidence bound [32][39],

ak = arg max
a

Q(s, a) + P (s, a) ·

b N (s, b) 1 + N (s, a)

c1 + log

b N (s, b) + c2 + 1 c2

(2)

The constants c1 and c2 are used to control the influence of the prior P (s, a) relative to the value Q(s, a) as
nodes are visited more often. In our experiments, c1 = 1.25 and c2 = 19652. For k < l, the next state and reward are looked up in the state transition and reward table sk = S(sk-1, ak),
rk = R(sk-1, ak).
Expansion: At the final time-step l of the simulation, the reward and state are computed by the dynamics function, rl, sl = g(sl-1, al), and stored in the corresponding tables, R(sl-1, al) = rl, S(sl-1, al) = sl. The policy and value are computed by the prediction function, pl, vl = f(sl). A new node, corresponding to state sl is added to the search tree. Each edge (sl, a) from the newly expanded node is initialized to {N (sl, a) = 0, Q(sl, a) = 0, P (sl, a) = pl}. Note that the search algorithm makes at most one call to the dynamics function
and prediction function respectively per simulation; the computational cost is of the same order as in AlphaZero.
Backup: At the end of the simulation, the statistics along the trajectory are updated. The backup is generalized
to the case where the environment can emit intermediate rewards, have a discount  different from 1, and the value estimates are unbounded 3. For k = l...0, we form an l - k-step estimate of the cumulative discounted reward, bootstrapping from the value function vl,

l-1-k

Gk =

 rk+1+ + l-kvl

(3)

 =0

For k = l...1, we update the statistics for each edge (sk-1, ak) in the simulation path as follows,

Q(sk-1, ak)

:=

N (sk-1, ak) · Q(sk-1, ak) N (sk-1, ak) + 1

+

Gk

(4)

N (sk-1, ak) := N (sk-1, ak) + 1

In two-player zero sum games the value functions are assumed to be bounded within the [0, 1] interval. This choice allows us to combine value estimates with probabilities using the pUCT rule (Eqn 2). However, since in many environments the value is unbounded, it is necessary to adjust the pUCT rule. A simple solution would be to use the maximum score that can be observed in the environment to either re-scale the value or set the pUCT constants appropriately [33]. However, both solutions are game specific and require adding prior knowledge to the MuZero algorithm. To avoid this, MuZero computes normalized Q value estimates Q  [0, 1] by using the minimum-maximum values observed in the search tree up to that point. When a node is reached during the selection stage, the algorithm computes the normalized Q values of its edges to be used in the pUCT rule using the equation below:

Q(sk-1, ak) =

Q(sk-1, ak) - mins,aT ree Q(s, a)

(5)

maxs,aT ree Q(s, a) - mins,aT ree Q(s, a)

3In board games the discount is assumed to be 1 and there are no intermediate rewards.

12

Appendix C Hyperparameters
For simplicity we preferentially use the same architectural choices and hyperparameters as in previous work. Specifically, we started with the network architecture and search choices of AlphaZero [39]. For board games, we use the same UCB constants, dirichlet exploration noise and the same 800 simulations per search as in AlphaZero.
Due to the much smaller branching factor and simpler policies in Atari, we only used 50 simulations per search to speed up experiments. As shown in Figure 3B, the algorithm is not very sensitive to this choice. We also use the same discount (0.997) and value transformation (see Network Architecture section) as R2D2 [21].
For parameter values not mentioned in the text, please refer to the pseudocode.

Appendix D Data Generation

To generate training data, the latest checkpoint of the network (updated every 1000 training steps) is used to play games with MCTS. In the board games Go, chess and shogi the search is run for 800 simulations per move to pick an action; in Atari due to the much smaller action space 50 simulations per move are sufficient.
For board games, games are sent to the training job as soon as they finish. Due to the much larger length of Atari games (up to 30 minutes or 108,000 frames), intermediate sequences are sent every 200 moves. In board games, the training job keeps an in-memory replay buffer of the most recent 1 million games received; in Atari, where the visual observations are larger, the most recent 125 thousand sequences of length 200 are kept.
During the generation of experience in the board game domains, the same exploration scheme as the one described in AlphaZero [39] is used. Using a variation of this scheme, in the Atari domain actions are sampled from the visit count distribution throughout the duration of each game, instead of just the first k moves. Moreover, the visit count distribution is parametrized using a temperature parameter T :

N ()1/T

p = b N (b)1/T

(6)

T is decayed as a function of the number of training steps of the network. Specifically, for the first 500k

training steps a temperature of 1 is used, for the next 250k steps a temperature of 0.5 and for the remaining 250k a

temperature of 0.25. This ensures that the action selection becomes greedier as training progresses.

Appendix E Network Input
Representation Function
The history over board states used as input to the representation function for Go, chess and shogi is represented similarly to AlphaZero [39]. In Go and shogi we encode the last 8 board states as in AlphaZero; in chess we increased the history to the last 100 board states to allow correct prediction of draws.
For Atari, the input of the representation function includes the last 32 RGB frames at resolution 96x96 along with the last 32 actions that led to each of those frames. We encode the historical actions because unlike board games, an action in Atari does not necessarily have a visible effect on the observation. RGB frames are encoded as one plane per color, rescaled to the range [0, 1], for red, green and blue respectively. We perform no other normalization, whitening or other preprocessing of the RGB input. Historical actions are encoded as simple bias planes, scaled as a/18 (there are 18 total actions in Atari).
Dynamics Function
The input to the dynamics function is the hidden state produced by the representation function or previous application of the dynamics function, concatenated with a representation of the action for the transition. Actions are encoded spatially in planes of the same resolution as the hidden state. In Atari, this resolution is 6x6 (see description of downsampling in Network Architecture section), in board games this is the same as the board size (19x19 for Go, 8x8 for chess, 9x9 for shogi).

13

In Go, a normal action (playing a stone on the board) is encoded as an all zero plane, with a single one in the position of the played stone. A pass is encoded as an all zero plane.
In chess, 8 planes are used to encode the action. The first one-hot plane encodes which position the piece was moved from. The next two planes encode which position the piece was moved to: a one-hot plane to encode the target position, if on the board, and a second binary plane to indicate whether the target was valid (on the board) or not. This is necessary because for simplicity our policy action space enumerates a superset of all possible actions, not all of which are legal, and we use the same action space for policy prediction and to encode the dynamics function input. The remaining five binary planes are used to indicate the type of promotion, if any (queen, knight, bishop, rook, none).
The encoding for shogi is similar, with a total of 11 planes. We use the first 8 planes to indicate where the piece moved from - either a board position (first one-hot plane) or the drop of one of the seven types of prisoner (remaining 7 binary planes). The next two planes are used to encode the target as in chess. The remaining binary plane indicates whether the move was a promotion or not.
In Atari, an action is encoded as a one hot vector which is tiled appropriately into planes.
Appendix F Network Architecture
The prediction function pk, vk = f(sk) uses the same architecture as AlphaZero: one or two convolutional layers that preserve the resolution but reduce the number of planes, followed by a fully connected layer to the size of the output.
For value and reward prediction in Atari we follow [30] in scaling targets using an invertible transform h(x) = sign(x)( |x| + 1 - 1 + x), where = 0.001 in all our experiments. We then apply a transformation  to the scalar reward and value targets in order to obtain equivalent categorical representations. We use a discrete support set of size 601 with one support for every integer between -300 and 300. Under this transformation, each scalar is represented as the linear combination of its two adjacent supports, such that the original value can be recovered by x = xlow  plow + xhigh  phigh. As an example, a target of 3.7 would be represented as a weight of 0.3 on the support for 3 and a weight of 0.7 on the support for 4. The value and reward outputs of the network are also modeled using a softmax output of size 601. During inference the actual value and rewards are obtained by first computing their expected value under their respective softmax distribution and subsequently by inverting the scaling transformation. Scaling and transformation of the value and reward happens transparently on the network side and is not visible to the rest of the algorithm.
Both the representation and dynamics function use the same architecture as AlphaZero, but with 16 instead of 20 residual blocks [15]. We use 3x3 kernels and 256 hidden planes for each convolution.
For Atari, where observations have large spatial resolution, the representation function starts with a sequence of convolutions with stride 2 to reduce the spatial resolution. Specifically, starting with an input observation of resolution 96x96 and 128 planes (32 history frames of 3 color channels each, concatenated with the corresponding 32 actions broadcast to planes), we downsample as follows:
· 1 convolution with stride 2 and 128 output planes, output resolution 48x48.
· 2 residual blocks with 128 planes
· 1 convolution with stride 2 and 256 output planes, output resolution 24x24.
· 3 residual blocks with 256 planes.
· Average pooling with stride 2, output resolution 12x12.
· 3 residual blocks with 256 planes.
· Average pooling with stride 2, output resolution 6x6.
The kernel size is 3x3 for all operations. For the dynamics function (which always operates at the downsampled resolution of 6x6), the action is first encoded as an image, then stacked with the hidden state of the previous step along the plane dimension.
14

Appendix G Training

During training, the MuZero network is unrolled for K hypothetical steps and aligned to sequences sampled from

the trajectories generated by the MCTS actors. Sequences are selected by sampling a state from any game in the

replay buffer, then unrolling for K steps from that state. In Atari, samples are drawn according to prioritized replay

[35], with priority P (i) =

pi k pk

,

where

pi

=

|i

-

zi|,



is

the

search

value

and

z

the

observed

n-step

return.

To

correct for sampling bias introduced by the prioritized sampling, we scale the loss using the importance sampling

ratio

wi

=

(

1 N

·

P

1 (i)

)

.

In

all

our

experiments,

we

set



=



=

1.

For

board

games,

states

are

sampled

uniformly.

Each observation ot along the sequence also has a corresponding MCTS policy t, estimated value t and

environment reward ut. At each unrolled step k the network has a loss to the value, policy and reward target for

that step, summed to produce the total loss for the MuZero network (see Equation 1). Note that, in board games

without intermediate rewards, we omit the reward prediction loss. For board games, we bootstrap directly to the

end of the game, equivalent to predicting the final outcome; for Atari we bootstrap for n = 10 steps into the future.

To maintain roughly similar magnitude of gradient across different unroll steps, we scale the gradient in two

separate locations:

·

We scale the loss of each head by

1 K

,

where

K

is the number

of unroll

steps.

This

ensures

that the total

gradient has similar magnitude irrespective of how many steps we unroll for.

·

We also scale

the gradient at the start

of

the

dynamics function

by

1 2

.

This

ensures that the total gradient

applied to the dynamics function stays constant.

In the experiments reported in this paper, we always unroll for K = 5 steps. For a detailed illustration, see

Figure 1.

To improve the learning process and bound the activations, we also scale the hidden state to the same range as

the

action

input

([0, 1]):

sscaled

=

s-min(s) max(s)-min(s)

.

All experiments were run using third generation Google Cloud TPUs [12]. For each board game, we used

16 TPUs for training and 1000 TPUs for selfplay. For each game in Atari, we used 8 TPUs for training and

32 TPUs for selfplay. The much smaller proportion of TPUs used for selfplay in Atari is due to the smaller

number of simulations per move (50 instead of 800) and the smaller size of the dynamics function compared to the

representation function.

Appendix H Reanalyze
To improve the sample efficiency of MuZero we introduced a second variant of the algorithm, MuZero Reanalyze. MuZero Reanalyze revisits its past time-steps and re-executes its search using the latest model parameters, potentially resulting in a better quality policy than the original search. This fresh policy is used as the policy target for 80% of updates during MuZero training. Furthermore, a target network [25] ·, v- = f- (s0), based on recent parameters -, is used to provide a fresher, stable n-step bootstrapped target for the value function, zt = ut+1 + ut+2 + ... + n-1ut+n + nvt-+n. In addition, several other hyperparameters were adjusted ­ primarily to increase sample reuse and avoid overfitting of the value function. Specifically, 2.0 samples were drawn per state, instead of 0.1; the value target was weighted down to 0.25 compared to weights of 1.0 for policy and reward targets; and the n-step return was reduced to n = 5 steps instead of n = 10 steps.

Appendix I Evaluation
We evaluated the relative strength of MuZero (Figure 2) in board games by measuring the Elo rating of each player. We estimate the probability that player a will defeat player b by a logistic function p(a defeats b) = (1 + 10(celo(e(b)-e(a))))-1, and estimate the ratings e(·) by Bayesian logistic regression, computed by the BayesElo program [6] using the standard constant celo = 1/400.

15

Figure S1: Repeatability of MuZero in Atari for five games. Total reward is shown on the y-axis, millions of training steps on the x-axis. Dark line indicates median score across 10 separate training runs, light lines indicate individual training runs, and the shaded region indicates 25th to 75th percentile.
Elo ratings were computed from the results of a 800 simulations per move tournament between iterations of MuZero during training, and also a baseline player: either Stockfish, Elmo or AlphaZero respectively. Baseline players used an equivalent search time of 100ms per move. The Elo rating of the baseline players was anchored to publicly available values [39].
In Atari, we computed mean reward over 1000 episodes per game, limited to the standard 30 minutes or 108,000 frames per episode [27], using 50 simulations per move unless indicated otherwise. In order to mitigate the effects of the deterministic nature of the Atari simulator we employed two different evaluation strategies: 30 noop random starts and human starts. For the former, at the beginning of each episode a random number of between 0 and 30 noop actions are applied to the simulator before handing control to the agent. For the latter, start positions are sampled from human expert play to initialize the Atari simulator before handing the control to the agent [27].
16

Game
alien amidar assault asterix asteroids atlantis bank heist battle zone beam rider berzerk bowling boxing breakout centipede chopper command crazy climber defender demon attack double dunk enduro fishing derby freeway frostbite gopher gravitar hero ice hockey jamesbond kangaroo krull kung fu master montezuma revenge ms pacman name this game phoenix pitfall pong private eye qbert riverraid road runner robotank seaquest skiing solaris space invaders star gunner surround tennis time pilot tutankham up n down venture video pinball wizard of wor yars revenge zaxxon
# best

Random
227.75 5.77
222.39 210.00 719.10 12,850.00
14.20 2,360.00
363.88 123.65
23.11 0.05 1.72
2,090.87 811.00
10,780.50 2,874.50 152.07 -18.55 0.00 -91.71 0.01 65.20 257.60 173.00 1,026.97 -11.15 29.00 52.00 1,598.05 258.50 0.00 307.30 2,292.35 761.40 -229.44 -20.71 24.94 163.88 1,338.50 11.50 2.16 68.40
-17,098.09 1,236.30 148.03 664.00 -9.99 -23.84 3,568.00 11.43 533.40 0.00 0.00 563.50 3,092.91 32.50
0

Human
7,127.80 1,719.53
742.00 8,503.33 47,388.67 29,028.13
753.13 37,187.50 16,926.53 2,630.42
160.73 12.06 30.47
12,017.04 7,387.80 35,829.41 18,688.89 1,971.00
-16.40 860.53 -38.80
29.60 4,334.67 2,412.50 3,351.43 30,826.38
0.88 302.80 3,035.00 2,665.53 22,736.25 4,753.33 6,951.60 8,049.00 7,242.60 6,463.69
14.59 69,571.27 13,455.00 17,118.00 7,845.00
11.94 42,054.71 -4,336.93 12,326.67 1,668.67 10,250.00
6.53 -8.27 5,229.10 167.59 11,693.23 1,187.50 17,667.90 4,756.52 54,576.93 9,173.30
5

SimPLe [20]
616.90 74.30
527.20 1,128.30
793.60 20,992.50
34.20 4,031.20
621.60 -
30.00 7.80 16.40 -
979.40 62,583.60
208.10
-90.70 16.70 236.90 596.80 173.40 2,656.60 -11.60 100.50 51.20 2,204.80 14,862.50 1,480.00 2,420.70 12.80 35.00 1,288.80 1,957.80 5,640.60 683.30 3,350.30 5,664.30 -
0

Ape-X [18]
40,805.00 8,659.00
24,559.00 313,305.00 155,495.00 944,498.00
1,716.00 98,895.00 63,305.00 57,197.00
18.00 100.00 801.00 12,974.00 721,851.00 320,426.00 411,944.00 133,086.00
24.00 2,177.00
44.00 34.00 9,329.00 120,501.00 1,599.00 31,656.00 33.00 21,323.00 1,416.00 11,741.00 97,830.00 2,500.00 11,255.00 25,783.00 224,491.00 -1.00 21.00 50.00 302,391.00 63,864.00 222,235.00 74.00 392,952.00 -10,790.00 2,893.00 54,681.00 434,343.00
7.00 24.00 87,085.00 273.00 401,884.00 1,813.00 565,163.00 46,204.00 148,595.00 42,286.00
5

R2D2 [21]
229,496.90 29,321.40
108,197.00 999,153.30 357,867.70 1,620,764.00
24,235.90 751,880.00 188,257.40 53,318.70
219.50 98.50
837.70 599,140.30 986,652.00 366,690.70 665,792.00 140,002.30
23.70 2,372.70
85.80 32.50 315,456.40 124,776.30 15,680.70 39,537.10 79.30 25,354.00 14,130.70 218,448.10 233,413.30 2,061.30 42,281.70 58,182.70 864,020.00
0.00 21.00 5,322.70 408,850.00 45,632.10 599,246.70 100.40 999,996.70 -30,021.70 3,787.20 43,223.40 717,344.00
9.90 -0.10 445,377.30 395.30 589,226.90 1,970.70 999,383.20 144,362.70 995,048.40 224,910.70
13

MuZero
741,812.63 28,634.39
143,972.03 998,425.00 678,558.64 1,674,767.20
1,278.98 848,623.00 454,993.53
85,932.60 260.13 100.00 864.00
1,159,049.27 991,039.70 458,315.40 839,642.95 143,964.26 23.94 2,382.44 91.16 33.03 631,378.53 130,345.58 6,682.70 49,244.11 67.04 41,063.25 16,763.60 269,358.27 204,824.00 0.00 243,401.10 157,177.85 955,137.84 0.00 21.00 15,299.98 72,276.00 323,417.18 613,411.80 131.13 999,976.52 -29,968.36 56.62 74,335.30 549,271.70 9.99 0.00 476,763.90 491.48 715,545.61 0.40 981,791.88 197,126.00 553,311.46 725,853.90
37

MuZero normalized
10,747.5 % 1,670.5 % 27,664.9 % 12,036.4 % 1,452.4 % 10,272.6 %
171.2 % 2,429.9 % 2,744.9 % 3,423.1 %
172.2 % 832.2 % 2,999.2 % 11,655.6 % 15,056.4 % 1,786.6 % 5,291.2 % 7,906.4 % 1,976.3 % 276.9 % 345.6 % 111.6 % 14,786.7 % 6,036.8 % 204.8 % 161.8 % 650.0 % 14,986.9 % 560.2 % 25,083.4 % 910.1 %
0.0 % 3,658.7 % 2,690.5 % 14,725.3 %
3.4 % 118.2 % 22.0 % 542.6 % 2,041.1 % 7,830.5 % 1,318.7 % 2,381.5 % -100.9 % -10.6 % 4,878.7 % 5,723.0 % 120.9 % 153.1 % 28,486.9 % 307.4 % 6,407.0 %
0.0 % 5,556.9 % 4,687.9 % 1,068.7 % 7,940.5 %

Table S1: Evaluation of MuZero in Atari for individual games with 30 random no-op starts. Best result for

each game highlighted in bold. Each episode is limited to a maximum of 30 minutes of game time (108k frames).

SimPLe was only evaluated on 36 of the 57 games, unavailable results are indicated with `-'. Human normalized

score is calculated as snormalized

=

. sagent -srandom
shuman -srandom

17

Game
alien amidar assault asterix asteroids atlantis bank heist battle zone beam rider berzerk bowling boxing breakout centipede chopper command crazy climber defender demon attack double dunk enduro fishing derby freeway frostbite gopher gravitar hero ice hockey jamesbond kangaroo krull kung fu master montezuma revenge ms pacman name this game phoenix pitfall pong private eye qbert riverraid road runner robotank seaquest skiing solaris space invaders star gunner surround tennis time pilot tutankham up n down venture video pinball wizard of wor yars revenge zaxxon
# best

Random
128.30 11.79
166.95 164.50 877.10 13,463.00
21.70 3,560.00
254.56 196.10
35.16 -1.46 1.77 1,925.45 644.00 9,337.00 1,965.50 208.25 -15.97 -81.84 -77.11 0.17 90.80 250.00 245.50 1,580.30 -9.67 33.50 100.00 1,151.90 304.00 25.00 197.80 1,747.80 1,134.40 -348.80 -17.95 662.78 159.38 588.30 200.00 2.42 215.50 -15,287.35 2,047.20 182.55 697.00 -9.72 -21.43 3,273.00 12.74 707.20 18.00 0.00 804.00 1,476.88 475.00
0

Human
6,371.30 1,540.43
628.89 7,536.00 36,517.30 26,575.00
644.50 33,030.00 14,961.02 2,237.50
146.46 9.61
27.86 10,321.89 8,930.00 32,667.00 14,296.00 3,442.85
-14.37 740.17
5.09 25.61 4,202.80 2,311.00 3,116.00 25,839.40
0.53 368.50 2,739.00 2,109.10 20,786.80 4,182.00 15,375.05 6,796.00 6,686.20 5,998.91
15.46 64,169.07 12,085.00 14,382.20 6,878.00
8.94 40,425.80 -3,686.58 11,032.60 1,464.90 9,528.00
5.37 -6.69 5,650.00 138.30 9,896.10 1,039.00 15,641.09 4,556.00 47,135.17 8,443.00
6

Ape-X [18]
17,732.00 1,047.00
24,405.00 283,180.00 117,303.00 918,715.00
1,201.00 92,275.00 72,234.00 55,599.00
30.00 81.00 757.00 5,712.00 576,602.00 263,954.00 399,865.00 133,002.00 22.00 2,042.00 22.00 29.00 6,512.00 121,168.00 662.00 26,345.00 24.00 18,992.00 578.00 8,592.00 72,068.00 1,079.00 6,135.00 23,830.00 188,789.00 -273.00 19.00 865.00 380,152.00 49,983.00 127,112.00 69.00 377,180.00 -11,359.00 3,116.00 50,699.00 432,958.00
6.00 23.00 71,543.00 128.00 347,912.00 936.00 873,989.00 46,897.00 131,701.00 37,672.00
5

MuZero
713,387.37 26,638.80
143,900.58 985,801.95 606,971.12 1,653,202.50
962.11 791,387.00 419,460.76
87,308.60 194.03 56.60 849.59
1,138,294.60 932,370.10 412,213.90 823,636.00 143,858.05 23.12 2,264.20 57.45 28.38 613,944.04 129,218.68 3,390.65 44,129.55 52.40 39,107.20 13,210.50 257,706.70 174,623.60 57.10 230,650.24 152,723.62 943,255.07 -801.10 19.20 5,067.59 39,302.10 315,353.33 580,445.00 128.80 997,601.01 -29,400.75 2,108.08 57,450.41 539,342.70 8.46 -2.30 405,829.30 351.76 607,807.85 21.10 970,881.10 196,279.20 888,633.84 592,238.70
46

MuZero normalized
11,424.9 % 1,741.9 %
31,115.2 % 13,370.9 %
1,700.6 % 12,505.6 %
151.0 % 2,673.3 % 2,850.5 % 4,267.3 %
142.7 % 524.5 % 3,249.6 % 13,533.9 % 11,244.6 % 1,726.9 % 6,663.7 % 4,441.0 % 2,443.1 % 285.4 % 163.7 % 110.9 % 14,928.3 % 6,257.6 % 109.6 % 175.4 % 608.5 % 11,663.8 % 496.8 % 26,802.6 % 851.1 %
0.8 % 1,518.4 % 2,990.7 % 16,969.6 %
-7.1 % 111.2 %
6.9 % 328.2 % 2,281.9 % 8,688.9 % 1,938.3 % 2,480.4 % -121.7 %
0.7 % 4,465.9 % 6,099.5 %
120.5 % 129.8 % 16,935.5 % 270.0 % 6,606.9 %
0.3 % 6,207.2 % 5,209.9 % 1,943.0 % 7,426.8 %

Table S2: Evaluation of MuZero in Atari for individual games from human start positions. Best result for each game highlighted in bold. Each episode is limited to a maximum of 30 minutes of game time (108k frames).

18

Model
s0 rk, sk pk, vk

= h(o1, ..., ot)

 

= g(sk-1, ak)

pk, vk, rk = µ(o1, ..., ot, a1, ..., ak)

= f(sk)



Search t, t = M CT S(s0t , µ)
at  t

Learning Rule

pkt , vtk, rtk = µ(o1, ..., ot, at+1, ..., at+k)

zt =

uT ut+1 + ut+2 + ... + n-1ut+n + nt+n

for games for general MDPs

K
lt() = lr(ut+k, rtk) + lv(zt+k, vtk) + lp(t+k, pkt ) + c||||2
k=0

Losses

lr(u, r) =

0 (u)T log r

lv(z, q) =

(z - q)2 (z)T log q

lp(, p) = T log p

for games for general MDPs
for games for general MDPs

Figure S2: Equations summarising the MuZero algorithm. Here, (x) refers to the representation of a real number x through a linear combination of its adjacent integers, as described in the Network Architecture section.

19

Figure S3: Details of MuZero evaluations (A-B) and policy improvement ablations (C-D). (A-B) Distribution of evaluation depth in the search tree for the learned model for the evaluations in Figure 3A-B. The network was trained over 5 hypothetical steps, as indicated by the red line. Dark blue line indicates median depth from the root, dark shaded region shows 25th to 75th percentile, light shaded region shows 5th to 95th percentile. (C) Policy improvement in Ms. Pacman - a single network was trained at 50 simulations per search and is evaluated at different numbers of simulations per search, including playing according to the argmax of the raw policy network. The policy improvement effect of the search over the raw policy network is clearly visible throughout training. This consistent gap between the performance with and without search highlights the policy improvement that MuZero exploits, by continually updating towards the improved policy, to efficiently progress towards the optimal policy. (D) Policy improvement in Go - a single network was trained at 800 simulations per search and is evaluated at different numbers of simulations per search. In Go, the playing strength improvement from longer searches is much larger than in Ms. Pacman and persists throughout training, consistent with previous results in [40]. This suggests, as might intuitively be expected, that the benefit of models is greatest in precision planning domains.
20

Figure S4: Learning curves of MuZero in Atari for individual games. Total reward is shown on the y-axis,

millions of training steps on the x-axis. Line indicates mean score across 1000 evaluation games, shaded region

indicates standard deviation.

21

