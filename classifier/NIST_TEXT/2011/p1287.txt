Tulsa: Web Search for Writing Assistance

Duo Ding1, Xingping Jiang2, Matthew R. Scott2, Ming Zhou2, Yong Yu1 1Shanghai Jiao Tong University, Shanghai, 200240, P. R. China 1{dding, yyu}@apex.sjtu.edu.cn 2Microsoft Research Asia, Beijing, 100080, P. R. China 2{v-pjiang, mrscott, mingzhou}@microsoft.com

Categories and Subject Descriptors
H.3 Information Storage Retrieval: Online Information Services
General Terms
Management, Design, Human Factors, Language.

1. INTRODUCTION
Searching the web while authoring has become a common behavior for many users. Some search the web to research content, while others, especially those writing in a foreign language, search to learn if their usage is appropriate. Can we unify the experiences of search and writing to make authoring more productive? That's the central question of project Tulsa, which puts the web at writers' fingertips in a novel writing assistance experience based on implicit web search and natural language techniques. It provides assistance at three levels: word, phrase and paragraph. Tulsa offers web-mined, contextual reference information and suggestions for completing or revising words and phrases. Paragraph analysis is also provided which can detect outlier usage of language in larger chunks of text. Tulsa bases its suggestions and rankings on the Web as Corpus (WaC) through search engine queries, combined with a Support Vector Machine (SVM) trained on N-gram language features of a web-scale language model.
2. OVERVIEW
In our demo, Tulsa is realized as an add-in to a word processing application with three key features. "Sense" enables word and phrase contextual suggestions. "Analysis" examines the document text to suggest potential language errors. And "Bilingual Mode" makes writing in a foreign language easier.
Sense: The primary feature of Tulsa, "Sense," provides word and phrase completion in addition to revision suggestions which exploit writing context. "Sense" operates in three writing scenarios. The first is word complete, which occurs when the cursor is at the end of a word; Tulsa provides auto-completion results derived from a web-based dictionary. Second is the revision scenario, which occurs when the cursor is within a word; Tulsa suggests statistically more likely alternatives according to the context. To achieve this, a web-scale language model [1][2] is leveraged along with search engine hit numbers to train a SVM model. After training, each suggestion candidate is assigned a probability score for ranking the top N shown to the user (Figure 1). The third scenario is sentence complete, and occurs when the space key is entered after a word; Tulsa offers web-based suggestions to complete the phrase or sentence. Figure 2 shows the interface of Tulsa in the revision scenario.
Copyright is held by the author/owner(s). SIGIR'11, July 25­29, 2011, Beijing, China. ACM 978-1-4503-0757-4/11/07.

Figure 1: Tulsa high level design Analysis: The "Analysis" feature of Tulsa helps users find language usage mistakes and semantic errors, including grammar and collocation problems. The method "touches-up" every trigram in the paragraph and calculates probability scores for them. In this way, it operates like a batch mode of the "Sense" feature. Additionally, we augment the "Analysis" feature with heuristic language rules to help detect writing quality mistakes. For example, when the same word or expression appears too often inside a paragraph, Tulsa will suggest the user to replace them with web-culled suggestions, synonyms or similar expressions. Bilingual Mode: After turning "Bilingual Mode" on, webmined translations of each suggestion will appear besides the results. In the tooltip reference window that appears when hovering the mouse over suggestions; the definition, and sample sentences will appear in both the users' original language and target language, and highlighted using word-alignment techniques.
Figure 2: A screenshot of Tulsa providing suggestions.
3. REFERENCES
[1] Jian Huang, Jianfeng Gao, and etc. 2010. Exploring Web Scale Language Models for Search Query Processing. In Proceeding of WWW 2010, Raleigh, USA.
[2] Kuansan Wang, Christopher Thrasher and etc. 2010. An overview of Microsoft Web N-gram Corpus and Applications. In Proceeding of the NAACL HLT 2010: Demonstration Session, pages 45-48. Los Angeles, California, USA.

1287

