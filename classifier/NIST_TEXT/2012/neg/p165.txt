Increasing Temporal Diversity with Purchase Intervals
Gang Zhao, Mong Li Lee, Wynne Hsu and Wei Chen
School of Computing, National University of Singapore 13 Computing Drive, NUS, Republic of Singapore, 117417
{zhaogang,leeml,whsu,weichen}@comp.nus.edu.sg

ABSTRACT
The development of Web 2.0 technology has led to huge economic benefits and challenges for both e-commerce websites and online shoppers. One core technology to increase sales and consumers' satisfaction is the use of recommender systems. Existing product recommender systems consider the order of items purchased by users to obtain a list of recommended items. However, they do not consider the time interval between the products purchased. For example, there is often an interval of 2-3 months between the purchase of printer ink cartridges or refills. Thus, recommending appropriate ink cartridges one week before the user needs to replace the depleted ink cartridges would increase the likelihood of a purchase decision. In this paper, we propose to utilize the purchase interval information to improve the performance of the recommender systems for e-commerce. We design an efficient algorithm to compute the purchase intervals between product pairs from users' purchase history and integrate this information into the marginal utility model. We evaluate our approach on a real world ecommerce dataset. Experimental results demonstrate that our approach significantly improves the conversion rate and temporal diversity compared to state-of-the-art algorithms.
Categories and Subject Descriptors
H.3.3 [Information Storage and Retrieval]: [Information Search and Retrieval]
General Terms
Algorithms, Experimentation, Measurement, Performance
Keywords
Recommender System, E-commerce, Personalization, Temporal Diversity, Utility Theory, Purchase Intervals
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. SIGIR'12, August 12­16, 2012, Portland, Oregon, USA. Copyright 2012 ACM 978-1-4503-1472-5/12/08 ...$10.00.

1. INTRODUCTION
Advances in Web 2.0 technology has resulted in huge economic benefits and challenges for e-commerce websites . A report in [7] reveals that the sales volume of B2C (businessto-Consumer) in China market is about 47 billion RMB yuan ( 7.5 billion US dollar) in 2011, and is expected to reach 650 billion RMB yuan ( 103 billion US dollar) in 2013. Eservice providers are keen to invest in technologies that help users make purchase decisions and increase the satisfaction of users' online shopping experiences.
One core technology in e-commerce is the use of recommender systems to produce a list of recommendations that users may be interested to buy. Research in recommender systems build models to characterize items (content-based filtering [19]) or users (collaborative filtering [4, 17, 12]) or both (hybrid recommender systems [13, 15]) so as to predict the rating or preference that a user would give to an item. Items with the highest predicted ratings are then recommended to the user. These models assume that the value of an item for a user does not change over time.
The works in [9, 16, 22] examine the temporal dynamics in recommendation systems. [16] consider the order of the items purchased and apply the Markov Chain theory to predict the next item that a user will purchase. [9, 22] design models to capture changes in user preferences for products over time due to external events such as new product offerings, seasonal changes or festive holidays (short-term bias) as well as long term interest. Note that these works have low temporal diversity [10] since they will repeatedly recommend the same top-k items to a user if s/he does not make purchases often.
Figure 1 shows the purchase histories of 5 users for products a, b, c, d, e. We use Hi to denote the purchase history of user ui. Suppose we want to recommend some products to user u5 at time point 24. Since u5 has previously bought products a and c, the algorithms in [16, 22] would recommend product d to u5. This is because based on the purchase order and short-term bias, both users u1 and u3 buy d after purchasing c. From the long term interest of users [22], we see that users who purchase product c always purchase d. Further, suppose u5 does not buy d at time point 24. When s/he logs into the system at time points 19 and 21, the algorithms in [16, 22] will still recommend d to u5.
In this work, we advocate that the intervals between user purchases may influence a user's purchase decision. A quick survey reveals that users who purchase an iphone usually purchase apps one week later, after they have setup the new phone and become familiar with its use. Thus recommend-

165

H1 c
h
H2 a
h

d

b eb a

h

h hh h

d

e

h

h

H3 a

c

h

h

d be h hh

H4

a

c

h

h

a

c

? ??

H 5 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 Time

Figure 1: Example of Users' Purchase History

ing apps to a new iphone user a day after is not likely to increase sales, whereas pushing apps 5-6 days later is probably more effective.
Consider again our example in Figure 1. For illustrative purposes, let us assume that the interval between each time point is a day. We observe that user u2 buys product d 14 days after s/he has bought a, while user u3 buys d 12 days after s/he has bought a. We could conclude that, on average, users are likely to purchase d 13 days after s/he has purchased a. Assuming that all the users u1 to u5 are similar, we can summarize the average purchase interval between product pairs from their purchase histories as shown in Table 1. Based on Table 1, if u5 logs into the system at time point 24, then we will recommend product d since s/he has bought a 13 days ago. However, if s/he logs into the system at time point 27, then we will recommend product b to him/her because we see that users who bought c tend to buy b 11 days later. Similarly, our approach will recommend e to u5 if s/he logs into the system at time point 29.
Theories in economics and consumer behavior postulate that the value of certain products may change over time, especially if the user has recently purchased them. This is known as the Law of Diminishing Marginal Utility [1]. For example, a user is less likely to buy a second computer or mobile phone if s/he has recently bought one. In contrast, products such as milk, bread and eggs are likely to be purchased over and over again. Thus the value or marginal utility of a product for a user depends on his/her purchase history. Recent works have applied these theories to recommender systems [11, 21]. The authors in [21] incorporate marginal utility into product recommender systems. They adapt the widely used Cobb-Douglas utility function [3] to model product-specific diminishing marginal return and user-specific basic utility to personalize recommendation.
Here, we propose a framework that incorporates purchase intervals for product recommendation. The model in our framework will combine purchase interval information in users' purchase histories with marginal utility. This enables us to increase the temporal diversity of the recommended items which is an important facet of product recommender systems [10]. Given the scale of users, products and purchase history in any e-commerce website, we design an algorithm to efficiently compute the purchase interval between

Table 1: Average Purchase Intervals ab c d e
a - 15 5.7 13 18.5 b 4 - - - 2.5 c - 11 - 7 13.5 d 14 3 - - 6.3 e6 2 - - -

pairs of product for all users. We evaluate our method on a real world data set obtained from an e-commerce B2C website Jingdong in China. The experimental results show that our approach improves the conversion rate, precision and recall of the state-of-the-art utility-based recommendation algorithm [21]. Further, we can achieve a significantly higher temporal diversity compared to traditional recommender systems.
The rest of the paper is organized as follows. Section 2 gives the background of the concepts used in this paper. Section 3 describes our proposed framework. Section 4 gives the results of our experimental study. Section 5 discuss related works and we conclude in section 6.
2. PRELIMINARIES
In this section, we provide the background for the economics concepts used in our proposed model. We review the notions of utility, utility surplus and the law of diminishing marginal utility and discuss how these concepts are adapted to model product-specific diminishing marginal return and user-specific utility for personalized recommendation.
2.1 Utility and Utility Surplus
Utility and Utility Surplus are two fundamental concepts from economics. Utility can be defined as a measure of the satisfaction obtained from the consumption or purchase of various goods and services. The utility of a product i, denoted as i, can be modeled as the weighted sum of k characteristics or features of the product as follows:

i = k  cki

(1)

k

where cki is the kth feature of product i and k is its weight.

166

Utility surplus determines the excess utility one gets by purchasing a product. It is defined as the gain in the utility of a product minus the cost/price of the product as follows:

U S(i) = i -  · pricei

(2)

where pricei is the price of product i and  is the marginal net utility of money.
Equations 1 and 2 assume that users have the same preference for the features of a product. In reality, users may have different preferences for a product's features. In order to personalize product recommendations, we revise the above equations to allow user-specific preferences for product features as follows:

u,i =

uk  cki

(3)

k

U S(u, i) = u,i - u · pricei

(4)

where uk is the user u's preference for the kth feature of product i and u is the sensitivity of user u to the product price.

Consumer behavior theory shows that a person usually

makes a purchase decision depending on a product's utility

surplus. Hence, our goal is to find the list of products that

maximizes the utility surplus for users.

2.2 Law of Diminishing Returns
The Law Of Diminishing Marginal Utility states the marginal utility of product drops as the consumption of the product increases. Thus, each product will have a product-specific diminishing rate i. [21] use the well-known Constant elasticity of substitution(CES) to capture this property. If a user has already purchased Xi quantity of product i, then then the marginal utility of buying an additional unit of i is (Xi + 1)i - Xii .
By taking into consideration the Law Of Diminishing Marginal Utility, we can refine the utility surplus as follows:

U S(Xi, i, u) = u,i · ((Xi + 1)i - Xii ) - u · pricei (5)
Note that in Equation 5, the utility surplus is decreased due to the diminishing effect.
3. PROPOSED FRAMEWORK
Our proposed framework incorporates the information of purchase intervals into the utility surplus model. It has three main phases:
Phase I: Generate Purchase Interval Cube. This phase computes a purchase interval matrix Mu for each user from his/her purchase history. Each cell Mu[i, j] stores the interval between the purchase of products i and j for user u. We obtain a purchase interval cube when we combine the purchase interval matrix of all the users. Section 3.1 gives the computational details of this phase.
Phase II: Build Model. This phase uses the SVD matrix factorization method [8] to learn the feature vectors of users and products from the training data. Then we can learn the optimal settings for the parameters in our purchase interval enhanced utility based model. We discuss how to incorporate the purchase interval information into the utility model in Equation 5 in Section 3.2 and estimate its parameters in Section 3.3.

Phase III: Recommendation. When a user logs into the system at time t, we use our model to compute the utility surplus of each product at this time point t and rank them. A list of top K products that the user is most likely to purchase is recommended to the user.

3.1 Purchase Interval Cube
An e-commerce database D consists of a set of users U , product items I and purchase histories of users H. Each entry in the purchase history is a tuple < u, i, t > which records the time t at which user u purchase item i.
Let Hu be the purchase history of user u and Iu be the set of products purchased by a user u over a time window . For each pair of products i, j  Iu, we want to find the average time interval when u would purchase j after purchasing i. Since u may purchase products i and j multiple times, we let Ti and Tj be the sets of time stamps at which u bought i and j respectively. For each tj  Tj, we find the ti  Ti such that tj - ti is the smallest and is less than . Let  = {[ti1 , tj1 ], [ti2 , tj2 ], · · · , [tin , tjn ]} be the set containing such pairs of time stamps. Then the average purchase interval du,i,j where a user u buys product j after buying product i can be determined as follows:

du,i,j =

t [tir ,tjr ] jr - tir /(log2(2 + count(tjr , tir ))
[tir ,tjr ] 1/(log2(2 + count(tjr , tir )) (6)

where the function count(tir , tjr ) returns the number of products purchased by the user between time stamps tir and tjr .
Note that Equation 6 considers both the time interval be-

tween the purchase of the two products i and j, as well as

the number of products bought in between i and j. We pe-

nalize the interval that has more purchases in between by

taking the log.

Given the huge amount of user purchase histories and the

large number of users and products, we need an efficient

method to compute the purchase intervals between prod-

uct pairs. Algorithm 1 gives the details of generating the

purchase interval cube that captures the purchase interval

between pairs of products for all users.

The algorithm takes as input the set of user purchase his-

tories H and the window size . Each entry e in the user

purchase history is a 3-tuple consisting of the user id u, prod-

uct id id and a time stamp t. The output is a purchase in-

terval cube M that stores the purchase intervals of products

for all users. We denote the purchase history and purchase

interval matrix for each user u as Hu and Mu respectively.

For each user, we slide a window of size  over his/her

purchase history Hu and use a list Q to maintain the pur-

chases which occur in the current window. The list R stores

tuples containing product pairs and their smallest purchase

intervals. Each entry in R is a 4-tuple < i, j, x, c > where i

and j are product ids, x is the purchase interval between i

and j, and c is the number of products purchased between i

and j. In order to reduce computation, we use two lists Rw

and Rw to temporally store the interval pairs corresponding to the purchase entries in Q. These lists are initialized in

lines 1-4. For each entry e in the user purchase history, we

compare the timestamps between e and the oldest entry e

in Q. If the purchase interval exceeds the window size ,

we remove e from Q and all the records that has the same

product id as e from the list Rw, that is, we do not need to

167

Algorithm 1: Generate Purchase Interval Cube

input : Set of purchase histories H = {H1, ..., Hn},

Window size 

output : Purchase interval cube M = {M1, ..., Mn}

1 foreach u  U do

2 Initialize list Q  ; /* to store entries e */

3 /* e is a 3-tuple < u, id, t > */

4 Initialize lists R, Rw, Rw  ; /* to store records r */ 5 /* r is a 4-tuple < i, j, x, c > where i and j are product

ids, x is the purchase interval between i and j, and c is

the number of products purchased between i and j.*/

6 foreach e  Hu do

7

/* remove records whose purchase interval exceeds 

*/

8

while (e.t - e .t) >  where e is the first entry in

Q do

9

remove e from Q;

10

remove all tuples r from Rw where r.i = e .id;

11

/* update purchase interval and count of products */

12

Let e be the last entry in Q;

13

x  e.t - e .t;

14

if x > 0 then

15

c  1;

16

else

17

c  0;

18

/* handle the case e.id occur more than once in  */

19

if  e in Q s.t. e .id = e.id then

20

while r.i <> e.id where r is the first entry in

Rw do

21

create r  (r.i, e.id, r.x + x , r.c + c );

22

add r to Rw;

23

remove r from Rw;

24

/* create new interval records */

25

foreach r  Rw do

26

create r  (r.i, e.id, r.x + x , r.c + c );

27

add r to Rw;

28

add r to R;

29

Rw  Rw;

30

Rw  ;

31

if  e' in Q s.t. e .id = e.id then

32

remove e' from Q;

33

remove all tuples r from Rw where r.i = e.id ;

34

create a tuple r  < e.id, e.id, 0, 0 >;

35

add r to list Rw;

36

push e to queue Q;

37 Use Equation 6 to obtain Mu from R;

consider this pair of products e .id and e.id further (Lines 8-10).
Based on the latest entry e in Q and the records in Rw, we update the interval and count of products purchased between r.i and e.id (Lines 12-33). If a user has purchased the product e.id more than once in the window , then we remove records whose time intervals are not the smallest (Lines 19-23 and 31-33). Otherwise, we generate new interval records r and store them in both R and Rw (Lines 2528). Note that we only need to update the interval records in Rw with the time difference between e and the latest entry e in Q (line 12-17). Lines 34-36 creates an interval record r for each entry e and inserts e into Q.
Finally, R stores the list of purchase intervals between product pairs for a user u. We apply Equation 6 to compute du,i,j. Each cell Mu[i, j] stores the value of du,i,j (Line 37). The purchase interval matrix of all users u  U will form

product user

- -6- -

- -6- -

- 415 5 5 - 7 -17 3

4 -

14--414-4115-46-241155-6-2415521---55221----522

-

--7-

1-9 -7-

7--13-7---521387--051385138-518-5

14 6 5 2 - - - - 8 -

62 - - -

62 - - -

product

Figure 2: Purchase Interval Cube obtained from Figure 1

a purchase interval cube M . Figure 2 shows the purchase interval cube obtained for our example in Figure 1.
Let us illustrate Algorithm 1 with user u1's purchase history in Figure 1. Suppose  is set to 20. The first entry e is < u1, c, 1 >. Since all the lists are initially empty, we create a record r < c, c, 0, 0 > and add it to Rw. We also insert e into Q. When we process the second entry < u1, d, 8 >, we compare its timestamp with that of the first entry < u1, c, 1 > in Q to check whether their purchase interval exceeds . Since it does not, we will compute the interval x = 8 and c = 1 and generate a new record < c, d, 7, 1 >. We insert this record into R and update Rw. Rw now has two records, < c, d, 7, 1 > and < d, d, 0, 0 >. The third and fourth entries in Hu1 are similarly processed. Figure 3(a) shows the lists Q, Rw and R obtained.
When we process the entry < u1, b, 16 > in Hu1 , we find that there is another entry for product b in Q. We create new records < b, b, 5, 2 > and < e, b, 2, 1 > for the product pairs (b, b) and (e, b). We also remove the older entry < u1, b, 13 > from Q and insert < u1, b, 18 > into Q. Figure 3(b) shows the updated lists.
When we process the last entry < u1, a, 22 >, we find that its timestamp and that of the first entry < u1, c, 1 > in Q exceeds the window size . Hence, we remove < u1, c, 1 > from Q and the corresponding records < c, b, 17, 3 > from Rw. We only need to create 3 new records for R (see Figure 3(c)).
Algorithm 1 only needs to scan the user purchase history once. It has a complexity of O(|U | × m × n) where m is the maximum number of purchase entries in the window size  and n = max(|Hu|).
In order to ensure that we only consider frequently purchased product pairs, we will do a post-processing of the purchase interval cube M obtained from the user history as follows. For each product pair i and j, we count the number of users u such that Mu[i, j] is nonzero. If the number of users that purchase this pair of products is less than some threshold, then we will discard this pair of products and set Mu[i, j] to a null value.

168

Q
<c , 1> <d , 8> <b,13>

Rw
< c, b,12, 2 > < d, b, 5, 1 > <b, b, 0, 0 >

R
< c, d, 7, 1 > < c, b,12, 2 > < d, b, 5, 1 >

(a) Lists obtained after < u1, e, 16 >

Q
<c , 1> <d , 8> <e,16> <b,18>

Rw
< c, b,17, 3 > < d, b,10,2 > < e, b, 2, 1 > <b, b, 0, 0 >

R
< c, d, 7, 1 > < c, b,12, 2 > < d, b, 5, 1 > < c, e,15 3 > < d, e,8, 2 > <b, e, 3, 1 > <b, b, 5,2 > <e, b, 2, 1 >

(b) Lists obtained after < u1, b, 18 >

Q
<d , 8> <e,16> <b,18> <a,22>

Rw
< d, a,14,3 > < e, a, 6, 2 > <b, a, 4,1 > <a, a, 0, 0 >

R
< c, d, 7, 1 > < c, b,12, 2 > < d, b, 5, 1 > < c, e,15 3 > < d, e,8, 2 > <b, e, 3, 1 > <b, b, 5,2 > <e, b, 2, 1 > < d, a,14,3 > < e, a, 6, 2 > <b, a, 4,1 >

(c) Lists obtained after < u1, a, 22 > Figure 3: Example to Illustrate Algorithm 1

3.2 Utility Model with Purchase Intervals
Due to the sparsity problem, it is impossible to generate all the intervals between pairs of products from a user's own purchase history. We address this by using the purchase history of similar users to estimate the purchase interval information. We denote the similarity between user u and u as sim(u, u ). Then the average purchase interval between two products i and j for user u can be estimated as follows:

du,i,j =

u U du ,i,j  (1 + sim(u, u )) u U (1 + sim(u, u ))

(7)

The similarity between users can be obtained by using some existing latent factor based methods. In our experiments, we use the degree of overlap in the users' purchase histories as a measure of their similarity.
Having obtained the average purchase interval between product pairs for each user, the next step is to incorporate the interval factor into the utility plus model. Suppose a user u has already purchased a set of products Iu and s/he logs into the system at time t. Before we recommend some product j, we want to consider the effect of the interval

between a product i  Iu and j. We model this purchase interval factor P I(u, i, j) as follows:

1

P I(u, i, j) = log2(|t - ti - du,i,j| + 2)

(8)

Equation 8 reduces the effect of purchase intervals by the distance between (t - ti) and du,i,j. For example, suppose we have estimated that u typically buys product j du,i,j days after buying product i. Then we will recommend product j to u if |(t - ti) - di,j,u| < .
We can now modify the utility surplus function to include
the purchase interval factor as follows:

U S+(Xi, i, u) =

(9)

u,i · ((Xi + 1)i - Xii ) · (1 + maxjHu P I(u, j, i))i

-u · pricei

In Equation 9, u,i is the basic utility of product i to user u and u is the sensitivity of u to the product price pi. The term ((Xi + 1)i - Xii ) considers the return rate i for product i, while the term (1 + maxjHuP I(u, j, i))i accounts for the purchase interval factor. Note that we find
the product pair (j, i) that has the largest purchase interval
effect and add an product-specific parameter i to tune the effect of each product.

3.3 Parameter Estimation
In this section, we discuss how we estimate the parameters u,i, i, i and u in Equation 9. Recall that

u,i =

uk  cki

k

We use the SVD matrix factorization method [8] to learn the user preference for the product features. Given a |U |×|I| user-product matrix A, each entry au,i in A can be estimated as

a^u,i = qiT , pu

(10)

With this, we replace uk and cki in Equation 10 with pu and qi respectively. We have u,i = A^u,i This allows us to use SVD to estimate the utility of a product to a user.
Similar to [21], we define the joint probability of these parameters as:

JP =

P r(pu) P r(qi) P r(u) P r(i) P r(i)

u

i

u

i

i

P r(ru,i,t|U S(Xi, i, u))
u,i,t

(11)

where P r(ru,i,t|U S+(Xi, i, u)) denotes the conditional probability of a user u making the decision to purchase product i at time t given the utility surplus value U S+(Xi, i, u) at time t.
Here, we define

P r(ru,i,t|U S+(Xi, i, u))

=

1 1 + e-ru,i,t·U S+(Xi,i,u)

(12)

where ru,i,t = 1 if user u purchase i at time t. Otherwise ru,i,t = -1. Note that a higher utility surplus value indicates that the user is more likely to purchase the product i.
The parameters can be estimated by maximizing the joint
probability. We assume Gaussian priors on all the model

169

parameters

N (,

1 

).

For

pu

and

qi ,

we

have

pu

=

qi

=0

and variance 1. The mean and variance for ,  and  are

,  ,  and ,  ,  respectively. Then maximizing

the joint probability is equivalent to minimizing the negative

log likelihood as follows:

(pu, qi, u, i, i) = argmin[-logJP ]

1 = argmin 2 1

||pu||2

+

1 2 1

||qi||2 +

u

i

1 2 

(u

-

)2

+

1 2 

(i -  )2 +

u

i

1 2 

(i - )2 +

log(1 + e ) -ru,i,t·US(Xi,i,u)

i

u,i,t

We use the stochastic gradient descent method to find the optimal values for the parameters. Our learning algorithm updates the parameters by using the following first order derivatives:

pu

=

pu

-

1

·

(-logJP ) pu

qi

=

qi

-

1

·

(-logJP ) qi

u

=

u

-

2

·

 (-log J P u

)

i

=

i

-

3

·

(-logLJP ) i

i

=

i

-

4

·

(-logJP ) i

(13)

At each iteration, the learning rate is controlled by 1, 2, 3 and 4. The values of 1, 2, 3, 4, 1, ,  and  can be set by cross-validation.

4. EXPERIMENTAL STUDY
In this section, we report the results of the experiments we have carried out to evaluate the effectiveness of our proposed approach. We call our method SV Dpi. We also compare the performance of our method with three algorithms:
1. T opP op. This is a baseline algorithm which recommends the top-K most popular products to users;
2. SV D [8]. SVD is a widely used recommendation algorithm based on latent factors and matrix factorization.
3. SV Dutil [11]. SV Dutil is the state-of-the-art recommendation algorithm for e-commerce which incorporates marginal net utility and the law of diminishing returns into SVD.
Since SV D, SV Dutil and SV Dpi all have a learning phase to set the optimal values for their parameters, we use the first 90% of each user's purchase history for training and the remaining 10% for testing. We associate each user u and each product i with a feature vector pu and qi respectively. We set the dimension of the latent factor is 50.
We use both positive and negative training points. Each purchase record is a positive point. Given that the density of e-commerce data set is usually much lower than that of movie or music rating dataset [5], we randomly sample 0.1%

of the missing entries and set them to 0 to train the SV D model. For SV Dutil and SV Dpi, we randomly sample 1% from the missing entries as negative points.

4.1 Experiment Dataset
We collect a dataset from Jingdong which is one of the biggest B2C e-commerce websites in China. We crawled products that belong to the electronic category. The dataset consists of 197,025 users, 98,302 products and 2,610,279 purchase records from January 2010 to November 2011. The density of the dataset is 0.013%.
We pre-process the dataset to remove products that have less than 10 purchase records, as well as users who have purchased less than 10 products. The clean dataset D has 96,882 users, 6,921 products and 2,302,066 purchase records. The density of this dataset is now 0.34%. We sort the purchase records according to the users to form their purchase history. Records in each user purchase history are ordered by their time stamps. Figure 4 shows the distribution of the number of distinct number of products bought by users and the popularity of the products. As expected, there is a long tail in the products purchased.

4.2 Evaluation Metrics

Our evaluation metrics include temporal diversity, conversion rate, precision and recall. Temporal diversity measures the differences between two lists of recommendations when a user logs into the system at different times. For example, suppose a user is given a set of 5 recommended products at time t. If he logs into the system later and only 1 of the 5 recommendations is different, then the diversity between the two lists is 1/5 = 0.2. [10] derives the diversity between two lists Lt and Lt from their set theoretic difference as follows:

Lt \ Lt = {x  Lt |x / Lt}

(14)

diversity(Lt, Lt

, K)

=

|Lt \ Lt| K

(15)

where K is the number of products in each list. If the two lists are exactly the same, then diversity is 0.
Conversion rate is a commonly used metric in e-commerce to determine if a user has obtained at least one good recommendation. If the user purchased at least one product from the recommended top K list, then we say that the user has switched from a browser to a buyer. If L is the list of recommended products and L is the list of products actually purchased by the user, then the conversion rate is given by:

conversion rate@K =

1 if |L  L | > 0 0 otherwise

(16)

We compare the conversion rate of the various algorithms by taking the average of values computed for each test user.
The standard definitions for precision and recall are as follows:

recall@K

=

|L  |L

L |

|

(17)

precision@K = |L  L |

(18)

K

4.3 Results and Analysis

We first examine the effect of the window size  on the conversion rate, recall and precision of the various algo-

170

Number of users Number of product

12000 10000
8000 6000 4000 2000
0 0.5

1

1.5

2

2.5

3

H size (log10) u

(a) # Distinct Products

180

160

140

120

100

80

60

40

20

0

0.5

1

1.5

2

2.5

3

3.5

4

4.5

Time of purchase (log10)

(b) Product Popularity

Figure 4: Characteristics of Dataset

rithms. We set  to 7, 14, 21, 28 and 35 days. This implies that the purchase intervals generated are less than or equals to . Table 2 shows the accumulated density of the purchase interval matrix generated by Algorithm 1 for the different values of . We observe that the density increases as we consider larger purchase intervals.
Figure 5 gives the results of this experiment for different values of K. We see that the conversion rate increases as K increases. Similar observations are made for the precision and recall graphs. The best result is obtained when  = 28. We use this window size for the rest of the experiments.
Next, we compare the performance of our algorithm SV Dpi to T opP op, SV D and SV Dutil. Figure 6 shows the results. Since T opP op recommends the most popular products and is not personalized, it has the lowest conversion rate compared to the personalized SVD-based methods. When we compare SV Dpi with SV D and SV Dutil, we see that using purchase intervals significantly improves the conversion rate, recall and precision of the recommendations.
We give an example of the results obtained. Table 3 gives the products corresponding to the product IDs. Table 4 shows a sample of the purchase intervals between the products 229040002 (DVD-ROM) and 24101000e (Wireless Router) computed from the dataset. We observe that users typically purchase a DVD-ROM about 25 days after purchasing a Wireless Router.
Table 5 shows a sample of user U10370829 's purchase history in the training data. The first entry in the testing data for this user is < 229040002, 2010 - 07 - 16 > indicating that s/he purchases the product 229040002 (DVDROM) at time 2010 - 07 - 16. Upon examining the list of products recommended by the various algorithms, we find that our method SV Dpi also recommends this product 229040002 (DVD-ROM) to the user, whereas both SV D and SV Dutil recommend the product 23d010004 (Internet Cable). From the user purchase history data, we find that users either purchase the products 24101000e (Wireless Router) and 23d010004 (Internet Cable) together, or purchase Internet Cable 1-2 days after buying Wireless Router. Since SV D and SV Dutil do not consider the purchase intervals, both of them recommend the product Internet Cable to user U10370829 .

Table 2: Effect of  on the Density of Purchase Interval Matrix



7

14

21

28

35

Density 0.41% 0.59% 0.65% 0.74% 0.83%

Table 3: Sample Products

Product ID 22306000e 229040002 23d010004 23d02000e 24101000e

Product Title Galaxy GT430 512MB DDR5 Graphics Card
LITEON 18X DVD-ROM PHILIPS SWA1938/93-5 Internet Cable 5M
CHOSERL Q505 VGA Cable 1.5M TP-LINK WR340G+ 54M Wireless Router

Table 4: Sample Purchase Intervals (in days)

Product ID 24101000e 24101000e 24101000e 24101000e 24101000e 24101000e 24101000e 24101000e 24101000e 24101000e

Product ID 229040002 229040002 229040002 229040002 229040002 229040002 229040002 229040002 229040002 229040002

Interval 22 25 25 27 27 29 22 23 26 27

Table 5: Sample of User U10370829 's Purchase History in Training Data

Product ID 23d02000e 23201000d 23d100002 23d060003 233020011 24101000e 22306000e

Purchase time 2010-03-19 2010-03-30 2010-04-20 2010-04-26 2010-05-25 2010-06-19 2010-06-26

171

conversion rate

recall

0.3

K=1

K=2

0.25

K=3

K=4

K=5

0.2

0.15

0.1

0.05

0

7

14

21

28

35

 :Days

(a) Conversion Rate

0.05

K=1

K=2

0.04

K=3 K=4

K=5

0.03

0.02

0.01

0 7
0.12 0.1
0.08 0.06 0.04 0.02
0 7

14

21

28

35

 :Days

(b) Recall

K=1 K=2 K=3 K=4 K=5

14

21

28

35

 :Days

(c) Precision

Figure 5: Effect of Window Size 

precision

recall

conversion rate

0.3 0.25
0.2

TopPop SVD
SVDutil SVDpi

0.15

0.1

0.05

0

1

2

3

4

5

K

(a) Conversion Rate

0.05 0.04

TopPop SVD
SVDutil SVDpi

0.03

0.02

0.01

0 1
0.12 0.1
0.08 0.06 0.04 0.02
0 1

2

3

4

5

K

(b) Recall

TopPop SVD
SVDutil SVDpi

2

3

4

5

K

(c) Precision

Figure 6: Comparative Study

Precision

172

4.4 Temporal Diversity
We also investigate the temporal diversity of the various algorithms. We obtain the first recommendation list L at the time stamp of the first entry in the testing data. Then we partition the testing data into two and put the first partition into the training data. We re-run the algorithms on this larger training data and obtain a second recommendation list L at the time stamp of the first entry in the second partition.
Figure 7 shows the temporal diversity result for the top-5 and top-10 recommended items. The temporal diversity of T opP op is 0 because both its recommendation lists contains the same popular products. Our proposed method SV Dpi has the highest temporal diversity compared to SV D and SV Dutil since the products recommended depends on the time at which the user logs into the system.
Based on the results, we envisage that our proposed approach would be useful in email-based or message-based marketing applications. At different time points, when we want to push some products to consumers, we can determine the products that would be most attractive to consumers at that time point instead of only products that consumers may potentially like.









dZWZ 
^s



^s



^s



 dZ

dZ

Figure 7: Top-5 and Top-10 Temporal Diversity for T opP op, SV D, SV Dutil, SV Dpi

4.5 Effect of Taxonomy
Finally, we study the effect of taxonomy on the various algorithms. Based on the original e-commerce website, products are classified under various levels of category, e.g., both the products"DELL V3400R-426S 14 inch laptop" and "DELL V3400R-426S 13.3 inch laptop" fall under the same brand "Dell" which is under the product type "Laptops". The product type "Laptops" is under "Computers" which is under "Computers & Software". Thus, we could consider both models of the Dell laptops as the same product type.
In this experiment, we replace specific product models by their product type and brand, that is, we generalize "DELL V3400R-426S 14 inch laptop" and "DELL V3400R426S 13.3 inch laptop" to a more general product called "DELL Laptops". Then we re-generate the purchase interval cube and learn a new model for recommendation. Note that we drop the product price term from Equation 9 since we would not have the price of the generalized product.
Figure 8 gives the conversion rate and temporal diversity of the algorithms on this dataset. We observe that all

the methods show improvement in the conversion rate. The temporal diversity of all the algorithms decrease slightly because the total number of distinct products is reduced when we merge the individual product models of the same brand to their product type. The gap between SV Dpi and the other algorithms widens as the density of the purchase interval cube increases with the use of taxonomy.
5. RELATED WORKS
There has been a long stream of research in recommender systems. Collaborative filtering (CF) has been widely used in these systems. Works in CF can be divided into two categories: memory-based CF and model-based CF. Memorybased CF utilizes the entire user-item-rating data to predict user preferences of new items by identifying similar users. The similarity computation employs measures such as TFIDF. Representative memory-based CF algorithms include item-based and user-based KNN algorithms [4, 17, 12]. However, memory-based CF algorithms cannot handle data sparsity well and are not scalable.
Model-based approaches have been proposed to alleviate these problems. A model-based CF technique typically uses the user-item-rating data to learn a model for prediction [2]. Well known model-based CF include Bayesian belief nets(BNs) CF models [2, 14, 20], latent factor models [6] and clustering CF models [18]. Research on model-based CF reached a peak in the Netflix movie recommendation competition where a matrix factorization-based CF approach such as SVD is used to learn the model.
In product recommender systems, users' preference tend to change over time. The work in [16] combines the latent factor model and Markov chain model to predict the next basket of products that may be purchased by users. This method utilizes the order of products purchased as the temporal information. Liang et. al [22] propose that the score of each product should be determined by both the long-term preference and short-term bias due to external events such as seasonal festivities. The long-term preference is defined as user similarity when they purchase the same products, while the short-term bias consider the product similarity over a short period of time. The work in [9] design a method to learn the temporal changes of users and items.
The work in [11] highlights that product recommender systems differ from the music or movie recommender systems as the former should take into account the utility of products in their ranking. The authors employ the utility and utility surplus theories from economics and marketing to improve the list of recommended product. [10] use the SVD model to learn the features of products and enhance the model with the Law of Diminishing Marginal Utility. In our work, we combine the notions of purchase intervals and utility surplus to obtain a model that increases the temporal diversity of products recommended.
6. CONCLUSION
In this paper, we have investigated how purchase intervals are able to increase the temporal diversity and conversion rate in product recommender systems. Existing works have primarily considered the order of items purchased by users and do not consider the time interval between the products purchased. We have designed a model that combines purchase interval information in users' purchase history with

173

conversion rate 

0.35 0.3
0.25 0.2
0.15 0.1
0.05 0 1

TopPop



SVD

SVDutil

SVDpi









2

3

4

5

K

(a) Conversion Rate

 dZ

dZ

(b) Temporal Diversity

Figure 8: Effect of Taxonomy

dZWZ ^s ^s ^s

marginal utility and the Law of Diminishing Returns. We have also devised an efficient algorithm to generate a purchase interval cube by scanning users' purchase history once. Experimental results on a real world data set obtained from an e-commerce B2C website Jingdong in China demonstrate that the proposed approach improves the precision, recall, conversion rate of the state-of-the-art recommendation algorithms. It also significantly improves the temporal diversity which is essential for product recommendation systems. Future work includes enhancing our model with user purchase data from multiple e-commerce websites and using MapReduce to increase the scalability of our algorithms.
7. REFERENCES
[1] W.J. Baumol and A.S. Blinder. Microeconomics: Principles and Policy. 2008.
[2] J.S. Breese, D. Heckerman, and C. Kadie. Empirical Analysis of Predictive Algorithms for Collaborative Filtering. In Microsoft Technical Report, pages 43­52, 2007.
[3] C. Cobb and P. Douglas. Latent semantic models for collaborative filtering. American Economic Review, 18:139­165, 1928.
[4] K. Goldberg, T. Roeder, D. Gupta, and C. Perkins. Eigentaste: A constant time collaborative filtering algorithm. Information Retrieval, 4:133­151, 2001.
[5] J.L. Herlocker, J.A. Konstan, L.G. Terveen, and J.T. Riedl. Evaluating collaborative filtering recommender systems. ACM TOIS, 22, 2004.
[6] T. Hofmann. Latent semantic models for collaborative filtering. ACM TOIS, 22:89­115, 2004.
[7] http://news.imeigu.com/a/1315461895947.html. Market share and sales growth situation of jingdong mall., September 2011.
[8] Y. Koren. Factorization meets the neighborhood: a multifaceted collaborative filtering model. In ACM SIGKDD, pages 426­434, 2008.
[9] Y. Koren. Collaborative filtering with temporal dynamics. pages 89­97, 2009.
[10] N. Lathia, S. Hailes, L. Capra, and X. Amatriain. Temporal diversity in recommender systems. In ACM SIGIR, pages 210­217, 2010.

[11] B. Li, A. Ghose, and P.G. Ipeirotis. Towards a theory model for product search. In WWW Conference, pages 327­336, 2011.
[12] M.R. McLaughlin and J.L. Herlocker. A collaborative filtering algorithm and evaluation metric that accurately model the user experience. In ACM SIGIR, pages 329­336, 2004.
[13] P. Melville, R.J. Mooney, and R. Nagarajan. Content-boosted collaborative filtering for improved recommendations. In National Conference on Artificial intelligence, pages 187­192, 2002.
[14] K. Miyahara and M.J. Pazzani. Collaborative filtering with the simple bayesian classifier. In PRICAI, pages 679­689, 2000.
[15] D.Y. Pavlov and D.M. Pennock. A maximum entropy approach to collaborative filtering in dynamic, sparse, high-dimensional domains. In Neural Information Processing Systems, pages 1441­1448, 2002.
[16] S. Rendle, C. Freudenthaler, and L. Schmidt-Thieme. Factorizing personalized markov chains for next-basket recommendation. In WWW Conference, pages 811­820, 2010.
[17] B. Sarwar, G. Karypis, J. Konstan, and J. Reidl. Item-based collaborative filtering recommendation algorithms. In WWW Conference, pages 285­295, 2001.
[18] S.H. Seng, S. Chee, J. Han, and K. Wang. Rectree: An efficient collaborative filtering method. In DaWaK, pages 141­151, 2001.
[19] L. Si and R. Jin. Flexible Mixture Model for Collaborative Filtering. In ICML, pages 704­711, 2003.
[20] X. Su and T.M. Khoshgoftaar. Collaborative filtering for multi-class data using belief nets algorithms. In IEEE ICTAI, pages 497­504, 2006.
[21] J. Wang and Y. Zhang. Utilizing marginal net utility for recommendation in e-commerce. In ACM SIGIR, pages 1003­1012, 2011.
[22] L. Xiang, Q. Yuan, and S. et. al. Zhao. Temporal recommendation on graphs via long- and short-term preference fusion. In ACM SIGKDD, pages 723­732, 2010.

174

