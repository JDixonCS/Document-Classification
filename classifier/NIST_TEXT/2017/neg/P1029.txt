Short Research Paper

SIGIR'17, August 7-11, 2017, Shinjuku, Tokyo, Japan

Top-K Influential Nodes in Social Networks: A Game Perspective

Yu Zhang
Key Laboratory of Machine Perception (MOE) & Dept. of Computer Science, Peking University Beijing, China yuz9@illinois.edu
ABSTRACT
Influence maximization, the fundamental of viral marketing, aims to find top- seed nodes maximizing influence spread under certain spreading models. In this paper, we study influence maximization from a game perspective. We propose a Coordination Game model, in which every individuals make their decisions based on the benefit of coordination with their network neighbors, to study information propagation. Our model serves as the generalization of some existing models, such as Majority Vote model and Linear Threshold model. Under the generalized model, we study the hardness of influence maximization and the approximation guarantee of the greedy algorithm. We also combine several strategies to accelerate the algorithm. Experimental results show that after the acceleration, our algorithm significantly outperforms other heuristics, and it is three orders of magnitude faster than the original greedy method.
CCS CONCEPTS
· Information systems  Data mining; · Theory of computation  Design and analysis of algorithms;
KEYWORDS
influence maximization; coordination game model; social networks; viral marketing
1 INTRODUCTION
Social networks play an important role in information diffusion. They give us motivation to use a small subset of influential individuals in a social network to activate a large number of people. Kempe et al. [7] build a theoretical framework of influence maximization, aiming to find top- influential nodes under certain spreading models. They discuss two popular models - Independent Cascade (IC) model and Linear Threshold (LT) model and propose a greedy algorithm with (1 - 1/ - )-approximation rate.
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. SIGIR'17, August 07-11, 2017, Shinjuku, Tokyo, Japan © 2017 Association for Computing Machinery. ACM ISBN 978-1-4503-5022-8/17/08. . . $15.00. https://doi.org/10.1145/3077136.3080709

Yan Zhang
Key Laboratory of Machine Perception (MOE) & Dept. of Machine Intelligence, Peking University
Beijing, China zhy@cis.pku.edu.cn
Easley and Kleinberg [6] divide the cause of information propagation into two categories: information effects and direct-benefit effects. Obviously, IC model and LT model belong to the former one, while we focus on the latter one. In most spreading models, each node has two states: active and inactive. Equivalently saying, it has two choices. In our Coordination Game (CG) model, we regard information diffusion as the process of individual decision-making. As individuals make their decisions based on the benefit of coordination with their network neighbors, a particular pattern of behavior can begin to spread across the links of the network.
Influence maximization under CG model is useful in viral marketing. Let us recall the example in [7]. A company would like to market a new product, hoping it will be adopted by a large fraction of the network. The company can initially target a few influential nodes by giving them free samples of the product. Then other nodes will probably switch to using the new product because of the following two reasons: (1) They have higher evaluation of the new product than the old one. (2) They have to coordinate with their neighbors because using different products may reduce their benefits. (e.g., people using different operating systems may have compatibility problems when working together, and users from different kinds of social media platforms cannot communicate with each other timely.) Our model describes these two reasons precisely.
In this paper, we study how to find Top- influential nodes under CG model. We first propose our model which serves as the generalization of some well-known spreading models, such as Majority Vote model [1] and Linear Threshold model [7]. We then prove some theoretical results under CG model, including NP-hardness of the optimization problem itself and #P-hardness of computing the objective function. Then we try to find a good approximation algorithm for the problem. We embed our CG model into the scenario of general diffusion process [10], and prove that the objective function is monotone and submodular if and only if the cumulative distribution function of people's threshold is concave, in which case the greedy algorithm can return a (1 - 1/ - ) approximate solution.
As a traditional method, Kempe et al. [7] use 10,000 times of Monte Carlo simulations to approximate the objective function, but it costs too much time on large-scale networks. To accelerate our algorithm, we use two efficient heuristics LazyForward [8] and StaticGreedy [5]. Experimental results show that our Greedy and Greedy++ algorithms can activate more nodes than other heuristics. Moreover, Greedy++ runs faster than Greedy by three orders of magnitude.

1029

Short Research Paper

SIGIR'17, August 7-11, 2017, Shinjuku, Tokyo, Japan

Figure 1: Payoff matrix of the coordination game.

Related Work. Kempe et al. [7] first build an algorithmic framework of influence maximization by transforming it into a discrete optimization problem. After their work, a lot of efforts have been made on efficient computing methods of the objective function. Some methods aim to reduce the number of trials that need Monte Carlo simulations, such as CELF [8]. Other researchers focus on how to calculate the influence spread efficiently. For instance, Chen et al. [2, 3] use arborescences or DAGs to represent the original graph. Cheng et al. propose a StaticGreedy strategy [5] and a selfconsistent ranking method [4].
Morris [9] is the first to propose a coordination game model in contagion. This model is also discussed detailedly in Easley and Kleinberg's textbook [6]. We will extend this model by introducing some random factors into utility values.

2 MODEL

In a social network  = (, ), we study a situation in which each node has a choice between two behaviors, labeled  and . If nodes  and  are linked by an edge, then there is an incentive for them to have their behaviors match. We use a game model to describe this situation. There is a coordination game on each edge (, )  , in which players  and  both have two strategies  and . The payoffs are defined as follows:
(1) if  and  both adopt strategy , they will get payoffs  > 0 and  > 0 respectively;
(2) if they both adopt strategy , they will get payoffs  > 0 and  > 0 respectively;
(3) if they adopt different strategies, they each get a payoff of 0.
The payoff matrix is shown in Figure 1. We define the total payoff of player  as the sum of the payoffs it gets from all coordination games with its neighbors  () = {|(, )  }. If  can get a higher total payoff when it adopt  than that when it adopt , it will choose strategy . Otherwise it will choose strategy . According to the actual situation, we have the following assumptions for the payoffs: (1) All the  and  (   ) may not be equal to each other because each person in the social network values behaviors  and  differently. (2)  and  (   ) can either be constants or independent and identically distributed random variables because the cascading behaviors in networks are always considered to have determinate principles with some stochastic factors. Suppose  knows all the choices of its neighbors: there are  nodes adopting  and  = () -  nodes adopting . Obviously,  will adopt  if and only if

    = (() -  ),

(1)

or







() = (),

 + 

  [0, 1].

(2)

Influence Maximization Problem. Suppose now the mar-

ket is dominated by  (i.e., all of the nodes in the network

choose ). Given a constant , we want to find a seed set

0   , |0|  . Initially we let each node in 0 adopt  (and they will never change their choices again). Time then

runs forward in unit steps. In each step, each node decides

whether to switch from strategy  to strategy  according

to the payoff-maximization principle. We can regard the evo-

lution of nodes' choices as a spreading process of  in the

network. The spread of behavior  will finally stop in at

most  = | | steps.

We define  = |{   | adopts  in step }| ( = 1, 2, ..., ). Our objective function is (the expectation of) the

nodes affected by  at last, or

(0) = E{, | }[||] = E{| }[||].

(3)

Our purpose is to maximize (0) subject to |0|  . The CG model can be regarded as the generalization of

the following two well-known spreading models.

Majority Vote Model. Suppose all the  (   ) are constants and are equal to each other. So are all the  (   ). Equivalently, let

 = ,

 =  ,

 =  =

 ,

 + 

  .

(4)

 is a constant threshold same to every nodes. When



=

 ,

or



=

1 2

,

the

spreading

model

is

called

Majority

Vote model, which is extensively studied in [1].

Linear Threshold Model. If we set  = 1 and let  follow a continuous power-law distribution, i.e., the proba-

bilistic density function of  is

  () = ( + 1) (  0),

1

(5)

where

 >1

and

=

  0

1 (+1)

dx

=  - 1,

then 0    1,

1

Pr[  ] = Pr[ 1 + 

 ] = Pr[

 1/ - 1]

 + =

+

 ()dt

=

-(

+

1)-+1

 

= -1.

(6)

1/-1

1/-1

If  = 2, we will have    [0, 1]. This is the famous Linear

Threshold model where the weight on each edge adjacent to

node



is

1/()

(i.e.,



=

1 ()

,

,





 ).

Hardness. Under CG model, we have the following hardness result.1

Theorem 2.1. (1) Influence maximization under CG model is NP-hard. (2) Computing the objective function under CG model is #P-hard.

The hardness result serves as a generalization of the NPhardness of Influence Maximization under Majority Vote model [1] and LT model [7] and the #P-hardness of computing the objective function under LT model [3].

1We omit the proof here. For more details about the proof (or the following algorithms and experiments), please refer to the full version: https://github.com/yuzhimanhua/Influence-Maximization/.

1030

Short Research Paper

SIGIR'17, August 7-11, 2017, Shinjuku, Tokyo, Japan

3 ALGORITHMS

Submodularity. To find a greedy algorithm with approximation guarantee, the submodularity of the objective function is necessary. We first recall the general diffusion process defined by Mossel and Roch in [10].
Suppose each node  in the social network  = (, ) has a threshold    [0, 1] .. and a "local" spreading function  : 2  [0, 1]. Initially there is a seed set 0   . In each step   1,

 = -1  {|   - -1   (-1)   }.

(7)

The spreading process will stop in at most  = | | steps. So the objective function is (0) = E{| }[||].
We can embed our model into the scenario of the general diffusion process.
Let  be the cumulative distribution function of . Since   [0, 1], we have (0) = 0 and (1) = 1.  and , let

|   ()|

 =  ( ) and  () =  ( () ).

(8)

Suppose  is continuous and strictly monotone increasing in [0, 1], then -1 exists, and   [0, 1],

Pr[ ( )  ] = Pr[  -1()] =  (-1()) = .

(9)

So ()   [0, 1]. Therefore

|   ()|  ()     ( () )    |   ()|  -1( )()  |   ()|   ().

(10)

Lemma 3.1. Suppose  is continuous and strictly monotone increasing in [0, 1],  is monotone and submodular for any node  (in any graph) iff  is concave in [0, 1].

It is not difficult for us to understand Lemma 3.1 intuitively because submodularity can be considered as a kind of concavity.  being concave in [0, 1] means that the distribution of people's threshold has a negative skewness, or people tend to have a higher evaluation on new products than old ones. This assumption is reasonable in some cases (e.g., the mobile phone market).  being continuous and strictly monotone increasing in [0, 1] is a technical assumption instead of an essential one. We define these two assumptions as the concave threshold property.
For the general diffusion process, Mossel and Roch [10] have proved that (0) is monotone and submodular if and only if  is monotone and submodular for any    . Therefore, we can get Theorem 3.2 immediately.

Theorem 3.2. (0) is monotone and submodular iff  satisfies the concave threshold property.

Theorem 3.2 provides a strong tool to judge the objective function's submodularity under certain spreading models. For example, under Majority Vote model, (0) is not submodular because () = I(  ) is not concave in [0, 1], where I(·) is the indicator function. In contrast, under Linear Threshold model, (0) is submodular because () =  is concave in [0, 1].
Up till now, we have proved the monotonicity and submodularity of the objective function under CG model with some necessary assumptions. Using the result in [7], the greedy algorithm given in Algorithm 1 (Greedy) returns a (1 - 1/ - )-approximate solution. The algorithm simply

selects seed nodes one by one, and each time it always selects the node that provides the largest marginal gain of the objective function.
Speeding-Up Algorithm. Due to the hardness of computing (0), we use two strategies - LazyForward [8] and StaticGreedy [5] to accelerate our algorithm. The reason why they are useful in submodular cases has been explained in [8] and [5] respectively.
We maintain a priority queue. When finding the next node, we go through the nodes in decreasing order of their marginal gain. If the marginal gain of the top node has not been updated, we recompute it, and insert it into the priority queue again.
Instead of conducting a huge number of Monte Carlo simulations each time, we generate a rather small number of snapshots at the very beginning. In all the iterations, we run the simulation on these snapshots and use the average to estimate the objective function.
We name the accelerated algorithm as Greedy++.
Algorithm 1 Greedy(, )
1: initialize 0 =  2: for  = 1 to  do 3: select  =  -0 ((0  {}) - (0)) 4: 0 = 0  {} 5: end for 6: output 0

4 EXPERIMENTS
To test the effectiveness and efficiency of our Greedy and Greedy++ algorithms, we conduct experiments on three realworld networks and compare our algorithms with other existing heuristics.
Datasets. The three real-world datasets include two collaboration networks NetHEPT and NetPHY2, and one online social network Epinions3. We summarize the statistical information of the these datasets in Table 1.

Datasets NetHEPT NetPHY Epinions

| | 15,233 37,154 75,879

|| 58,991 231,584 508,837

Type Undirected Undirected
Directed

Table 1: Statistical information of three datasets.

Algorithms. A total of five algorithms are tested. Besides of Greedy and Greedy++ proposed in this paper, we use other three heuristic algorithms as benchmark methods.
(1) PageRank chooses nodes with the largest PageRank value. Since influential nodes are considered to have a large number of out-links, while nodes with high PageRank value are considered to have lots of in-links, we first change the direction of all edges in the graph and then run PageRank algorithm. We use  = 0.9 as the random jump parameter.
(2) Degree chooses nodes with the largest out-degree. (3) Random chooses nodes at random. There are several other efficient algorithms to solve influence maximization under IC model or LT model, such as
2 http://research.microsoft.com/en-us/people/weic/graphdata.zip 3 http://snap.stanford.edu/data

1031

Short Research Paper

SIGIR'17, August 7-11, 2017, Shinjuku, Tokyo, Japan

(a) Linear Threshold

(b) Concave Threshold

(c) Convex Threshold

(d) Majority Vote

Figure 2: Influence spread of various algorithms in NetHEPT, with different distribution of . (   [0, 1].) (a)  =  (submodular). (b)  = 2 (submodular). (c)  =  (nonsubmodular). (d)  = 0.5 (nonsubmodular).

(a)

(b)

Figure 3: (a) Running time of various algorithms on

three datasets. (() = .) (b) Running time of various algorithms in NetHEPT, with different distribution

of . (   [0, 1].)

PMIA [2], LDAG [3] and IMM [11]. But they cannot be applied in CG model directly, and we will not put them into the comparison.

Effectiveness. We first compare the effectiveness of Greedy

and Greedy++ with other algorithms by showing influence

spread (i.e., ||) of the obtained seed set.

In our CG model, distribution of  can be various. We

run influence maximization algorithms under four different spreading models where  is , 2,  and 0.5 respectively

(,2

[0, 1]). Therefore the distribution and I(  0.5) corresponding to

function () the four cases.

is

,

Figure 2 shows our experimental results in NetHEPT. In

Figure 2, Greedy++ consistently performs on par with Greedy

and significantly outperforms other heuristic algorithms in

all cases. According to Theorem 3.2, the first two cases are

submodular cases, while the other two are not. But our

experimental results indicate that Greedy and Greedy++ still

perform well in the third and the fourth cases. Besides, all

the curves of Greedy and Greedy++ are concave no matter in

submodular or nonsubmodular cases. In two larger graphs

NetPHY and Epinions, we get similar experimental results.

Efficiency. We now test the running time of these algorithms. Figure 3 shows our experimental results.
As we expected, Greedy++ runs consistently faster than Greedy, with more than three orders of magnitude speedup. For example, in the linear threshold case, it takes Greedy more than 9 days to get the top-20 influential nodes in Epinions while Greedy++ only requires 8 minutes.
In the concave threshold case, Greedy++ spends more time because  is small and the influence spread tends to be

wide. But it is worthwhile because the strategies only finding "central nodes" no longer work in this case (see Figure 2(b)).
5 CONCLUSIONS
In this paper, we have discussed how to find top- influential nodes in social networks under a game theoretic model. We show the hardness of the optimization problem itself, as well as the hardness of calculating the objective function. We prove the approximation guarantee of the greedy algorithm under necessary assumptions. We also accelerate our algorithm with the combination of LazyForward and StaticGreedy. Our experimental results demonstrate that Greedy++ matches Greedy in the spreading effect while significantly reducing running time, and it outperforms other heuristic algorithms such as MaxDegree and PageRank.
Acknowledgements. This work is supported by 973 Program under Grant No.2014CB340405, NSFC under Grant No.61532001 and No.61370054. We thank the anonymous reviewers for their valuable comments.
REFERENCES
[1] N. Chen. 2009. On the Approximability of Influence in Social Networks. In SODA'09. SIAM, Austin, Texas, USA, 1029­1037.
[2] W. Chen, C. Wang, and Y. Wang. 2010. Scalable influence maximization for prevalent viral marketing in large-scale social networks. In KDD'10. ACM, Washington, DC, USA, 1029­1038.
[3] W. Chen, Y. Yuan, and L. Zhang. 2010. Scalable influence maximization in social networks under the linear threshold model. In ICDM'10. IEEE, Sydney, Australia, 88­97.
[4] S. Cheng, H. Shen, J. Huang, W. Chen, and X. Cheng. 2014. Imrank: Influence maximization via finding self-consistent ranking. In SIGIR'14. ACM, Gold Coast, Australia, 475­484.
[5] S. Cheng, H. Shen, J. Huang, G. Zhang, and X. Cheng. 2013. Staticgreedy: solving the scalability-accuracy dilemma in influence maximization. In CIKM'13. ACM, San Francisco, CA, USA, 509­ 518.
[6] D. Easley and J. Kleinberg. 2010. Networks, crowds, and markets: Reasoning about a highly connected world. Cambridge University Press.
[7] D. Kempe, J. Kleinberg, and E´ . Tardos. 2003. Maximizing the spread of influence through a social network. In KDD'03. ACM, Washington, DC, USA, 137­146.
[8] J. Leskovec, A. Krause, C. Guestrin, C. Faloutsos, J. VanBriesen, and N. Glance. 2007. Cost-effective outbreak detection in networks. In KDD'07. ACM, San Jose, CA, USA, 420­429.
[9] S. Morris. 2000. Contagion. The Review of Economic Studies 67 (2000), 57­78.
[10] E. Mossel and S. Roch. 2010. Submodularity of influence in social networks: From local to global. SIAM J. Comput. 39, 6 (2010), 2176­2188.
[11] Y. Tang, Y. Shi, and X. Xiao. 2015. Influence maximization in near-linear time: a martingale approach. In SIGMOD'15. ACM, Melbourne, Australia, 1539­1554.

1032

