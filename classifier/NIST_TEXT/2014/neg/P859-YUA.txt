Sig-SR: SimRank Search over Singular Graphs
Weiren Yu, Julie A. McCann
Department of Computing, Imperial College London, UK
{weiren.yu, jamm}@imperial.ac.uk

ABSTRACT
SimRank is an attractive structural-context measure of similarity between two objects in a graph. It recursively follows the intuition that "two objects are similar if they are referenced by similar objects". The best known matrix-based method [1] for calculating SimRank, however, implies an assumption that the graph is non-singular, i.e., its adjacency matrix is invertible. In reality, non-singular graphs are very rare; such an assumption in [1] is too restrictive in practice. In this paper, we provide a treatment of [1], by supporting similarity assessment on non-invertible adjacency matrices. Assume that a singular graph G has n nodes, with r (< n) being the rank of its adjacency matrix. (1) We show that SimRank matrix S on G has an elegant structure: S can be represented as a rank r matrix plus a scaled identity matrix. (2) By virtue of this, an efficient algorithm over singular graphs, Sig-SR, is proposed for calculating all-pairs SimRank in O(r(n2 + Kr2)) time for K iterations. In contrast, the only known matrix-based algorithm that supports singular graphs [2] needs O(r4n2) time. The experimental results on real and synthetic datasets demonstrate the superiority of Sig-SR on singular graphs against its baselines.
Categories and Subject Descriptors
H.3.3 [Information Search and Retrieval]: Information Storage and Retrieval
Keywords
Link Analysis; Similarity Search; SimRank; Singular Graph
1. INTRODUCTION
Modern means of similarity assessment between objects based on hyperlink structure have played a giant role in web information retrieval. One well-publicized link-based similarity measure is SimRank [3], invented by Jeh and Widom, due to its successful applications in e.g., similarity join [4], k-nearest neighbor search [1], and citation analysis [2, 5]. Analogous to the famous PageRank algorithm [6] assigning a relevance score to each object (node), SimRank assigns a similarity score to each pair of nodes in a graph. The central
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from Permissions@acm.org. SIGIR'14, July 6­11, 2014, Gold Coast, Queensland, Australia. Copyright 2014 ACM 978-1-4503-2257-7/14/07 ...$15.00. http://dx.doi.org/10.1145/2600428.2609459.

idea behind SimRank is that "two nodes are similar if they are referenced by similar nodes", together with the base case that "nodes are maximally similar to themselves", which can be formulated in the matrix notation [1, 2] as follows:

S = C · WT · S · W + (1 - C) · I,

(1)

where C  (0, 1) is a damping factor, W is an n × n column normalized adjacency matrix, ()T is the matrix transpose, S is the similarity matrix, whose entry [S]i,j is the SimRank score between nodes i and j, and I is the identity matrix. The recursive nature of SimRank not only allows its similarity scores to capture the global link structure of a graph, but also inspires research on efficient SimRank calculation since the naive way [3] of solving S needs O(Kn2d2) time on a graph of n nodes and d average in-degree for K iterations. With the massive size of the Internet, recent years have witnessed an increasing attention in SimRank optimization (see [1, 2, 5, 7, 8] and the references therein).
Among those existing matrix-based SimRank algorithms, SimMat [1] is the state-of-the-art one, yielding O(n2) time for estimating SimRank, where  is the target rank of the adjacency matrix. However, the optimization method of SimMat is based on the following formula (i.e., Eq.(3) in [1]):

1 C

(WT

)-1

S

-

SW

=

1-C C

(WT

)-1,

(2)

which is derived by left-multiplying both sides of Eq.(1) by

1 C

(WT

)-1.

Unfortunately, this process rests on an under-

lying assumption that (WT )-1 must exist (or equivalently,

the adjacency matrix must be invertible), but this does not

always hold in reality. Indeed, when (WT )-1 does not exist,

SimMat fails to work properly, as depicted in Example 1.

Example 1. Consider two web graphs G1 and G2 in Fig.1, where nodes are web pages, and edges are hyperlinks. We want to calculate SimRank scores of all-pairs on G1 and G2, respectively. However, we observe that SimMat [1] fails on both graphs as their adjacency matrices are not invertible: 1
rank(Adj(G1)) = 3 < 6, rank(Adj(G2)) = 3 < 5. Thus, there does not exist (WT )-1 for G1 and G2 such that Eq.(2) holds, not to mention using the subsequent Eq.(2)-based optimization method in [1] for SimRank calculation.

Example 1 suggests that SimMat only works when (WT )-1 exists. However, as demonstrated by our statistical experiments on SNAP2, there are over 95% real graphs whose
1According to linear algebra, for any n×n matrix X, the following statements are equivalent: rank(X) = n  X-1 exists. 2Stanford Large Network Platform (SNAP) collects many real datasets available at http://snap.stanford.edu/data/index.html.

859

G1 f

G2 c

b

d

e

a

c b

d

e a

(a)

(b)

Figure 1: SimMat fails on Singular Graphs

adjacency matrices are non-invertible, i.e., rank(W) < n (known as singular graphs). Thus, it is imperative to provide a treatment for SimMat, by devising an efficient algorithm that supports SimRank computations on singular graphs. To this end, we study the following problem in this paper:

Problem (SimRank over Singular Graphs) Given a singular graph G, and a damping factor C  (0, 1). Compute all-pairs of SimRank scores on G.

It is worth mentioning that there is a special subclass

of singular graphs, in which there are many isolated nodes

(e.g., G2 in Fig.1(b)). Singular graphs of this subclass are not the direct focus of our consideration, since they could be

further simplified by removing trivial zero rows and columns

(associated with isolated nodes) in the adjacency matrices.

For example in G2, once isolated nodes d and e are removed, its adjacency matrix Adj(G2) can be reduced to Adj(G2):

ab c de

a0 1 1 0 0

abc

b0 0 1 0 0

a0 1 1

Adj(G2) =

c

 

1

0

0

0

0

 

=

Adj(G2) = b  0

0

1 .

d0 0 0 0 0

c 100

e 00000

Since Adj(G2) becomes invertible, SimMat is still applicable to the reduced G2 (though not applicable to the original G2). Hence, in this scenario, we call G2 a "false" singular graph, a
graph whose original non-invertible adjacency matrix can be

converted to an invertible one if isolated nodes are removed.

In this paper, our attention will be devoted to "true" singular

graphs without isolated nodes (e.g., G1 in Fig.1(a)).

Contributions. Our main contributions are listed below. · We prove that, on a singular graph with its adjacency matrix rank r, SimRank matrix can be represented as a rank r matrix plus an identity matrix. (Section 3.1) · We devise an efficient algorithm on a singular graph, Sig-SR, entailing O(r(n2 + Kr2)) time to calculate allpairs SimRank for K iterations. (Section 3.2) · We empirically show that Sig-SR enables SimMat [1] to support SimRank assessment on singular graphs, and runs significantly faster than NI Sim [2]. (Section 4)

2. RELATED WORK
SimRank is arguably one of the most successful link-based similarity measures in recent years. It was initially proposed by Jeh and Widom [3], who adopted an iterative paradigm to compute SimRank scores of all-pairs in O(Kn2d2) time. Since then, there has been a surge of papers looking at various problems in efficient SimRank computing as the naive algorithm [3] has high time complexity. Recent results include matrix-based methods [1, 2], iterative optimization [7­9], random walk sampling [10, 11], incremental updating [12], parallel computing [13], and semantic improvement [14].
In comparison to the work on iterative optimization (resp. random walk sampling) that will produce deterministic (resp. probabilistic) errors, the work on matrix-based methods [1,2] may accurately calculate SimRank without loss of exactness. The pioneering work of Li et al. [2] proposed a very elegant

closed-form for SimRank:
vec(S) = (1 - C)(I - C · (WT  WT ))-1vec(I), (3)
where  is tensor product, and vec() matrix vectorization. Based on Eq.(3), [2] utilized rank r (resp. low-rank  (< r)) singular value decomposition to compute all-pairs SimRank in O(r4n2) time (resp. O(4n2) with a little accuracy loss). In contrast, our work uses a trick to avoid directly applying matrix factorization to the high-dimensional tensor product, just entailing O(rn2) time for singular graphs.
Most recently, Fujiwara et al. [1] proposed SimMat to further speed up the computation of n-pairs of SimRank w.r.t. a given query node to O(rn) time, thus needing O(rn2) time for all-pairs SimRank. However, their optimization method is based on Eq.(2), implying an underlying assumption that (WT )-1 must exist, which does not always hold in general. In comparison, our work provides a treatment for SimMat, aiming to support SimRank computation on singular graphs, whose (WT )-1 does not exist. Note that the matrix inversion in Eq.(3), different to (WT )-1 in Eq.(2), always exists as (I - C · (WT  WT )) is a diagonally dominant matrix.3

3. OUR SOLUTION

3.1 Characterizing SimRank on Singular Graphs

Unlike SimMat [1] that left-multiplies both sides of Eq.(1)

by

1 C

(WT

)-1

,

we

first

provide

the

following

lemma.

Lemma 1 ( [12]). Given any three n×n matrices A, B, C,

if max(A)·max(B) < 1,4 then there exists a unique solution

X=

 i=0

Ai

· C · Bi

to

the

following

matrix

equation

X = A · X · B + C.

(4)

Main Idea. Based on Lemma 1, we show our main idea. Let A := C · WT , B := W, C := (1 - C) · I in Lemma 1.
Then, the SimRank solution S to Eq.(1) takes the form: 5

S = (1 - C) ·  Ci · (WT )i · Wi.

(5)

i=0

As G is a rank r (< n) singular graph, we now apply Gram­ Schmidt method [15, pp.316] to decompose W  Rn×n as W = Vr · HrT , where Vr and Hr are both n × r matrices, and Vr is a column orthonormal matrix, i.e., VrT Vr = Ir.6 Hence, Wi can be efficiently computed as

Wi = (Vr · HrT )i = Vr · P¯ r · HrT  Rn×n,

(6)

with P¯ r := Pri-1 and Pr := HrT · Vr  Rr×r.

It is important to note that the second equality in Eq.(6) plays a critical role in speeding up the computation of Wi. The original method for computing Wi requires O(in3) time, including multiplying i times two n×n matrices. In contrast, the right-hand side of Eq.(6) tells that, once W is decomposed into two n × r matrices, the computation of Wi can be improved to O(r2n + (i - 1)r3 + rn2) time with r < n, involving (i) O(r2n) time to compute HrT · Vr, whose result

3X is diagonally dominant if |xi,j |  j=i |xi,j |, i. 4max(X) is the eigenvalue of the matrix X with the largest

absolute value, i.e., the spectral radius of X.

5One can readily verify that max(C · WT ) · max(W) < 1,

by using the matrix norm property max()   and the

fact that 6Ir is an

W is r×r

column-normalized ( W 1 = identity matrix, as opposed to

IWTR n×n.

1).

860

is an r × r matrix, memoized as Pr  Rr×r, (ii) O((i - 1)r3)

time to compute the power (i - 1) of Pr, memoized as P¯ r,

and (iii) O(rn2) time to compute Vr · P¯ r · HrT .

n

Then, to efficiently compute S, we plug Eq.(6) into Eq.(5):

1 1-C

S

-

I

=

 Ci · Hr(PrT )i-1VrT · VrPri-1HrT
i=1

= Hr

 Ci · (PrT )i-1 · (VrT Vr) ·Pri-1 HrT
i=1

= C · Hr · Sr · HrT ,

(7)

with Sr :=  Ci · (PrT )i · Pri.

(8)

i=0

Eq.(7)

depicts

an

important

feature

of

matrix

(

1 1-C

S-

I),

based on the following theorem.

Theorem 1. For a singular graph G with the adjacency rank r (< n), its SimRank matrix S can be characterized as a rank r matrix plus a scaled identity matrix.

Proof. As Sr in Eq.(8) is an r × r matrix, Eq.(7) says

that

the

matrix

(

1 1-C

S

-

I)

can

be

decomposed

as

the

prod-

uct of (Hr · Sr)  Rn×r and (HTr )  Rr×n, meaning that

(

1 1-C

S

-

I)

is

a

rank

r

matrix.

Thus,

S

on

rank

r

singular

graph can be expressed as the rank r matrix (Hr · Sr · HTr )

plus the scaled identity matrix (1 - C) · I.

3.2 An Efficient Algorithm on Singular Graphs
Characterizing the structure of S in Theorem 1 is intended to speed up the computation of SimRank on singular graphs.
Specifically, by virtue of Eq.(7), solving S  Rn×n boils down to computing Sr  Rr×r from Eq.(8). Due to its small dimension, Sr is relatively easier to solve and can thus significantly improve the complexity for computing SimRank. Moreover, we observe that Eq.(8) takes an Eq.(5)-like form. Applying Lemma 1 to Eq.(8), we have the following theorem.

Theorem 2. SimRank matrix S over a rank r singular graph can be represented as

S = (1 - C) · (I + C · Hr · Sr · HrT ),

with Sr = C · PrT · Sr · Pr + Ir.

(9)

Proof. The correctness of Theorem 2 follows immediately from the combination of Eqs.(7) and (8) and Lemma 1.
One caveat is that the existence of Sr in Eq.(9) is guaranteed by the condition that C · max(PrT ) · max(Pr) < 1, or equivalently, max(Pr)  1. This is always true because W = Vr · HrT implies that
VrT · W · Vr = VrT · (Vr · HrT ) · Vr
= (VrT · Vr) · (HrT · Vr) = Ir · Pr = Pr.

This suggests that Pr is a compression of W via orthogonal projection Vr onto a small r × r subspace. Thus, by Cauchy interlacing theorem, it is follows that max(Pr)  max(W). Combining this with the spectral property that max(W) 
W 1  1 yields max(Pr)  1.

Theorem 2 provides an efficient way of computing SimRank on rank r (< n) singular graphs. As depicted in Fig.2, the conventional method computes S on an n×n dimensional space via Eq.(1), whereas our approach solves S by resorting to the computation of Sr on a small r × r dimensional space via Eq.(9). Below is the complexity analysis of our solution.

Theorem 3. All-pairs SimRank on a rank r singular graph can be computed in O(rn2 + Kr3) time for K iterations.

n

r

n

(r × r) dim  (n × n) dim

W

· = Vr n

HTr

r

r

r

n

(1 - C)· C· Vr

·
n

Sr

r·

VrT

n r
+I

n
n =n S

x decompose W
r

z compute S

n

r

HTr

r· Vr n := Pr r

Sr = C · PTr · Sr · Pr + Ir

S = C · WT · S · W + (1 - C) · I

y solve Sr

(in r × r dim)

(in n × n dim)

Figure 2: Compute S in n × n space by resorting to

solving Sr in small r × r subspace

Algorithm 1: Sig-SR (G, C, K)

Input : singular graph G, damping factor C, iterations K.

Output: SimRank matrix S.

1 Initialize the column normalized adjacency matrix W.

2 Decompose W: [Vr, HTr ]  Gram-Schmidt(W).

3 Compute Pr  HrT · Vr.

4 Initialize Sr(0)  Ir.

5 for k  0, 1, · · · , K - 1 do

6

Sr (k+1)  C · Pr T · Sr(k) · Pr + Ir .

7 return S  (1 - C) · (C · Hr · Sr(K) · HrT + I).

To prove Theorem 3, we next provide an algorithm, denoted as Sig-SR, for SimRank assessment on a singular graph.
Algorithm. The algorithm Sig-SR works in three phases: 1) For the preprocessing (lines 1­3), it first applies Gram­
Schmidt method [15, pp.316] to factorize W as Vr and HrT , such that the column vectors in Vr form an orthonormal basis of W (line 2). Then, utilizing Vr and HrT , it calculates auxiliary Pr  Rr×r (line 3) for subsequent iterations.
2) In the computation of Sr  Rr×r (lines 4­6), it adopts
a fixed point iteration in r × r dimension to get Sr in Eq.(9). It is worth noting that, as Pr is full-rank (invertible) matrix, other prior optimization methods for computing SimRank (e.g., [1, 7, 13]) can be applied to computing Sr as well.
3) For calculating S  Rn×n (line 7), it uses Vr and the
resulting S(rK), and returns S as the final result.
Correctness & Complexity. The correctness of S returned from Sig-SR can be readily verified by Theorem 2.
The total time of Sig-SR is bounded by O(rn2 + Kr3), which consists of (i) O(rn2 + r2n) time for the preprocessing (lines 1­3), including O(rn2) time to decompose W and O(r2n) time to compute Pr, (ii) O(Kr3) time for computing S(rK) for K iterations (lines 4­6), and (iii) O(rn2) time for computing S (line 7).

Example 2. Recall the singular graph G1 in Fig.1(a). We illustrate how Sig-SR computes all-pairs SimRank in G1. As previously used in [2, 8], we set C = 0.8 and K = 10.
Firstly, by applying the Gram­Schmidt process, W  R6×6 can be decomposed as W = V3 · H3T (line 2):

0

0

 

0

 

0

0

0 0 0 0 1

0
1
3
0
1
3
0

0 0 0 0 1

1 2
0
1 2
0
0

0  0

0  0

0 0

   

=

   

0 0

1   -1

0.707 0
0.707 0 0

0

-0.577 0
-0.577 0





 

·







0 0 0

-1 0 0

0 0 -0.577

-1 0 0

0 0.707
0

-1 
0 .
0

0

0

1 3

0

0

0

0

0 -0.577

H3 T

W

V3

Then, using V3 and H3T , we obtain P3  R3×3 (line 3)

and S3(10)  R3×3 (lines 4­6) as follows:



0

0 1.732 

 1.666

0 0

P3 =  -0.707

0

0  , S3(10) = 

0 1.666 0 .

0 -0.408

0

0

05

861

Finally, S  R6×6 is derived from S3(10)  R3×3 (line 7):

 0.2

0



S

=

 



0 0

0

0

0 0.467
0 0.267
0 0.267

0 0 0.467 0 0 0

0 0.267
0 0.467
0 0.267

0 0 0 0 0.333 0

0

0.267 

0 0.267


.


0

0.467

4. EXPERIMENTAL EVALUATION

We present an empirical study on real and synthetic data, to show that our algorithm Sig-SR (1) provides an effective treatment for supporting SimMat [1] on singular graphs, and (2) is much faster than other competitors on singular graphs.
Experimental Setting. We used three real datasets.
(1) (ca)-HepTh, a citation graph from the e-print arXiv, where nodes are papers, and edges are citations.
(2) (soc)-Slashdot, a Slashdot Zoo social network, which contains friend links between the users of Slashdot.
(3) (email)-EuAll, an email dataset from a EU research institution, where an edge from an email address i to j is a message sent from i to j. We removed all the isolated nodes.
The sizes of these datasets are summarized below.

Dataset
ca soc email

m = |E|
51,971 948,464 348,912

n = |V |
9,877 82,168 225,409

r
9,109 65,431 19,423

d = |E|/|V |
5.3 11.5 1.5

We designed a generator to produce synthetic data with 2 parameters: the number of nodes, and the number of edges. We generated graphs following the densification power law.
We implemented the following algorithms in Visual C++. 1) Sig-SR. 2) SimMat [1], the best known matrix-based SimRank algorithm. 3) Iter [7], the iterative algorithm computing SimRank via fine-grained memoization. 4) NI Sim [2], the only known matrix-based SimRank that supports singular graphs via SVD method. All the algorithms are run on Windows 7 with an Intel Core 3.1G CPU and 8G RAM.
As previously used in [2,8], we set damping factor C = 0.8, and total iteration number K = 10 as default values.
Experimental Results. We next present our findings.
(1) Effectiveness. Fig.3(a) shows the high time efficiency of Sig-SR on real and synthetic datasets. Note that, on real data, y-axis is in log scale; on synthetic data, n is varied from 20K to 100K as shown in x-axis. We see that 1) on singular graphs, Sig-SR works fairly well, whereas SimMat always fails due to the non-invertible adjacency matrices. This tells that Sig-SR, as a treatment for SimMat, enables SimRank assessment on singular graphs. 2) On each dataset, Sig-SR consistently outperforms all other algorithms, e.g., on real ca, Sig-SR (65s) runs 300x faster than NI Sim (19786s), and 6.7x faster than Iter (436s). When n > 40K, NI Sim explodes due to huge costs for tensor products; in contrast, Sig-SR uses Theorem 1 that avoids tensor products. These verify that our method of computing S (in n×n) by resorting to the computation of Sr (in small r × r) is effective.
(2) Phase Duration. Fig.3(b) depicts the time percentage of Sig-SR for three phases (i.e., (I) decompose W, (II) solve Sr, (III) compute S) on real datasets. We can see that Phase (II) is most time-consuming on ca (58%) and soc (47%), whereas on email, the time for Phase (II) is negligibly small (2%). The reason is that on email, r is 11.6x smaller than n, in contrast with ca and soc (1.25x) where r is only 1.08x and 1.25x smaller, respectively. Thus, when r  n, the time for Phase (II) is comparable to that for (I) and (III). This confirms our complexity analysis of Sig-SR in Section 3.2.

SimMat

Sig-SR

Iter

Ni Sim

Real Data 105

100K

Synthetic Data

Elapsed Time (sec)

Elapsed Time (sec)

104

80K

103

60K

40K

102

20K

101 ca soc email

0 20K 40K 60K 80K100K

(a) Efficiency of Sig-SR on Real and Synthetic Graphs

Frequency (%) (0, 0.2) [0.2, 0.4) [0.4, 0.6) [0.6, 0.8) [0.8, 1)
1

Phase Duration (%)

1

decompose W

0.8

solve Sr  Rr×r

0.6

compute S  Rn×n

0.5 Real Datasets
0.3 0.1

0.4

0.2

0 ca soc email

Ratio r/n (%)

(b) % Time in Each Phase (c) Histogram on Rank r

Figure 3: Experimental Evaluations

(3) Singular Graph Statistics. To verify that singular graphs

are commonly existent, Fig.3(c) statistically depicts the fre-

quencies

of

r n

occurring

in

certain

ranges

of

ratios

(as

de-

picted in x-axis) over 100 real datasets. We see that 1) there

are only 2%

real

graphs

whose

r n

=

1,

i.e.,

non-singular

graphs are very rare in reality. Thus, Sig-SR is typically

useful in many cases. 2) Almost 32% (resp.21%) real graphs

have a small rank r  [0.2n, 0.4n) (resp.r  [0.4n, 0.6n)).

The smaller r is, the faster Sig-SR runs. This explains why,

in general, the better speedup of Sig-SR is guaranteed.

5. CONCLUSIONS
We provide a treatment of SimMat [1], by supporting SimRank assessment on singular graphs. First, we show that SimRank matrix on rank r graph can be represented as a rank r matrix plus a scaled identity matrix. Then, in light of this, an efficient algorithm Sig-SR is proposed. Our empirical evaluations verify the effectiveness of Sig-SR against its competitors over real and synthetic datasets.
6. REFERENCES
[1] Y. Fujiwara, M. Nakatsuji, H. Shiokawa, and M. Onizuka, "Efficient search algorithm for SimRank," in ICDE, pp. 589­600, 2013.
[2] C. Li, J. Han, G. He, X. Jin, Y. Sun, Y. Yu, and T. Wu, "Fast computation of SimRank for static and dynamic information networks," in EDBT, 2010.
[3] G. Jeh and J. Widom, "SimRank: A measure of structural-context similarity," in KDD, pp. 538­543, 2002.
[4] W. Zheng, L. Zou, Y. Feng, L. Chen, and D. Zhao, "Efficient SimRank-based similarity join over large graphs," PVLDB, vol. 6, no. 7, pp. 493­504, 2013.
[5] G. He, H. Feng, C. Li, and H. Chen, "Parallel SimRank computation on large graphs with iterative aggregation," in KDD, pp. 543­552, 2010.
[6] L. Page, S. Brin, R. Motwani, and T. Winograd, "The PageRank citation ranking: Bringing order to the web," tech. rep., Stanford InfoLab, 1999.
[7] W. Yu, X. Lin, and W. Zhang, "Towards efficient SimRank computation on large networks," in ICDE, pp. 601­612, 2013.
[8] D. Lizorkin, P. Velikhov, M. N. Grinev, and D. Turdakov, "Accuracy estimate and optimization techniques for SimRank computation," VLDB J., vol. 19, no. 1, pp. 45­66, 2010.
[9] W. Yu, W. Zhang, X. Lin, Q. Zhang, and J. Le, "A space and time efficient algorithm for SimRank computation," World Wide Web, vol. 15, 2012.
[10] D. Fogaras and B. Rácz, "Scaling link-based similarity search," in WWW, 2005.
[11] P. Lee, L. V. S. Lakshmanan, and J. X. Yu, "On top-k structural similarity search," in ICDE, 2012.
[12] W. Yu, X. Lin, and W. Zhang, "Fast incremental SimRank on link-evolving graphs," in ICDE, 2014.
[13] G. He, C. Li, H. Chen, X. Du, and H. Feng, "Using graphics processors for high performance SimRank computation," IEEE Trans. Knowl. Data Eng., vol. 24, no. 9, pp. 1711­1725, 2012.
[14] W. Yu, X. Lin, W. Zhang, L. Chang, and J. Pei, "More is simpler: Effectively and efficiently assessing node-pair similarities based on hyperlinks," PVLDB, vol. 7, no. 1, pp. 13­24, 2013.
[15] C. Meyer, Matrix Analysis and Applied Linear Algebra. SIAM, Feb. 2001.

862

