# -*- coding: utf-8 -*-
"""Imbalanced_Classes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GTN2Q9XyFLIyex-nmuU7PB8k4tUmSW-q
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import re
import csv


from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import RandomizedSearchCV
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score, f1_score, precision_score, recall_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import ExtraTreesClassifier
from xgboost import XGBClassifier
from sklearn.svm import LinearSVC

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.wrappers.scikit_learn import KerasClassifier

from collections import Counter
from imblearn.over_sampling import RandomOverSampler
from imblearn.under_sampling import RandomUnderSampler
from imblearn.under_sampling import TomekLinks
from imblearn.over_sampling import SMOTE
#from imblearn.under_sampling import SMOTE

from sklearn.metrics import precision_recall_curve
import os
# print(os.listdir("../input"))
plt.style.use('ggplot')

df = pd.DataFrame()

raw = open(r"C:\\Users\\z3696\\Documents\\Document-Classification\\classifier\\NIST_FULL\\2019-neg.txt", encoding="ISO-8859-1")
lines = raw.readlines()
raw.close()

# remove /n at the end of each line
for index, line in enumerate(lines):
    lines[index] = line.strip()
    print(lines[index])

neg_2019_df = pd.DataFrame(columns=['sentence'])
i = 0
first_col = ""
for line in lines:
    first_col = re.sub(r' \(.*', "", line)
    neg_2019_df.loc[i] = [first_col]
    i = i+1

neg_2019_df.head()
neg_2019_df['label'] = 0
#print(neg_2019_df)

raw1 = open(r"C:\\Users\\z3696\\Documents\\Document-Classification\\classifier\\NIST_FULL\\2019-pos.txt", encoding="ISO-8859-1")
lines1 = raw1.readlines()
raw1.close()

# remove /n at the end of each line
for index, line in enumerate(lines1):
    lines1[index] = line.strip()
    print(lines1[index])

pos_2019_df = pd.DataFrame(columns=['sentence'])
i = 0
first_col = ""
for line in lines1:
    first_col = re.sub(r' \(.*', "", line)
    pos_2019_df.loc[i] = [first_col]
    i = i+1

pos_2019_df.head()
pos_2019_df['label'] = 1
#print(pos_2019_df)

df = df.append(pos_2019_df)
df = df.append(neg_2019_df)
print(df)
df.shape

import pandas as pd
import numpy as np
import nltk
import re
import string
from sklearn.naive_bayes import MultinomialNB, BernoulliNB
import seaborn as sns
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.metrics import accuracy_score, confusion_matrix, precision_recall_fscore_support as score, f1_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, KFold, cross_val_score
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import GridSearchCV
from nltk.corpus import stopwords
from nltk.corpus import wordnet
from nltk.stem.wordnet import WordNetLemmatizer
import string
from nltk.corpus import stopwords
from nltk.corpus import wordnet
from nltk.stem.wordnet import WordNetLemmatizer
from nltk.tag import pos_tag
from nltk.tokenize import word_tokenize
nltk.download('wordnet')
nltk.download('stopwords')
stopwords.words('english')

#Removing punctuations from entire dataset
punc_set = string.punctuation
punc_set

#Function for removing punctions
def remove_punc(text):
    clean = "".join([x.lower() for x in text if x not in punc_set])
    return clean

#Applying the 'remove_punc' function to entire dataset
df['no_punc'] = df['sentence'].apply(lambda z:remove_punc(z))

#Function for Tokenizing entire data for representing every word as datapoint
def tokenize(text):
    tokens = re.split("\W+",text)
    return tokens

#Applying the 'tokenize' function to entire dataset
df['tokenized_Data'] = df['no_punc'].apply(lambda z:tokenize(z))

#Importing stopwords from NLTK Library to remove stopwords now that we have tokenized it
stopwords = nltk.corpus.stopwords.words('english')

#Function for removing stopwords from single row
def remove_stopwords(tokenized_words):
    Ligit_text=[word for word in tokenized_words if word not in stopwords]
    return Ligit_text

#Applying the function 'remove_stopwords' from the entire dataset
df["no_stop"] = df["tokenized_Data"].apply(lambda z:remove_stopwords(z))

#Importing 'WordNetLemmatizer' as lemmatizing function to find lemma's of words
wnl = nltk.wordnet.WordNetLemmatizer()

#Function for lemmatizing the tokenzied text
def lemmatizing(tokenized_text):
    lemma = [wnl.lemmatize(word) for word in tokenized_text]
    return lemma

#Applying the 'lemmatizing' function to entire dataset
df['lemmatized'] = df['no_stop'].apply(lambda z:lemmatizing(z))

# #Importing the 'SnowballStemmer' and declaring variable 'sno' to save the stemmer in.
# #This Stemmer gives slightly better results as compared to 'PorterStemmer'
# sno = nltk.SnowballStemmer('english')

# #Function for applying stemming to find stem roots of all words
# def stemming(tokenized_text):
#     text= [sno.stem(word) for word in tokenized_text]
#     return text

# #Applying the 'stemming' function to entire dataset
# data['ss_stemmed'] = data['lemmatized'].apply(lambda z:stemming(z))


# ps = nltk.PorterStemmer()

# def stemming(tokenized_text):
#     text= [ps.stem(word) for word in tokenized_text]
#     return text

# data['ps_stemmed'] = data['lemmatized'].apply(lambda z:stemming(z))

#This step is done here because, the 'lemmatized' column is a list of tokenized words and when we apply vectorization
#techniques such as count vectorizer or TFIDF, they require string input. Hence convert all tokenzied words to string
df['lemmatized'] = [" ".join(review) for review in df['lemmatized'].values]

df.head()

#Splitting data into smaller dataframes for the purpose of Training and Testing
x1 = df.iloc[0:50712,5]
x2 = df.iloc[50713:101425,5]
y1 = df.iloc[0:50712,1]
y2 = df.iloc[50713:101425,1]
#x_seg = df.iloc[0:5,5]
#y_seg = df.iloc[0:5,1]
print(x1.shape)
print(x2.shape)
print(y1.shape)
print(y2.shape)
'''
x = df['lemmatized'].values
y = df['label'].values
print(x.shape)
print(y.shape)
'''

#Declaring and applying TFIDF functions to train and test data
tfidf_vect = TfidfVectorizer(ngram_range=(1,2))
tfidf_train = tfidf_vect.fit_transform(x1.values)
tfidf_test=tfidf_vect.transform(x2.values)
print(tfidf_train.shape)
print(tfidf_test.shape)
#tfidf_train.toarray()

tfidf_vect = TfidfVectorizer()
x_tfidf = tfidf_vect.fit_transform(df["lemmatized"])

x_train, x_test, y_train, y_test = train_test_split(x_tfidf,df["label"],test_size=0.5)
'''
tvec.fit(data_train['data'])
X_train = tvec.transform(data_train['data'])
X_test = tvec.transform(data_test['data'])
'''
#ExtraTreesClassifier(n_estimators=100)
models = [KNeighborsClassifier(),
          LogisticRegression(penalty='l2',random_state=0, solver='lbfgs', multi_class='auto', max_iter=500),
          DecisionTreeClassifier(),
          SVC(gamma='scale'),
          XGBClassifier()]
res = []

for model in models:
    year = "2019"
    feature = "Imbalanced"
    print(model, year, feature)
    #print()
    model.fit(x_train, y_train)
    y_pred = model.predict(x_test)
    pre =  (precision_score(y_test, y_pred)*100)
    rec =  (recall_score(y_test, y_pred)*100)
    acc =  (accuracy_score(y_test, y_pred)*100)
    f1s  = (f1_score(y_test, y_pred)*100)
    roc = roc_auc_score(y_test, y_pred)
    matrix = confusion_matrix(y_test, y_pred)
    report = classification_report(y_test, y_pred)
    curve = precision_recall_curve(y_test, y_pred)
    #print(score)
    print("Precision Score:", pre)
    print("Recall Sccore:", rec)
    print ("Accuracy Score:", acc)
    print("F1 Score:", f1s)
    print("ROC AUC Score:", roc)
    print("Confusion Matrix:", matrix)
    print("Classification Report:", report)
    print()
    #cm = docm(y_test, y_pred, data_train.target_names)
    #print(cm)
    res.append([model, feature, year, acc, f1s, roc, matrix, report, curve])
    print()
    print('-'*60)
    print()
    print(precision_recall_curve)

from sklearn.metrics import precision_recall_curve
from sklearn.metrics import plot_precision_recall_curve
from sklearn.metrics import (precision_recall_curve, PrecisionRecallDisplay)

import matplotlib.pyplot as plt
#predictions = clf.predict(X_test)
precision, recall, _ = precision_recall_curve(y_test, y_pred)
plot_disp = precision_recall_curve(models, y_test, y_pred)
disp = PrecisionRecallDisplay(precision=precision, recall=recall)
disp.plot()
plt.show()

from collections import Counter
from imblearn.over_sampling import RandomOverSampler
from imblearn.under_sampling import RandomUnderSampler
from imblearn.under_sampling import TomekLinks
from imblearn.over_sampling import SMOTE
#from imblearn.under_sampling import SMOTE
import seaborn as sns
g = sns.countplot(df['label'])
g.set_xticklabels(['Negative','Positive'])
plt.show()

# class count
label_count_neg, label_count_pos = df['label'].value_counts()

# Separate class
label_neg = df[df['label'] == 0]
label_pos = df[df['label'] == 1]# print the shape of the class
print('Label Negative:', label_neg.shape)
print('Label Positive:', label_pos.shape)

label_neg_under = label_neg.sample(label_count_pos)

test_under = pd.concat([label_neg_under, label_pos], axis=0)

print("total class of pos and neg :",test_under['label'].value_counts())# plot the count after under-sampeling
test_under['label'].value_counts().plot(kind='bar', title='label (target)')

label_pos_over = label_pos.sample(label_count_neg, replace=True)

test_over = pd.concat([label_pos_over, label_neg], axis=0)

print("total class of pos and neg:",test_under['label'].value_counts())# plot the count after under-sampeling
test_over['label'].value_counts().plot(kind='bar', title='label (target)')

x = x_tfidf
y = df["label"]

rus = RandomUnderSampler(random_state=42, replacement=True)# fit predictor and target variable
x_rus, y_rus = rus.fit_resample(x, y)

print('Original dataset shape:', Counter(y))
print('Resample dataset shape', Counter(y_rus))

x1_train, x1_test, y1_train, y1_test = train_test_split(x,y,test_size=0.5)
'''
tvec.fit(data_train['data'])
X_train = tvec.transform(data_train['data'])
X_test = tvec.transform(data_test['data'])
'''
#ExtraTreesClassifier(n_estimators=100)
models = [KNeighborsClassifier(),
          LogisticRegression(penalty='l2',random_state=0, solver='lbfgs', multi_class='auto', max_iter=500),
          DecisionTreeClassifier(),
          SVC(gamma='scale'),
          XGBClassifier()]
res = []

for model in models:
    year = "2019"
    feature = "RandomUnderSampler Only"
    print(model, year, feature)
    #print()
    model.fit(x1_train, y1_train)
    y1_pred = model.predict(x1_test)
    pre =  (precision_score(y1_test, y1_pred)*100)
    rec =  (recall_score(y1_test, y1_pred)*100)
    acc =  (accuracy_score(y1_test, y1_pred)*100)
    f1s  = (f1_score(y1_test, y1_pred)*100)
    roc = roc_auc_score(y1_test, y1_pred)
    matrix = confusion_matrix(y1_test, y1_pred)
    report = classification_report(y1_test, y1_pred)
    #print(score)
    print("Precision Score:", pre)
    print("Recall Sccore:", rec)
    print ("Accuracy Score:", acc)
    print("F1 Score:", f1s)
    print("ROC AUC Score:", roc)
    print("Confusion Matrix:", matrix)
    print("Classification Report:", report)
    print()
    #cm = docm(y_test, y_pred, data_train.target_names)
    #print(cm)
    res.append([model, feature, year, acc, f1s, roc, matrix, report])
    print()
    print('-'*60)
    print()
