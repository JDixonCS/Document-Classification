# -*- coding: utf-8 -*-
"""Feature_Selection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vib5yPT_0uccLPp-ymlXw2vSJutebtgY
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import re
import csv


from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import RandomizedSearchCV
from sklearn.tree import DecisionTreeClassifier

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.wrappers.scikit_learn import KerasClassifier

import os
# print(os.listdir("../input"))
plt.style.use('ggplot')

df = pd.DataFrame()

raw = open(r"C:\\Users\\z3696\\Documents\\Document-Classification\\classifier\\NIST_FULL\\2014-neg.txt", encoding="ISO-8859-1")
lines = raw.readlines()
raw.close()

# remove /n at the end of each line
for index, line in enumerate(lines):
    lines[index] = line.strip()
    print(lines[index])

neg_2014_df = pd.DataFrame(columns=['sentence'])
i = 0
first_col = ""
for line in lines:
    first_col = re.sub(r' \(.*', "", line)
    neg_2014_df.loc[i] = [first_col]
    i = i+1

neg_2014_df.head()
neg_2014_df['label'] = 0
#print(neg_2014_df)

raw1 = open(r"C:\\Users\\z3696\\Documents\\Document-Classification\\classifier\\NIST_FULL\\2014-pos.txt", encoding="ISO-8859-1")
lines1 = raw1.readlines()
raw1.close()

# remove /n at the end of each line
for index, line in enumerate(lines1):
    lines1[index] = line.strip()
    print(lines1[index])

pos_2014_df = pd.DataFrame(columns=['sentence'])
i = 0
first_col = ""
for line in lines1:
    first_col = re.sub(r' \(.*', "", line)
    pos_2014_df.loc[i] = [first_col]
    i = i+1

pos_2014_df.head()
pos_2014_df['label'] = 1
#print(pos_2014_df)

df = df.append(pos_2014_df)
df = df.append(neg_2014_df)
print(df)

import pandas as pd
import numpy as np
import nltk
import re
import string
from sklearn.naive_bayes import MultinomialNB, BernoulliNB
import seaborn as sns
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.metrics import accuracy_score, confusion_matrix, precision_recall_fscore_support as score, f1_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, KFold, cross_val_score
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import GridSearchCV
from nltk.corpus import stopwords
from nltk.corpus import wordnet
from nltk.stem.wordnet import WordNetLemmatizer
import string
from nltk.corpus import stopwords
from nltk.corpus import wordnet
from nltk.stem.wordnet import WordNetLemmatizer
from nltk.tag import pos_tag
from nltk.tokenize import word_tokenize
nltk.download('wordnet')
nltk.download('stopwords')
stopwords.words('english')

#Removing punctuations from entire dataset
punc_set = string.punctuation
punc_set

#Function for removing punctions
def remove_punc(text):
    clean = "".join([x.lower() for x in text if x not in punc_set])
    return clean

#Applying the 'remove_punc' function to entire dataset
df['no_punc'] = df['sentence'].apply(lambda z:remove_punc(z))

#Function for Tokenizing entire data for representing every word as datapoint
def tokenize(text):
    tokens = re.split("\W+",text)
    return tokens

#Applying the 'tokenize' function to entire dataset
df['tokenized_Data'] = df['no_punc'].apply(lambda z:tokenize(z))

#Importing stopwords from NLTK Library to remove stopwords now that we have tokenized it
stopwords = nltk.corpus.stopwords.words('english')

#Function for removing stopwords from single row
def remove_stopwords(tokenized_words):
    Ligit_text=[word for word in tokenized_words if word not in stopwords]
    return Ligit_text

#Applying the function 'remove_stopwords' from the entire dataset
df["no_stop"] = df["tokenized_Data"].apply(lambda z:remove_stopwords(z))

#Importing 'WordNetLemmatizer' as lemmatizing function to find lemma's of words
wnl = nltk.wordnet.WordNetLemmatizer()

#Function for lemmatizing the tokenzied text
def lemmatizing(tokenized_text):
    lemma = [wnl.lemmatize(word) for word in tokenized_text]
    return lemma

#Applying the 'lemmatizing' function to entire dataset
df['lemmatized'] = df['no_stop'].apply(lambda z:lemmatizing(z))

# #Importing the 'SnowballStemmer' and declaring variable 'sno' to save the stemmer in.
# #This Stemmer gives slightly better results as compared to 'PorterStemmer'
# sno = nltk.SnowballStemmer('english')

# #Function for applying stemming to find stem roots of all words
# def stemming(tokenized_text):
#     text= [sno.stem(word) for word in tokenized_text]
#     return text

# #Applying the 'stemming' function to entire dataset
# data['ss_stemmed'] = data['lemmatized'].apply(lambda z:stemming(z))


# ps = nltk.PorterStemmer()

# def stemming(tokenized_text):
#     text= [ps.stem(word) for word in tokenized_text]
#     return text

# data['ps_stemmed'] = data['lemmatized'].apply(lambda z:stemming(z))

#This step is done here because, the 'lemmatized' column is a list of tokenized words and when we apply vectorization
#techniques such as count vectorizer or TFIDF, they require string input. Hence convert all tokenzied words to string
df['lemmatized'] = [" ".join(review) for review in df['lemmatized'].values]

df.head()

#Splitting data into smaller dataframes for the purpose of Training and Testing
# 2014: 78229, #2014:
x1 = df.iloc[1:40087,5]
x2 = df.iloc[40088:80174,5]
y1 = df.iloc[1:40087,1]
y2 = df.iloc[40088:80174,1]
#x_seg = df.iloc[0:5,5]
#y_seg = df.iloc[0:5,1]
print(x1.shape)
print(x2.shape)
print(y1.shape)
print(y2.shape)
'''
x = df['lemmatized'].values
y = df['label'].values
print(x.shape)
print(y.shape)
'''

#Declaring and applying TFIDF functions to train and test data
tfidf_vect = TfidfVectorizer(ngram_range=(1,2))
tfidf_train = tfidf_vect.fit_transform(x1.values)
tfidf_test=tfidf_vect.transform(x2.values)
print(tfidf_train.shape)
print(tfidf_test.shape)
#tfidf_train.toarray()

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score, recall_score, precision_score
from sklearn.preprocessing import StandardScaler
tfidf_vect = TfidfVectorizer()
x_tfidf = tfidf_vect.fit_transform(df["lemmatized"])

x = x_tfidf
y = df['label']
#x = pd.get_dummies(x)
#y = LabelEncoder().fit_transform(y)

X2 = StandardScaler(with_mean=False).fit_transform(x)

X_Train, X_Test, Y_Train, Y_Test = train_test_split(X2, y, test_size = 0.50, 
                                                    random_state = 101)

DCT = DecisionTreeClassifier()
model_dt = DCT.fit(X_Train, Y_Train)
probs_dt = model_dt.predict_proba(X_Test)[:, 1]
dct_pred = DCT.predict(X_Test)
fdct = f1_score(dct_pred,Y_Test)
print("===DCT with Standard Scalar Only- 2014 ===")
print('DCT F1-score',fdct*100)
print('DCT ROCAUC score:',roc_auc_score(Y_Test, dct_pred)*100)
print('DCT Recall score:', recall_score(Y_Test, dct_pred)*100)
print('DCT Precision Score:', precision_score(Y_Test, dct_pred)*100)
print('DCT Confusion Matrix', confusion_matrix(Y_Test, dct_pred), "\n")
print('DCT Classification', classification_report(Y_Test, dct_pred), "\n")
print('DCT Accuracy Score', accuracy_score(Y_Test, dct_pred)*100)


from sklearn.ensemble import ExtraTreesClassifier
from sklearn.feature_selection import SelectFromModel

# ExtraTreesClassifier
ETC = ExtraTreesClassifier()
model_et = ETC.fit(X_Train,Y_Train)
#probs_et = model_et.predict_proba(X_Test)[:, 1]
model = SelectFromModel(model_et, prefit=True)
Selected_X = model.transform(X_Train)
Naive = MultinomialNB().fit(Selected_X, Y_Train)
Selected_X_Test = model.transform(X_Test)
probs_nb = Naive.predict_proba(Selected_X_Test)[:, 1]
ny_pred = Naive.predict(Selected_X_Test)
fna = f1_score(ny_pred,Y_Test)
# Use accuracy_score function to get the accuracy
print("===Naive Bayes with Extra Trees Classifiers- 2014 ===")
print('Naive F1-score',fna*100)
print('Naive ROCAUC score:',roc_auc_score(Y_Test, ny_pred)*100)
print('Naive Recall score:', recall_score(Y_Test, ny_pred)*100)
print('Naive Precision Score:', precision_score(Y_Test, ny_pred)*100)
print('Naive Confusion Matrix', confusion_matrix(Y_Test, ny_pred), "\n")
print('Naive Classification', classification_report(Y_Test, ny_pred), "\n")
print('Naive Accuracy Score', accuracy_score(Y_Test, ny_pred)*100)

# Recursive Feature Elimination (RFE)
from xgboost import XGBClassifier
from sklearn.feature_selection import RFE
from sklearn.svm import LinearSVC
rfc = MultinomialNB()
rfe = RFE(rfc)
RFE_X_Train = rfe.fit_transform(X_Train,Y_Train)
RFE_X_Test = rfe.transform(X_Test)
rfe = rfe.fit(RFE_X_Train,Y_Train)
probs_rf = rfe.predict_proba(RFE_X_Test)[:, 1]
rfe_pred = rfe.predict(RFE_X_Test)
fna = f1_score(rfe_pred,Y_Test)
print("===NB with Recursive Feature Elimination - 2014 ===")
print('NB F1-score',fna*100)
print('NB ROCAUC score:',roc_auc_score(Y_Test, rfe_pred)*100)
print('NB Recall score:', recall_score(Y_Test, rfe_pred)*100)
print('NB Precision Score:', precision_score(Y_Test, rfe_pred)*100)
print('NB Confusion Matrix', confusion_matrix(Y_Test, rfe_pred), "\n")
print('NB Classification', classification_report(Y_Test, rfe_pred), "\n")
print('NB Accuracy Score', accuracy_score(Y_Test, rfe_pred)*100)

# Chi-squared (Chi2)
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn.preprocessing import MinMaxScaler

#min_max_scaler = MinMaxScaler()
#Scaled_X = min_max_scaler.fit_transform(X2)

X_new = SelectKBest(chi2, k=2).fit_transform(X2, y)
X_Train, X_Test, Y_Train, Y_Test = train_test_split(X_new, y, test_size = 0.50)

model_lr = LogisticRegression(penalty='l2',random_state=0, solver='lbfgs', multi_class='auto', max_iter=500).fit(X_Train, Y_Train)
#model_lr = log.fit(X_Train, Y_Train)
probs_lr = model_lr.predict_proba(X_Test)[:, 1]
lr_pred = model_lr.predict(X_Test)
f1lr = f1_score(lr_pred, Y_Test)
print("===Logistic Regression with SelectKBest with Standard Scalar - 2014===")
print('LR F1-score',f1lr*100)
print('LR ROCAUC score:',roc_auc_score(Y_Test, lr_pred)*100)
print('LR Recall score:', recall_score(Y_Test, lr_pred)*100)
print('LR Precision Score:', precision_score(Y_Test, lr_pred)*100)
print('LR Confusion Matrix', confusion_matrix(Y_Test, lr_pred), "\n")
print('LR Classification', classification_report(Y_Test, lr_pred), "\n")
print('LR Accuracy Score', accuracy_score(Y_Test, lr_pred)*100)

from sklearn.metrics import auc, precision_recall_curve
y_test_int = Y_Test.replace({'Positive': 1, 'Negative': 0})

baseline_model = sum(y_test_int == 1) / len(y_test_int)

precision_dt, recall_dt, _ = precision_recall_curve(y_test_int, probs_dt)
auc_dt = auc(recall_dt, precision_dt)

precision_nb, recall_nb, _ = precision_recall_curve(y_test_int, probs_nb)
auc_nb = auc(recall_nb, precision_nb)

precision_rf, recall_rf, _ = precision_recall_curve(y_test_int, probs_rf)
auc_rf = auc(recall_rf, precision_rf)

precision_lr, recall_lr, _ = precision_recall_curve(y_test_int, probs_lr)
auc_lr = auc(recall_lr, precision_lr)

plt.figure(figsize=(12, 7))
plt.plot([0, 1], [baseline_model, baseline_model], linestyle='--', label='Baseline model')
plt.plot(recall_dt, precision_dt, label=f'AUC Stan_Scal Dec_Tre = {auc_dt:.2f}')
plt.plot(recall_nb, precision_nb, label=f'AUC Ext_Tree Nai Bay = {auc_nb:.2f}')
plt.plot(recall_rf, precision_rf, label=f'AUC RFE w/ Nai Bay = {auc_rf:.2f}')
plt.plot(recall_lr, precision_lr, label=f'AUC LR w/ SKB & SS = {auc_lr:.2f}')
plt.title('Precision-Recall Curves 2014: Features', size=20)
plt.xlabel('Recall', size=14)
plt.ylabel('Precision', size=14)
plt.legend()
plt.show();
'''
# Recursive Feature Elimination (RFE)
from sklearn.feature_selection import RFE

model = RandomForestClassifier(n_estimators=700)
rfe = RFE(model)
RFE_X_Train = rfe.fit_transform(X_Train,Y_Train)
RFE_X_Test = rfe.transform(X_Test)
rfe = rfe.fit(RFE_X_Train,Y_Train)
print("Overall Accuracy using RFE: ", rfe.score(RFE_X_Test,Y_Test))

# Chi-squared (Chi2)
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn.preprocessing import MinMaxScaler

#min_max_scaler = MinMaxScaler()
#Scaled_X = min_max_scaler.fit_transform(X2)

X_new = SelectKBest(chi2, k=2).fit_transform(X2, y)
X_Train, X_Test, Y_Train, Y_Test = train_test_split(X_new, y, test_size = 0.50,
                                                    random_state = 101)
trainedtree = DecisionTreeClassifier().fit(X_Train, Y_Train)
predictionstree = trainedtree.predict(X_Test)
print("====Standard Scalar with SelectKBest - 2014====")
print("Decision Tree Confusion Matrix", confusion_matrix(Y_Test,predictionstree))
print("Decision Tree Classification", classification_report(Y_Test,predictionstree))
'''