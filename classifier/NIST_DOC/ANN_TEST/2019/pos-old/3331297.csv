,sentence,label,data
0,Short Research Papers 1B: Recommendation and Evaluation,null,null
1,,null,null
2,"SIGIR '19, July 21­25, 2019, Paris, France",null,null
3,,null,null
4,Multiple Query Processing via Logic Function Factoring,null,null
5,,null,null
6,Matteo Catena,null,null
7,"ISTI-CNR Pisa, Italy matteo.catena@isti.cnr.it",null,null
8,ABSTRACT,null,null
9,"Some extensions to search systems require support for multiple query processing. This is the case with query variations, i.e., different query formulations of the same information need. The results of their processing can be fused together to improve effectiveness, but this requires to traverse more than once the query terms' posting lists, thus prolonging the multiple query processing time. In this work, we propose an approach to optimize the processing of query variations to reduce their overall response time. Similarly to the standard Boolean model, we firstly represent a group of query variations as a logic function where Boolean variables represent query terms. We then apply factoring to such function, in order to produce a more compact but logically equivalent representation. The factored form is used to process the query variations in a single pass over the inverted index. We experimentally show that our approach can improve by up to 1.95× the mean processing time of a multiple query with no statistically significant degradation in terms of NDCG@10.",null,null
10,ACM Reference Format: Matteo Catena and Nicola Tonellotto. 2019. Multiple Query Processing via Logic Function Factoring. In Proceedings of the 42nd International ACM SIGIR Conference on Research and Development in Information Retrieval,null,null
11,1 INTRODUCTION,null,null
12,Some information retrieval tasks require the capability to process multiple queries,null,null
13,"Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. SIGIR '19, July 21­25, 2019, Paris, France © 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM. ACM ISBN 978-1-4503-6172-9/19/07. . . $15.00 https://doi.org/10.1145/3331184.3331297",null,null
14,,null,null
15,Nicola Tonellotto,null,null
16,"ISTI-CNR Pisa, Italy nicola.tonellotto@isti.cnr.it",null,null
17,"Belkin et al. studied the effect of combining different query variations of the same topic to retrieve relevant documents, and they showed that merging together the top documents of different query variations can improve the effectiveness of the retrieval system for a specific information need [3]. The authors explain such improvement by observing that information representation and retrieval are a complex activity, and that no single query formulation can completely address such complexity. Therefore, they justify the usage of multiple query variations on the basis that their combination will address different aspects of the information need, and retrieve more relevant documents.",null,null
18,"Boosting search effectiveness using query variations requires the ability to efficiently process multi-queries composed by several variations as sub-queries, and rank fusion techniques can be leveraged for this purpose [2­4]. These techniques compute a separate ranked list of results for each sub-query, and such lists are then aggregated to generate the multi-query's final results. Such multiquery processing strategy can be very effective, but is also a time consuming operation. In fact, a search system may need to traverse its inverted index multiple times to process a multi-query, once for each of its sub-queries.",null,null
19,"In this work, we show how to optimize the processing of multiqueries composed by query variations as sub-queries. Firstly, we propose to process such multi-queries as a disjunction of conjunctive sub-queries, i.e., a document is a result for a multi-query only if it contains all the terms for at least one of its sub-queries. We express such condition as a logic function, which we use to test whether a document is a result for the multi-query. For instance, to satisfy the topic presented at the beginning of this section, a document must match a multi-query like ""(wind AND power AND pros AND cons) OR",null,null
20,"However, notice how DNF incurs in redundant computations. In our example, DNF will intersect twice the posting lists related to the terms ""wind"" and ""power"". Therefore, we propose to further optimize DNF by factoring its underlying logic function representation. Factoring represents a logic function in a factored form, i.e., as either a single Boolean variable or as a sum or product of factored forms [5]. While being equivalent, factored forms are more compact than disjunctive normal forms, i.e., they reduce the number of times a Boolean variable must be inspected to determine the value of the whole formula. In terms of multi-query processing, our example multi-query can be optimized as ""(wind AND power) AND",null,null
21,,null,null
22,937,null,null
23,,null,null
24,Short Research Papers 1B: Recommendation and Evaluation,null,null
25,,null,null
26,"SIGIR '19, July 21­25, 2019, Paris, France",null,null
27,,null,null
28,((pros AND cons) OR,null,null
29,Experiments conducted on the ClueWeb12,null,null
30,,null,null
31,2 DNF AND FDNF MATCHING,null,null
32,In this section we describe how multi-queries are processed by Disjunctive Normal Form,null,null
33,"A multi-query Q is a set {q1, . . . , qn } of sub-queries qi . Each sub-query in Q contains one or more terms, i.e., qi = {t1, . . . , tm }. The sub-queries in a multi-query are unique, but they can have some terms in common. Abusing our notation, a term belongs to Q if at least a sub-query of Q contains it.",null,null
34,"To process a multi-query, all its sub-queries must be processed and their top results must be fused together, to produce a final list of top documents to be returned to the user. Depending on the search system setting, sub-queries can be processed in disjunctive mode or conjunctive mode. According to the standard Boolean model, a document d matches a disjunctive sub-query q, i.e., d is a result for q, if d contains at least one of the sub-query terms. Conversely, a document matches a conjunctive sub-query q if it contains all the sub-query terms [7]. We use a Boolean variable vt to indicate if term t appears in a given document. We denote the logic `OR' operator with the sum symbol `+', and the logic `AND' operator with the multiplication symbol `·'. Therefore, a document matches a disjunctive sub-query q if the logic function t q vt evaluates to true, while it matches a conjunctive sub-query q if the logic function",null,null
35,"t q vt evaluates to true. In practice, the documents matching a disjunctive",null,null
36,"In this work, we assume that all the sub-queries of a given multiquery Q are either processed in disjunctive mode or conjunctive mode. When the sub-queries are disjunctive, a document matches Q if it contains at least one term belonging to one of the sub-queries composing the multi-query. As a consequence, processing Q when its sub-queries are disjunctive is equivalent to process a single query containing all the terms of Q. When sub-queries are conjunctive, a document is a matching result for Q only if it contains all terms of at least one sub-query. This condition can be expressed as a logic function in a disjunctive normal form, i.e., a given document matches the multi-query Q if the following logic function is true",null,null
37,,null,null
38,vt,null,null
39,,null,null
40,(1),null,null
41,,null,null
42,q Q t q,null,null
43,,null,null
44,"We propose to leverage the disjunctive normal form to process multi-queries, assuming all its sub-queries are processed in conjunctive mode. The corresponding multi-query processing strategy",null,null
45,"While DNF is efficient, it may need to traverse the same posting lists multiple times",null,null
46,"Factoring permits to represent a logic function in a factored form, i.e., as either a single Boolean variable or as a sum/product of factored forms. For instance,",null,null
47,"Brayton illustrates several techniques to factor logic functions [5]. The simplest one, literal factoring, recursively factors a logic function by considering it as an algebraic expression, i.e., by ignoring its Boolean nature and by considering logic OR/AND operators as arithmetic sums/products. At each step, literal factoring divides the logic function by its most frequent literal using elementary algebra. Then, the algorithm recursively factors the resulting quotient and rest of the division. The factoring stops when the input logic function of the recursive step is a literal.",null,null
48,"In this work, we use literal factoring to optimize multi-query processing as follows. Firstly, we factor the logic function associated to the multi-query to process. Then, for every logic AND operator in the factored form, we generate an ephemeral posting list to iterate over the intersection of the posting lists of its operands. Similarly, for every logic OR operator we generate an ephemeral posting list to iterate over their union. Finally, we use the ephemeral list associated to the root operator of the factored form to traverse the inverted index and to retrieve the matching document for the multi-query. We refer to this approach as factored DNF, or FDNF for short. Since Eq.",null,null
49,3 EXPERIMENTAL SETUP,null,null
50,The experiments in Section 4 are conducted to address the following research questions: RQ1. Which multi-query processing strategy gives the best results,null,null
51,in terms of effectiveness? RQ2. Which multi-query processing strategy gives the best results,null,null
52,in terms of efficiency?,null,null
53,,null,null
54,938,null,null
55,,null,null
56,Short Research Papers 1B: Recommendation and Evaluation,null,null
57,,null,null
58,"SIGIR '19, July 21­25, 2019, Paris, France",null,null
59,,null,null
60,"In our experiments, we compare the effectiveness and efficiency of the different processing strategies for multi-queries: SP-CS, DNF, and FDNF. SP-CS is the state-of-the-art strategy for processing multi-queries when considering their sub-queries as disjunctive [4]. Thanks to its disjunctive nature, SP-CS needs to traverse just once the posting list of the query terms to process a multi-query",null,null
61,,null,null
62,"s(d, Q) = nt · s(d, t),",null,null
63,,null,null
64,(2),null,null
65,,null,null
66,t Q,null,null
67,,null,null
68,"where nt is the number of sub-queries of Q containing term t, and s(d, t) is the document-term score according to some ranked retrieval model",null,null
69,"We compare SP-CS's performance with our DNF multi-query processing strategy, which considers sub-queries as conjunctive, and with FDNF, which optimizes multi-queries by performing the logic factoring of the sub-queries. Note that, when n = 1, a multiquery coincides with its unique sub-query, and the SP-CS",null,null
70,"In the following experiments we measure the mean NDCG and recall at cutoffs 10 and 1,000 to evaluate the effectiveness of our multi-query processing strategies. We also measure the mean processing times",null,null
71,"To build our multi-queries, we use the UQV100 dataset [1]. UQV100 contains 100 topics, associated to human-generated query variations. On average, each topic is associated to about 57 unique query variations. For a given topic, we use its query variations to generate sub-queries. Hence, in our experiments, we generate a multi-query for every topic in UQV100, for a total of 100 multiqueries. We vary the number n of unique variations per multi-query, ranging from 1 to all the available unique variations. In this way, we aim at measuring how effectiveness and efficiency change as multi-queries become more and more complex. Following [2], query variations are selected in decreasing order of popularity, i.e, when n = 1, we build the multi-queries using the most popular variation for each topic, when n = 2 we use the two most popular variations, and so on. For each multi-query, we retrieve the top 1,000 matching documents and we use BM25 as the underlying retrieval model.",null,null
72,"Experiments are conducted using the Terrier search engine1. The platform is hosted on a dedicated Ubuntu 16.04.5 server, Linux kernel version is 4.4.0-142-generic. The server has an Intel i7-4770K processor and 32 GB RAM. The inverted index used for the experiments is obtained by indexing ClueWeb12",null,null
73,,null,null
74,1 http://www.terrier.org,null,null
75,,null,null
76,4 RESULTS,null,null
77,"Table 1 reports the results, in terms of NDCG and recall, for SP-CS and DNF/FDNF, when we vary the number n of sub-queries in the multi-queries from 1 to all the available ones. DNF and FDNF always return the same matching documents as explained in Sec. 2.",null,null
78,"As we can see, there is no statistically significant difference in terms of NDCG@10 between SP-CS and DNF. However, the NDCG@1000 of SP-CS is much higher than the one obtained by DNF when processing the multi-queries. This is explainable with the better recall generally obtainable by disjunctive w.r.t. conjunctive processing, since the latter tend to favor precision over recall [8]. When processing a multi-query composed by a single variation, we observe that SP-CS's NDCG@1000 is 31% higher than DNF. However, DNF's NDCG@1000 increases as more query variations are added to the multi-queries, reducing the gap with SP-CS. When n = 10, DNF's NDCG@1000 is only 3% lower than SP-CS, and less than 0.2% lower when all the variations are used. In fact, multiple query variations help DNF to mitigate the low recall incurred by conjunctive processing, while retaining its high precision.",null,null
79,"To conclude on RQ1, we find that the best results in terms of effectiveness are obtained by processing the multi-queries according SP-CS. DNF/FDNF show a similar NDCG@10",null,null
80,"To address RQ2, Table 2 reports the mean processing time",null,null
81,"FDNF is even faster than DNF, thanks to the factoring of multiqueries. As discussed in Section 2, DNF may need to open a posting list multiple times, to process sub-queries in conjunctive mode. FDNF mitigates this issue by factoring the multi-queries, and this explains why FDNF always processes less postings than DNF, with smaller response times.. Moreover, for up to 7 query variations, FDNF improves the mean response times by approx. 1.04× up to 1.95× with respect to SP-CS. On average, FDNF can process four sub-queries in a time close to that required by SP-CS to process just one, with no statistically significant degradation of NDCG@10, as seen for RQ1.",null,null
82,"To conclude on RQ2, we find that our proposed FDNF multiquery processing strategy obtains smaller mean processing times w.r.t. SP-CS and our proposed DNF for up to seven sub-queries, allowing to process multiple sub-queries within acceptable time thresholds.",null,null
83,,null,null
84,939,null,null
85,,null,null
86,Short Research Papers 1B: Recommendation and Evaluation,null,null
87,,null,null
88,"SIGIR '19, July 21­25, 2019, Paris, France",null,null
89,,null,null
90,"Table 1: NDCG, with cutoff at 10 and 1000, and recall, for SP-CS, and DNF/FDNF when using n unique query variations. The best results for each value of n are in bold. SP-CS's results with  are statistically significant w.r.t. DNF/FDNF's according to paired t-test",null,null
91,,null,null
92,SP-CS,null,null
93,,null,null
94,DNF/FDNF,null,null
95,,null,null
96,n NDCG@10 NDCG@1000 Recall NDCG@10 NDCG@1000 Recall,null,null
97,,null,null
98,1 0.3059 2 0.3391 3 0.3331 4 0.3401 5 0.3480 6 0.3442 7 0.3390 8 0.3408 9 0.3465 10 0.3561,null,null
99,,null,null
100,0.4335 0.4637 0.4691 0.4774 0.4832 0.4839 0.4855 0.4871 0.4937 0.4990,null,null
101,,null,null
102,0.5735 0.6079 0.6177 0.6224 0.6282 0.6305 0.6374 0.6401 0.6444 0.6519,null,null
103,,null,null
104,0.3000 0.3330 0.3254 0.3329 0.3434 0.3403 0.3372 0.3394 0.3462 0.3551,null,null
105,,null,null
106,0.3317 0.4023 0.4225 0.4357 0.4546 0.4573 0.4639 0.4693 0.4779 0.4853,null,null
107,,null,null
108,0.3751 0.4813 0.5206 0.5364 0.5624 0.5712 0.5864 0.5971 0.6046 0.6152,null,null
109,,null,null
110,all 0.3538,null,null
111,,null,null
112,0.5064,null,null
113,,null,null
114,0.6634 0.3539,null,null
115,,null,null
116,0.5055,null,null
117,,null,null
118,0.6593,null,null
119,,null,null
120,Table 2: Mean processing time,null,null
121,,null,null
122,SP-CS,null,null
123,,null,null
124,DNF,null,null
125,,null,null
126,FDNF,null,null
127,,null,null
128,n Time Post. Time Post. Time Post.,null,null
129,,null,null
130,1 95 0.84 49 0.09 47 0.09 2 117 1.06 70 0.21 60 0.19 3 135 1.24 101 0.33 84 0.28 4 150 1.42 130 0.46 104 0.39 5 157 1.46 163 0.61 122 0.50 6 167 1.56 197 0.75 149 0.62 7 177 1.65 232 0.89 170 0.72 8 201 1.91 266 1.03 201 0.84 9 217 2.11 295 1.11 217 0.90 10 235 2.22 332 1.25 244 1.00,null,null
131,,null,null
132,all 621 5.46 2289 10.46 1699 9.03,null,null
133,,null,null
134,5 CONCLUSIONS,null,null
135,"In this paper, we addressed the problem of efficiently processing multiple queries, i.e., queries composed by different sub-queries that represents variations of a same information need. Following the standard Boolean model, firstly we proposed to represent a group of sub-queries as a logic function where Boolean variables represent query terms. Secondly, we proposed to process a multiple query in disjunctive normal form",null,null
136,,null,null
137,"We experimented our proposed processing strategies using the TREC ClueWeb12 collection, and the UQV100 set of query variations. As baseline, we selected the state-of-the-art SP-CS processing strategy for query variations. Our experiments showed that both DNF and FDNF do not significantly degrade the effectiveness in terms of NDCG@10 with respect to SP-CS. Moreover, our FDNF strategy can improve by up to 1.95× the mean processing time viz. SP-CS.",null,null
138,"As future works, we plan to investigate different literal factoring algorithms, taking into account the properties of Boolean algebra as well as new factoring optimizations, exploiting different sub-queries characteristics, such as the posting list lengths.",null,null
139,ACKNOWLEDGMENTS,null,null
140,We would like to thanks Joel Mackenzie for his help in the assessment of the experimental results. This paper is partially supported by the BIGDATAGRAPES project,null,null
141,REFERENCES,null,null
142,"[1] Peter Bailey, Alistair Moffat, Falk Scholer, and Paul Thomas. 2016. UQV100: A Test Collection with Query Variability. In Proc. SIGIR. 725­728.",null,null
143,"[2] Peter Bailey, Alistair Moffat, Falk Scholer, and Paul Thomas. 2017. Retrieval Consistency in the Presence of Query Variations. In Proc. SIGIR. 395­404.",null,null
144,"[3] Nicholas J. Belkin, Colleen Cool, W. Bruce Croft, and James P. Callan. 1993. The effect multiple query representations on information retrieval system performance. In Proc. SIGIR. 339­346.",null,null
145,"[4] Rodger Benham, Joel Mackenzie, Alistair Moffat, and J. Shane Culpepper. 2018. Boosting Search Performance Using Query Variations. CoRR abs/1811.06147",null,null
146,"[5] Robert K. Brayton. 1987. Factoring Logic Functions. IBM Journal of Research and Development 31, 2",null,null
147,"[6] Craig Macdonald, Nicola Tonellotto, and Iadh Ounis. 2017. Efficient & Effective Selective Query Rewriting with Efficiency Predictions. In Proc. SIGIR. 495­504.",null,null
148,"[7] Christopher D. Manning, Prabhakar Raghavan, and Hinrich Schütze. 2008. Introduction to Information Retrieval. Cambridge University Press.",null,null
149,"[8] Nicola Tonellotto, Craig Macdonald, and Iadh Ounis. 2018. Efficient Query Processing for Scalable Web Search. FnT in IR 12, 4-5",null,null
150,,null,null
151,940,null,null
152,,null,null
153,,null,null
